[
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE IF NOT EXISTS \"department\" (\n\"Department_ID\" int,\n\"Name\" text,\n\"Creation\" text,\n\"Ranking\" int,\n\"Budget_in_Billions\" real,\n\"Num_Employees\" real,\nPRIMARY KEY (\"Department_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"head\" (\n\"head_ID\" int,\n\"name\" text,\n\"born_state\" text,\n\"age\" real,\nPRIMARY KEY (\"head_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"management\" (\n\"department_ID\" int,\n\"head_ID\" int,\n\"temporary_acting\" text,\nPRIMARY KEY (\"Department_ID\",\"head_ID\"),\nFOREIGN KEY (\"Department_ID\") REFERENCES `department`(\"Department_ID\"),\nFOREIGN KEY (\"head_ID\") REFERENCES `head`(\"head_ID\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security' [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]How many departments are led by heads who are not mentioned?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE IF NOT EXISTS \"department\" (\n\"Department_ID\" int,\n\"Name\" text,\n\"Creation\" text,\n\"Ranking\" int,\n\"Budget_in_Billions\" real,\n\"Num_Employees\" real,\nPRIMARY KEY (\"Department_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"head\" (\n\"head_ID\" int,\n\"name\" text,\n\"born_state\" text,\n\"age\" real,\nPRIMARY KEY (\"head_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"management\" (\n\"department_ID\" int,\n\"head_ID\" int,\n\"temporary_acting\" text,\nPRIMARY KEY (\"Department_ID\",\"head_ID\"),\nFOREIGN KEY (\"Department_ID\") REFERENCES `department`(\"Department_ID\"),\nFOREIGN KEY (\"head_ID\") REFERENCES `head`(\"head_ID\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]How many departments are led by heads who are not mentioned?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management); [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]In which year were most departments established?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE IF NOT EXISTS \"department\" (\n\"Department_ID\" int,\n\"Name\" text,\n\"Creation\" text,\n\"Ranking\" int,\n\"Budget_in_Billions\" real,\n\"Num_Employees\" real,\nPRIMARY KEY (\"Department_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"head\" (\n\"head_ID\" int,\n\"name\" text,\n\"born_state\" text,\n\"age\" real,\nPRIMARY KEY (\"head_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"management\" (\n\"department_ID\" int,\n\"head_ID\" int,\n\"temporary_acting\" text,\nPRIMARY KEY (\"Department_ID\",\"head_ID\"),\nFOREIGN KEY (\"Department_ID\") REFERENCES `department`(\"Department_ID\"),\nFOREIGN KEY (\"head_ID\") REFERENCES `head`(\"head_ID\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]In which year were most departments established?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE IF NOT EXISTS \"department\" (\n\"Department_ID\" int,\n\"Name\" text,\n\"Creation\" text,\n\"Ranking\" int,\n\"Budget_in_Billions\" real,\n\"Num_Employees\" real,\nPRIMARY KEY (\"Department_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"head\" (\n\"head_ID\" int,\n\"name\" text,\n\"born_state\" text,\n\"age\" real,\nPRIMARY KEY (\"head_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"management\" (\n\"department_ID\" int,\n\"head_ID\" int,\n\"temporary_acting\" text,\nPRIMARY KEY (\"Department_ID\",\"head_ID\"),\nFOREIGN KEY (\"Department_ID\") REFERENCES `department`(\"Department_ID\"),\nFOREIGN KEY (\"head_ID\") REFERENCES `head`(\"head_ID\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes' [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List the creation year, name and budget of each department.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE IF NOT EXISTS \"department\" (\n\"Department_ID\" int,\n\"Name\" text,\n\"Creation\" text,\n\"Ranking\" int,\n\"Budget_in_Billions\" real,\n\"Num_Employees\" real,\nPRIMARY KEY (\"Department_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"head\" (\n\"head_ID\" int,\n\"name\" text,\n\"born_state\" text,\n\"age\" real,\nPRIMARY KEY (\"head_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"management\" (\n\"department_ID\" int,\n\"head_ID\" int,\n\"temporary_acting\" text,\nPRIMARY KEY (\"Department_ID\",\"head_ID\"),\nFOREIGN KEY (\"Department_ID\") REFERENCES `department`(\"Department_ID\"),\nFOREIGN KEY (\"head_ID\") REFERENCES `head`(\"head_ID\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List the creation year, name and budget of each department.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT creation ,  name ,  budget_in_billions FROM department [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Which head's name has the substring 'Ha'? List the id and name.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE IF NOT EXISTS \"department\" (\n\"Department_ID\" int,\n\"Name\" text,\n\"Creation\" text,\n\"Ranking\" int,\n\"Budget_in_Billions\" real,\n\"Num_Employees\" real,\nPRIMARY KEY (\"Department_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"head\" (\n\"head_ID\" int,\n\"name\" text,\n\"born_state\" text,\n\"age\" real,\nPRIMARY KEY (\"head_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"management\" (\n\"department_ID\" int,\n\"head_ID\" int,\n\"temporary_acting\" text,\nPRIMARY KEY (\"Department_ID\",\"head_ID\"),\nFOREIGN KEY (\"Department_ID\") REFERENCES `department`(\"Department_ID\"),\nFOREIGN KEY (\"head_ID\") REFERENCES `head`(\"head_ID\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Which head's name has the substring 'Ha'? List the id and name.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%' [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the average number of employees of the departments whose rank is between 10 and 15?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE IF NOT EXISTS \"department\" (\n\"Department_ID\" int,\n\"Name\" text,\n\"Creation\" text,\n\"Ranking\" int,\n\"Budget_in_Billions\" real,\n\"Num_Employees\" real,\nPRIMARY KEY (\"Department_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"head\" (\n\"head_ID\" int,\n\"name\" text,\n\"born_state\" text,\n\"age\" real,\nPRIMARY KEY (\"head_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"management\" (\n\"department_ID\" int,\n\"head_ID\" int,\n\"temporary_acting\" text,\nPRIMARY KEY (\"Department_ID\",\"head_ID\"),\nFOREIGN KEY (\"Department_ID\") REFERENCES `department`(\"Department_ID\"),\nFOREIGN KEY (\"head_ID\") REFERENCES `head`(\"head_ID\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the average number of employees of the departments whose rank is between 10 and 15?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the names of the states where at least 3 heads were born?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE IF NOT EXISTS \"department\" (\n\"Department_ID\" int,\n\"Name\" text,\n\"Creation\" text,\n\"Ranking\" int,\n\"Budget_in_Billions\" real,\n\"Num_Employees\" real,\nPRIMARY KEY (\"Department_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"head\" (\n\"head_ID\" int,\n\"name\" text,\n\"born_state\" text,\n\"age\" real,\nPRIMARY KEY (\"head_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"management\" (\n\"department_ID\" int,\n\"head_ID\" int,\n\"temporary_acting\" text,\nPRIMARY KEY (\"Department_ID\",\"head_ID\"),\nFOREIGN KEY (\"Department_ID\") REFERENCES `department`(\"Department_ID\"),\nFOREIGN KEY (\"head_ID\") REFERENCES `head`(\"head_ID\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the names of the states where at least 3 heads were born?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]How many acting statuses are there?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE IF NOT EXISTS \"department\" (\n\"Department_ID\" int,\n\"Name\" text,\n\"Creation\" text,\n\"Ranking\" int,\n\"Budget_in_Billions\" real,\n\"Num_Employees\" real,\nPRIMARY KEY (\"Department_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"head\" (\n\"head_ID\" int,\n\"name\" text,\n\"born_state\" text,\n\"age\" real,\nPRIMARY KEY (\"head_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"management\" (\n\"department_ID\" int,\n\"head_ID\" int,\n\"temporary_acting\" text,\nPRIMARY KEY (\"Department_ID\",\"head_ID\"),\nFOREIGN KEY (\"Department_ID\") REFERENCES `department`(\"Department_ID\"),\nFOREIGN KEY (\"head_ID\") REFERENCES `head`(\"head_ID\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]How many acting statuses are there?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT count(DISTINCT temporary_acting) FROM management [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the distinct ages of the heads who are acting?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE IF NOT EXISTS \"department\" (\n\"Department_ID\" int,\n\"Name\" text,\n\"Creation\" text,\n\"Ranking\" int,\n\"Budget_in_Billions\" real,\n\"Num_Employees\" real,\nPRIMARY KEY (\"Department_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"head\" (\n\"head_ID\" int,\n\"name\" text,\n\"born_state\" text,\n\"age\" real,\nPRIMARY KEY (\"head_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"management\" (\n\"department_ID\" int,\n\"head_ID\" int,\n\"temporary_acting\" text,\nPRIMARY KEY (\"Department_ID\",\"head_ID\"),\nFOREIGN KEY (\"Department_ID\") REFERENCES `department`(\"Department_ID\"),\nFOREIGN KEY (\"head_ID\") REFERENCES `head`(\"head_ID\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the distinct ages of the heads who are acting?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes' [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the maximum and minimum budget of the departments?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE IF NOT EXISTS \"department\" (\n\"Department_ID\" int,\n\"Name\" text,\n\"Creation\" text,\n\"Ranking\" int,\n\"Budget_in_Billions\" real,\n\"Num_Employees\" real,\nPRIMARY KEY (\"Department_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"head\" (\n\"head_ID\" int,\n\"name\" text,\n\"born_state\" text,\n\"age\" real,\nPRIMARY KEY (\"head_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"management\" (\n\"department_ID\" int,\n\"head_ID\" int,\n\"temporary_acting\" text,\nPRIMARY KEY (\"Department_ID\",\"head_ID\"),\nFOREIGN KEY (\"Department_ID\") REFERENCES `department`(\"Department_ID\"),\nFOREIGN KEY (\"head_ID\") REFERENCES `head`(\"head_ID\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the maximum and minimum budget of the departments?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE IF NOT EXISTS \"department\" (\n\"Department_ID\" int,\n\"Name\" text,\n\"Creation\" text,\n\"Ranking\" int,\n\"Budget_in_Billions\" real,\n\"Num_Employees\" real,\nPRIMARY KEY (\"Department_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"head\" (\n\"head_ID\" int,\n\"name\" text,\n\"born_state\" text,\n\"age\" real,\nPRIMARY KEY (\"head_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"management\" (\n\"department_ID\" int,\n\"head_ID\" int,\n\"temporary_acting\" text,\nPRIMARY KEY (\"Department_ID\",\"head_ID\"),\nFOREIGN KEY (\"Department_ID\") REFERENCES `department`(\"Department_ID\"),\nFOREIGN KEY (\"head_ID\") REFERENCES `head`(\"head_ID\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama' [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the themes of competitions that have corresponding host cities with more than 1000 residents?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the themes of competitions that have corresponding host cities with more than 1000 residents?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Give the average number of working horses on farms with more than 5000 total horses.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Give the average number of working horses on farms with more than 5000 total horses.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Count the number of different statuses.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Count the number of different statuses.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT count(DISTINCT Status) FROM city [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the most common status across all cities?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the most common status across all cities?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show the status shared by cities with population bigger than 1500 and smaller than 500.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show the status shared by cities with population bigger than 1500 and smaller than 500.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the average number of working horses of farms with more than 5000 total number of horses?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the average number of working horses of farms with more than 5000 total number of horses?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the official name and status of the city with the most residents?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the official name and status of the city with the most residents?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Please show the themes of competitions with host cities having populations larger than 1000.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Please show the themes of competitions with host cities having populations larger than 1000.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]How many farms are there?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]How many farms are there?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT count(*) FROM farm [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the official names of cities that have not hosted a farm competition?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the official names of cities that have not hosted a farm competition?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition) [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Return the hosts of competitions for which the theme is not Aliens?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Return the hosts of competitions for which the theme is not Aliens?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens' [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Return the maximum and minimum number of cows across all farms.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Return the maximum and minimum number of cows across all farms.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT max(Cows) ,  min(Cows) FROM farm [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Count the number of farms.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Count the number of farms.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT count(*) FROM farm [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Return the different statuses of cities, ascending by frequency.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Return the different statuses of cities, ascending by frequency.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the official names of cities that have hosted more than one competition?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the official names of cities that have hosted more than one competition?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List the total number of horses on farms in ascending order.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List the total number of horses on farms in ascending order.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List the most common type of Status across cities.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List the most common type of Status across cities.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Find the official names of cities with population bigger than 1500 or smaller than 500.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Find the official names of cities with population bigger than 1500 or smaller than 500.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the total horses record for each farm, sorted ascending?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the total horses record for each farm, sorted ascending?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the status of the city that has hosted the most competitions?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the status of the city that has hosted the most competitions?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List the official names of cities that have not held any competition.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List the official names of cities that have not held any competition.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition) [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the maximum and minimum number of cows across all farms.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the maximum and minimum number of cows across all farms.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT max(Cows) ,  min(Cows) FROM farm [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show the status of the city that has hosted the greatest number of competitions.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show the status of the city that has hosted the greatest number of competitions.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show the years and the official names of the host cities of competitions.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show the years and the official names of the host cities of competitions.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show the official names of the cities that have hosted more than one competition.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show the official names of the cities that have hosted more than one competition.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Return the themes of farm competitions, sorted by year ascending.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Return the themes of farm competitions, sorted by year ascending.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List official names of cities in descending order of population.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List official names of cities in descending order of population.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Official_Name FROM city ORDER BY Population DESC [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Please show the different statuses, ordered by the number of cities that have each.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Please show the different statuses, ordered by the number of cities that have each.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show the census ranking of cities whose status are not \"Village\".[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show the census ranking of cities whose status are not \"Village\".[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\" [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List the names of aircrafts and that won matches at least twice.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List the names of aircrafts and that won matches at least twice.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the names of all the aircrafts associated with London Gatwick airport?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the names of all the aircrafts associated with London Gatwick airport?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\" [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the names of all pilots 30 years old or young in descending alphabetical order?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the names of all pilots 30 years old or young in descending alphabetical order?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]what is the name of every pilot who is at least 25 years old?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]what is the name of every pilot who is at least 25 years old?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Name FROM pilot WHERE Age  >=  25 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]How old is the youngest winning pilot and what is their name?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]How old is the youngest winning pilot and what is their name?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the names of the pilots in alphabetical order?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the names of the pilots in alphabetical order?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Name FROM pilot ORDER BY Name ASC [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the total number of domestic passengers at all London airports?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the total number of domestic passengers at all London airports?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\" [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List names of all pilot aged 30 or younger in descending alphabetical order.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List names of all pilot aged 30 or younger in descending alphabetical order.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\" [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the names of all pilots listed by descending age?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the names of all pilots listed by descending age?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Name FROM pilot ORDER BY Age DESC [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the name of the aircraft that has won an award the most?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the name of the aircraft that has won an award the most?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]How many aircrafts are there?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]How many aircrafts are there?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT count(*) FROM aircraft [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List names of all pilot in descending order of age.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List names of all pilot in descending order of age.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Name FROM pilot ORDER BY Age DESC [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]For each aircraft that has won an award, what is its name and how many time has it won?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]For each aircraft that has won an award, what is its name and how many time has it won?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the average number of international passengers for an airport?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the average number of international passengers for an airport?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT avg(International_Passengers) FROM airport [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the maximum and mininum number of transit passengers for all airports?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the maximum and mininum number of transit passengers for all airports?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the names of all aircrafts that have won a match at least twice?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the names of all aircrafts that have won a match at least twice?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the number of aircraft?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the number of aircraft?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT count(*) FROM aircraft [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List the description of all aircrafts.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List the description of all aircrafts.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Description FROM aircraft [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List the names of aircrafts and that did not win any match.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List the names of aircrafts and that did not win any match.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH) [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\" [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\" [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the maximum and minimum number of transit passengers of all aiports.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the maximum and minimum number of transit passengers of all aiports.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\" [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Please show the names of aircrafts associated with airport with name \"London Gatwick\".[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Please show the names of aircrafts associated with airport with name \"London Gatwick\".[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\" [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the names of the pilots that have not won any matches in Australia?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the names of the pilots that have not won any matches in Australia?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia') [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]How many international and domestic passengers are there in the airport London Heathrow?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]How many international and domestic passengers are there in the airport London Heathrow?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\" [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]what is the name and age of the youngest winning pilot?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]what is the name and age of the youngest winning pilot?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List all pilot names in ascending alphabetical order.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List all pilot names in ascending alphabetical order.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Name FROM pilot ORDER BY Name ASC [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List the names of aircrafts and the number of times it won matches.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List the names of aircrafts and the number of times it won matches.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show all information on the airport that has the largest number of international passengers.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show all information on the airport that has the largest number of international passengers.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the most common mill type, and how many are there?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"architect\" (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);\n\nCREATE TABLE \"bridge\" (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\nCREATE TABLE \"mill\" (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the most common mill type, and how many are there?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the ids and names of the architects who built at least 3 bridges ?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"architect\" (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);\n\nCREATE TABLE \"bridge\" (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\nCREATE TABLE \"mill\" (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the ids and names of the architects who built at least 3 bridges ?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"architect\" (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);\n\nCREATE TABLE \"bridge\" (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\nCREATE TABLE \"mill\" (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the maximum length in meters for the bridges and what are the architects' names?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"architect\" (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);\n\nCREATE TABLE \"bridge\" (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\nCREATE TABLE \"mill\" (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the maximum length in meters for the bridges and what are the architects' names?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the id, name and nationality of the architect who built most mills?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"architect\" (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);\n\nCREATE TABLE \"bridge\" (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\nCREATE TABLE \"mill\" (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the id, name and nationality of the architect who built most mills?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"architect\" (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);\n\nCREATE TABLE \"bridge\" (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\nCREATE TABLE \"mill\" (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the names and year of construction for the mills of 'Grondzeiler' type?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"architect\" (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);\n\nCREATE TABLE \"bridge\" (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\nCREATE TABLE \"mill\" (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the names and year of construction for the mills of 'Grondzeiler' type?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler' [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the distinct types of mills that are built by American or Canadian architects?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"architect\" (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);\n\nCREATE TABLE \"bridge\" (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\nCREATE TABLE \"mill\" (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the distinct types of mills that are built by American or Canadian architects?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian' [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the ids, names and genders of the architects who built two bridges or one mill?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"architect\" (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);\n\nCREATE TABLE \"bridge\" (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\nCREATE TABLE \"mill\" (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the ids, names and genders of the architects who built two bridges or one mill?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Which of the mill names contains the french word 'Moulin'?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"architect\" (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);\n\nCREATE TABLE \"bridge\" (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\nCREATE TABLE \"mill\" (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Which of the mill names contains the french word 'Moulin'?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT name FROM mill WHERE name LIKE '%Moulin%' [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the average length in feet of the bridges?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"architect\" (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);\n\nCREATE TABLE \"bridge\" (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\nCREATE TABLE \"mill\" (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the average length in feet of the bridges?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT avg(length_feet) FROM bridge [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the names of the mills which are not located in 'Donceel'?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"architect\" (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);\n\nCREATE TABLE \"bridge\" (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\nCREATE TABLE \"mill\" (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the names of the mills which are not located in 'Donceel'?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT name FROM mill WHERE LOCATION != 'Donceel' [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the location with the most cinemas opened in year 2010 or later?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the location with the most cinemas opened in year 2010 or later?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show all the locations where no cinema has capacity over 800.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show all the locations where no cinema has capacity over 800.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show name, opening year, and capacity for each cinema.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show name, opening year, and capacity for each cinema.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT name ,  openning_year ,  capacity FROM cinema [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the title and director of each film?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the title and director of each film?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT title ,  directed_by FROM film [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show the cinema name and location for cinemas with capacity above average.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show the cinema name and location for cinemas with capacity above average.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema) [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show all the locations with at least two cinemas with capacity above 300.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show all the locations with at least two cinemas with capacity above 300.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show each location and the number of cinemas there.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show each location and the number of cinemas there.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Give me the title and highest price for each film.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Give me the title and highest price for each film.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show all the locations where some cinemas were opened in both year 2010 and year 2011.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show all the locations where some cinemas were opened in both year 2010 and year 2011.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]How many cinema do we have?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]How many cinema do we have?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT count(*) FROM cinema [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show director with the largest number of show times in total.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show director with the largest number of show times in total.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Count the number of cinemas.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Count the number of cinemas.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT count(*) FROM cinema [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the title and maximum price of each film?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the title and maximum price of each film?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Find the locations that have more than one movie theater with capacity above 300.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Find the locations that have more than one movie theater with capacity above 300.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Who are all the directors?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Who are all the directors?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT DISTINCT directed_by FROM film [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Count the number of films whose title contains the word 'Dummy'.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Count the number of films whose title contains the word 'Dummy'.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\" [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is total number of show times per dat for each cinema?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is total number of show times per dat for each cinema?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Find the distinct locations that has a cinema.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Find the distinct locations that has a cinema.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT DISTINCT LOCATION FROM cinema [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Which locations have 2 or more cinemas with capacity over 300?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Which locations have 2 or more cinemas with capacity over 300?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List all directors along with the number of films directed by each director.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List all directors along with the number of films directed by each director.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are all the locations with a cinema?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are all the locations with a cinema?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT DISTINCT LOCATION FROM cinema [/SQL]"
  }
]