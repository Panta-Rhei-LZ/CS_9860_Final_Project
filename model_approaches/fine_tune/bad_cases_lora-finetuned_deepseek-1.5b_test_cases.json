{
  "model_name": "lora-finetuned_deepseek-1.5b",
  "final_accuracy": 0.358974358974359,
  "per_dataset_accuracy": {
    "department_management": 0.5,
    "farm": 0.6,
    "aircraft": 0.16666666666666666,
    "architecture": 0.0,
    "cinema": 0.5
  },
  "bad_cases": [
    {
      "db_id": "department_management",
      "question": "What are the names of the heads who are born outside the California state?",
      "gold_query": "SELECT name FROM head WHERE born_state != 'California'",
      "pred_query": "\nSELECT t2.name\nFROM head AS t1\nJOIN management AS t2 ON t1.department_id = t2.department_id\nWHERE t1.name = \"John Doe\" WHERE t2.born_state = \"California\"",
      "error_type": "ExecutionError",
      "gold_result": "                 name\n0         Tiger Woods\n1          K. J. Choi\n2        Jeff Maggert\n3        Stewart Cink\n4  Pádraig Harrington\n5    Franklin Langham",
      "pred_result": "None"
    },
    {
      "db_id": "department_management",
      "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
      "gold_query": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",
      "pred_query": "\nSELECT department_id,\n       name,\n       count(*)\nFROM management\nWHERE head_id NOT IN\n    (SELECT head_id\n     FROM head)\nORDER BY 1",
      "error_type": "ExecutionError",
      "gold_result": "   Department_ID      Name  count(*)\n0              2  Treasury         2",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "What are the hosts of competitions whose theme is not \"Aliens\"?",
      "gold_query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
      "pred_query": "\nSELECT Official_Name\nFROM city\nWHERE Status != \"Aliens\"",
      "error_type": "Mismatch",
      "gold_result": "                               Hosts\nMiley Cyrus Jared Leto and Karen Mok\n       Leehom Wang and Kelly Rowland\n                         Alicia Keys\n      Vanness Wu and Michelle Branch\n                 Shaggy and Coco Lee",
      "pred_result": "          Official_Name\nGrand Falls/Grand-Sault\n          Perth-Andover\n           Plaster Rock\n               Drummond\n              Aroostook"
    },
    {
      "db_id": "farm",
      "question": "How many different statuses do cities have?",
      "gold_query": "SELECT count(DISTINCT Status) FROM city",
      "pred_query": "\nSELECT count(*)\nFROM city",
      "error_type": "Mismatch",
      "gold_result": " count(DISTINCT Status)\n                      2",
      "pred_result": " count(*)\n        5"
    },
    {
      "db_id": "farm",
      "question": "What are the statuses and average populations of each city?",
      "gold_query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
      "pred_query": "\nSELECT Status,\n       Population\nFROM city\nGROUP BY Status",
      "error_type": "Mismatch",
      "gold_result": " Status  avg(Population)\n   Town          5706.00\nVillage          1009.75",
      "pred_result": " Status  Population\n   Town      5706.0\nVillage      1778.0"
    },
    {
      "db_id": "farm",
      "question": "What are the themes of farm competitions sorted by year in ascending order?",
      "gold_query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
      "pred_query": "\nSELECT T2.Theme\nFROM farm_competition AS T1\nJOIN farm_competition_intercept ON T1.Farm_ID = T2.Farm_ID\nJOIN farm_competition_intercept2 ON T2.Farm_ID = FARM_ID",
      "error_type": "ExecutionError",
      "gold_result": "                 Theme\n0               Aliens\n1             MTV Cube\n2      Valentine's Day\n3         MTV Asia Aid\n4          Codehunters\n5  Carnival M is back!",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What is all the information on the airport with the largest number of international passengers?",
      "gold_query": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1",
      "pred_query": "\nSELECT Airport_Name,\n       International_Passengers\nFROM airport\nWHERE INTIMAL_PASSERS > 100000",
      "error_type": "ExecutionError",
      "gold_result": "   Airport_ID     Airport_Name  Total_Passengers %_Change_2007  \\\n0           1  London Heathrow        67054745.0          1.5%   \n\n   International_Passengers  Domestic_Passengers  Transit_Passengers  \\\n0                61344438.0            5562516.0            147791.0   \n\n   Aircraft_Movements  Freight_Metric_Tonnes  \n0            478693.0              1397054.0  ",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What is the location and name of the winning aircraft?",
      "gold_query": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
      "pred_query": "\nSELECT airport_name,\n       aircraft_id\nFROM airport\nJOIN airport_aircraft ON airport_aircraft.aircraft_id = airport.aircraft.aircraft_id INTERSECT\nSELECT airport_name,\n       aircraft_id\nFROM airport\nWHERE airport_aircraftID = airport_aircraft.aircraft_id",
      "error_type": "ExecutionError",
      "gold_result": "                          Location               Aircraft\n0          Mina' Zayid , Abu Dhabi          Robinson R-22\n1               Swan River , Perth          Robinson R-22\n2  Flamengo Beach , Rio de Janeiro   Bell 206B3 JetRanger\n3                Windsor , Ontario              Mil Mi-26\n4                    New York City         CH-47D Chinook\n5             EuroSpeedway Lausitz              Mil Mi-26\n6          River Danube , Budapest  CH-53E Super Stallion",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "List the name of the aircraft that has been named winning aircraft the most number of times.",
      "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
      "pred_query": "\nSELECT T2.Aircraft\nFROM aircraft AS T1\nJOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft PRIMARY KEY (T2.Aircraft)",
      "error_type": "ExecutionError",
      "gold_result": "    Aircraft\n0  Mil Mi-26",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "find the name of pilots who did not win the matches held in the country of Australia.",
      "gold_query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
      "pred_query": "\nSELECT T2.Name\nFROM aircraft AS T1\nJOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID\nWHERE T1.Pilot_ID = '3' WHERE T2.Aircraft_ID NOT IN\n    (SELECT T3.Aircraft_ID\n     FROM match AS T4\n     JOIN aircraft AS T5\n     JOIN airport_aircraft AS T6 ON T5.Aircraft_ID = T6.Aircraft_ID\n     WHERE T5.Pilot_ID = '3')",
      "error_type": "ExecutionError",
      "gold_result": "                         Name\n0       Prof. Zackery Collins\n1        Katheryn Gorczany IV\n2   Mr. Cristian Halvorson II\n3            Ellen Ledner III\n4             Elisha Hickle V\n5          Dr. Jade Bradtke V\n6             Winnifred Boyle\n7              Della Lindgren\n8              Maxwell Graham\n9               Blaise Muller\n10             Baylee Steuber",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the names of all aicrafts that have never won any match?",
      "gold_query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
      "pred_query": "\nSELECT T2.Aircraft\nFROM aircraft AS T1\nJOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft\nWHERE T1.Aircraft = 'None'",
      "error_type": "ExecutionError",
      "gold_result": "Empty DataFrame\nColumns: [Aircraft]\nIndex: []",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What is the name and age of the pilot younger than 30 who has won the most number of times?",
      "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
      "pred_query": "\nSELECT Name,\n       Age\nFROM pilot WHERE年龄 < 30\nORDER BY 年龄 DESC\nLIMIT 1",
      "error_type": "ExecutionError",
      "gold_result": "            Name  Age\n0  Ayana Spencer   25",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
      "gold_query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
      "pred_query": "\nSELECT Domestic_Passengers\nFROM airport\nWHERE Airport_Name LIKE '%London%'",
      "error_type": "Mismatch",
      "gold_result": " sum(Domestic_Passengers)\n               12957585.0",
      "pred_result": " Domestic_Passengers\n           5562516.0\n           3730963.0\n           2343428.0\n           1320678.0"
    },
    {
      "db_id": "aircraft",
      "question": "What are the descriptions for the aircrafts?",
      "gold_query": "SELECT Description FROM aircraft",
      "pred_query": "\nSELECT T2.Aircraft\nFROM aircraft AS T1\nJOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft",
      "error_type": "ExecutionError",
      "gold_result": "                     Description\n0       Light utility helicopter\n1  Turboshaft utility helicopter\n2        Tandem rotor helicopter\n3          Heavy-lift helicopter\n4          Heavy-lift helicopter",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?",
      "gold_query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
      "pred_query": "\nSELECT INT(International_Passengers),\n       INT(Domestic_Passengers)\nFROM airport\nWHERE Airport_Name LIKE '%Int% \" INT(International_Passengers) , INT(Domestic_Passengers) FROM airport WHERE Airport_Name  LIKE '%Di% \"",
      "error_type": "ExecutionError",
      "gold_result": "   International_Passengers  Domestic_Passengers\n0                61344438.0            5562516.0",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "Please list the location and the winning aircraft name.",
      "gold_query": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
      "pred_query": "\nSELECT airport.name,\n       aircraft.Aircraft\nFROM airport\nLEFT JOIN airport_aircraft ON airport.Aircraft_ID = airport_aircraft.Aircraft_ID\nLEFT JOIN airport_aircraft ON airport_aircraft.Aircraft_ID = airport_aircraft.Aircraft_ID INTERSECT\nSELECT w.name,\n       w.Aircraft\nFROM aircraft\nLEFT JOIN airport_aircraft ON airport_aircraft.Aircraft_ID = airport_aircraft.Aircraft_ID",
      "error_type": "ExecutionError",
      "gold_result": "                          Location               Aircraft\n0          Mina' Zayid , Abu Dhabi          Robinson R-22\n1               Swan River , Perth          Robinson R-22\n2  Flamengo Beach , Rio de Janeiro   Bell 206B3 JetRanger\n3                Windsor , Ontario              Mil Mi-26\n4                    New York City         CH-47D Chinook\n5             EuroSpeedway Lausitz              Mil Mi-26\n6          River Danube , Budapest  CH-53E Super Stallion",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "How many architects are female?",
      "gold_query": "SELECT count(*) FROM architect WHERE gender  =  'female'",
      "pred_query": "\nSELECT count(*)\nFROM architect\nWHERE nationality LIKE '%female%'",
      "error_type": "Mismatch",
      "gold_result": " count(*)\n        1",
      "pred_result": " count(*)\n        0"
    },
    {
      "db_id": "architecture",
      "question": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
      "gold_query": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name",
      "pred_query": "\nSELECT name,\n       nationality,\n       id\nFROM architect\nWHERE gender = 'male'",
      "error_type": "Mismatch",
      "gold_result": "              name      nationality id\n       Frank Gehry         Canadian  2\nFrank Lloyd Wright         American  1\n      Le Corbusier    Swiss, French  5\n Mies Van Der Rohe German, American  4",
      "pred_result": "              name      nationality id\nFrank Lloyd Wright         American  1\n       Frank Gehry         Canadian  2\n Mies Van Der Rohe German, American  4\n      Le Corbusier    Swiss, French  5"
    },
    {
      "db_id": "architecture",
      "question": "What are the distinct names and nationalities of the architects who have ever built a mill?",
      "gold_query": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id",
      "pred_query": "\nSELECT DISTINCT NAMEDISTANCE\nFROM architect\nWHERE NAMEDISTANCE = \"Tompkins\" ;",
      "error_type": "ExecutionError",
      "gold_result": "                 name       nationality\n0  Frank Lloyd Wright          American\n1         Frank Gehry          Canadian\n2          Zaha Hadid    Iraqi, British\n3   Mies Van Der Rohe  German, American",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "How many architects haven't built a mill before year 1850?",
      "gold_query": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );",
      "pred_query": "\nSELECT count(*)\nFROM architect\nWHERE nationality = \"French\"\nORDER BY count(*) ASC",
      "error_type": "Mismatch",
      "gold_result": " count(*)\n        2",
      "pred_result": " count(*)\n        0"
    },
    {
      "db_id": "architecture",
      "question": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
      "gold_query": "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'",
      "pred_query": "\nSELECT T2.location\nFROM bridge AS T1\nJOIN mill AS T2 ON T1.id = T2.architect_id\nWHERE T1.name = 'Kolob Arch'\n  OR T1.name = 'Rainbow Arch'",
      "error_type": "Mismatch",
      "gold_result": "                                         location\n                  Zion National Park , Utah , USA\nGlen Canyon National Recreation Area , Utah , USA",
      "pred_result": "location\n Momalle"
    },
    {
      "db_id": "cinema",
      "question": "Show cinema name, film title, date, and price for each record in schedule.",
      "gold_query": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id",
      "pred_query": "\nSELECT T1.title,\n       T1.title,\n       T1.title,\n       T1.title\nFROM film AS T1\nJOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id\nJOIN schedule AS T3 ON T1.cinema_id = T3.cinema_id\nWHERE T3.price = 100",
      "error_type": "ExecutionError",
      "gold_result": "           Name                             Title     Date  Price\n0       Codling   The Case of the Mystery Weekend   21 May  12.99\n1       Codling       The Case of the Smart Dummy   21 May  12.99\n2       Codling          The Case: Off the Record   21 Jun   8.99\n3   Carrowleagh   The Case of the Mystery Weekend  11 July   9.99\n4     Gortahile      The Case of the Piggy Banker    2 Aug  12.99\n5  Mount Callan  The Case of the Bermuda Triangle   20 May   9.99\n6         Oriel   The Case of the Mystery Weekend   19 May  15.99",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Show all the cinema names and opening years in descending order of opening year.",
      "gold_query": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC",
      "pred_query": "\nSELECT name,\nORDER BY openning_year\nFROM cinema",
      "error_type": "ExecutionError",
      "gold_result": "           Name  Openning_year\n0  Dublin Array           2015\n1         Oriel           2013\n2   Carrowleagh           2012\n3  Grouse Lodge           2011\n4    Moneypoint           2011\n5  Mount Callan           2011\n6       Codling           2010\n7      Glenough           2010\n8     Gortahile           2010\n9      Glenmore           2009",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "What are the name and location of the cinema with the largest capacity?",
      "gold_query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
      "pred_query": "\nSELECT name,\n       location\nFROM cinema\nWHERE capacity MAX",
      "error_type": "ExecutionError",
      "gold_result": "      Name        Location\n0  Codling  County Wicklow",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "What are the title and director of the films without any schedule?",
      "gold_query": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
      "pred_query": "\nSELECT T2.title,\n       T2.director\nFROM schedule AS T1\nJOIN film AS T2 ON T1.film_id = T2.film_id\nWHERE T1.date = 'none'",
      "error_type": "ExecutionError",
      "gold_result": "Empty DataFrame\nColumns: [Title, Directed_by]\nIndex: []",
      "pred_result": "None"
    }
  ]
}