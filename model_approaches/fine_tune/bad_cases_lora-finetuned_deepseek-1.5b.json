{
  "model_name": "lora-finetuned_deepseek-1.5b",
  "final_accuracy": 0.2684563758389262,
  "per_dataset_accuracy": {
    "department_management": 0.25,
    "farm": 0.425,
    "aircraft": 0.08695652173913043,
    "architecture": 0.35294117647058826,
    "cinema": 0.3
  },
  "bad_cases": [
    {
      "db_id": "department_management",
      "question": "List the name, born state and age of the heads of departments ordered by age.",
      "gold_query": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
      "pred_query": "\nSELECT name,\n       born state,\n       age\nFROM head\nORDER BY age",
      "error_type": "ExecutionError",
      "gold_result": "                 name   born_state   age\n0  Pádraig Harrington  Connecticut  43.0\n1        Stewart Cink      Florida  50.0\n2         Dudley Hart   California  52.0\n3        Jeff Maggert     Delaware  53.0\n4          Nick Faldo   California  56.0\n5         Tiger Woods      Alabama  67.0\n6    Franklin Langham  Connecticut  67.0\n7       Sergio García   California  68.0\n8          K. J. Choi      Alabama  69.0\n9       Billy Mayfair   California  69.0",
      "pred_result": "None"
    },
    {
      "db_id": "department_management",
      "question": "List the creation year, name and budget of each department.",
      "gold_query": "SELECT creation ,  name ,  budget_in_billions FROM department",
      "pred_query": "\nSELECT creation,\n       name,\n       budget_in_bill\nFROM department",
      "error_type": "ExecutionError",
      "gold_result": "   Creation                           Name  Budget_in_Billions\n0      1789                          State                9.96\n1      1789                       Treasury               11.10\n2      1947                        Defense              439.30\n3      1870                        Justice               23.40\n4      1849                       Interior               10.70\n5      1889                    Agriculture               77.60\n6      1903                       Commerce                6.20\n7      1913                          Labor               59.70\n8      1953      Health and Human Services              543.20\n9      1965  Housing and Urban Development               46.20\n10     1966                 Transportation               58.00\n11     1977                         Energy               21.50\n12     1979                      Education               62.80\n13     1989               Veterans Affairs               73.20\n14     2002              Homeland Security               44.60",
      "pred_result": "None"
    },
    {
      "db_id": "department_management",
      "question": "What are the maximum and minimum budget of the departments?",
      "gold_query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
      "pred_query": "\nSELECT max(Budget_in_Billions) AS Max_Budget,\n       min(Budget_in_Billions) AS Min_Budget\nFROM department",
      "error_type": "Mismatch",
      "gold_result": " max(budget_in_billions)  min(budget_in_billions)\n                   543.2                      6.2",
      "pred_result": " Max_Budget  Min_Budget\n      543.2         6.2"
    },
    {
      "db_id": "department_management",
      "question": "What are the names of the heads who are born outside the California state?",
      "gold_query": "SELECT name FROM head WHERE born_state != 'California'",
      "pred_query": "\nSELECT T2.name\nFROM head AS T1\nJOIN head AS T2 ON T1.head_ID = T2.head_ID\nWHERE T2.born_state = 'California'",
      "error_type": "Mismatch",
      "gold_result": "              name\n       Tiger Woods\n        K. J. Choi\n      Jeff Maggert\n      Stewart Cink\nPádraig Harrington\n  Franklin Langham",
      "pred_result": "         name\nSergio García\n  Dudley Hart\nBilly Mayfair\n   Nick Faldo"
    },
    {
      "db_id": "department_management",
      "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
      "gold_query": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
      "pred_query": "\nSELECT DISTINCT creation\nFROM department\nWHERE management(TEMPERARY ACTING) = 'Alabama'```",
      "error_type": "ExecutionError",
      "gold_result": "  Creation\n0     1903",
      "pred_result": "None"
    },
    {
      "db_id": "department_management",
      "question": "What are the names of the states where at least 3 heads were born?",
      "gold_query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3",
      "pred_query": "\nSELECT DISTINCT b.name\nFROM head AS b\nJOIN department AS d ON b.department_id = d.department_id\nWHERE count(d) >= 3",
      "error_type": "ExecutionError",
      "gold_result": "   born_state\n0  California",
      "pred_result": "None"
    },
    {
      "db_id": "department_management",
      "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
      "gold_query": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'",
      "pred_query": "\nSELECT name,\n       temporary_acting\nFROM department\nWHERE department.head_id = 3",
      "error_type": "ExecutionError",
      "gold_result": "                Name  Num_Employees\n0           Treasury       115897.0\n1  Homeland Security       208000.0\n2           Treasury       115897.0",
      "pred_result": "None"
    },
    {
      "db_id": "department_management",
      "question": "How many acting statuses are there?",
      "gold_query": "SELECT count(DISTINCT temporary_acting) FROM management",
      "pred_query": "\nSELECT count(*)\nFROM department\nWHERE department_id NOT IN\n    (SELECT head_id\n     FROM head);",
      "error_type": "Mismatch",
      "gold_result": " count(DISTINCT temporary_acting)\n                                2",
      "pred_result": " count(*)\n        5"
    },
    {
      "db_id": "department_management",
      "question": "How many departments are led by heads who are not mentioned?",
      "gold_query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
      "pred_query": "\nSELECT count(*)\nFROM department\nWHERE department_id NOT IN\n    (SELECT head_id\n     FROM management)",
      "error_type": "Mismatch",
      "gold_result": " count(*)\n       11",
      "pred_result": " count(*)\n       10"
    },
    {
      "db_id": "department_management",
      "question": "What are the distinct ages of the heads who are acting?",
      "gold_query": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
      "pred_query": "\nSELECT DISTINCT t1.age\nFROM head AS t1\nJOIN management AS t2 ON t1.department_ID = t2.department_ID\nWHERE t2.head_ID = 2",
      "error_type": "ExecutionError",
      "gold_result": "    age\n0  53.0\n1  52.0\n2  69.0",
      "pred_result": "None"
    },
    {
      "db_id": "department_management",
      "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
      "gold_query": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'",
      "pred_query": "\nSELECT b.born_state\nFROM head AS b\nJOIN department AS d ON b.department_id = d.department_id\nJOIN management AS m ON d.department_id = m.department_id\nWHERE m.retailing = 2\n  AND m.working = 3\nLIMIT 10",
      "error_type": "ExecutionError",
      "gold_result": "   born_state\n0  California",
      "pred_result": "None"
    },
    {
      "db_id": "department_management",
      "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
      "gold_query": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",
      "pred_query": "\nSELECT D.Department_ID,\n       D.Name,\n       COUNT(*)\nFROM department AS D\nJOIN head AS H ON D.Department_ID = H.head_ID\nWHERE Htemporary_acting = 'Yes'\nGROUP BY D.Department_ID\nORDER BY COUNT(*) DESC\nLIMIT 1",
      "error_type": "ExecutionError",
      "gold_result": "   Department_ID      Name  count(*)\n0              2  Treasury         2",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "List the total number of horses on farms in ascending order.",
      "gold_query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
      "pred_query": "\nSELECT count(*)\nFROM farm\nORDER BY count(*) ASC",
      "error_type": "Mismatch",
      "gold_result": " Total_Horses\n       2546.9\n       2604.8\n       3658.9\n       4781.3\n       5056.5\n       5308.2\n       5486.9\n       5607.5",
      "pred_result": " count(*)\n        8"
    },
    {
      "db_id": "farm",
      "question": "What are the hosts of competitions whose theme is not \"Aliens\"?",
      "gold_query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
      "pred_query": "\nSELECT *\nFROM city\nWHERE Status != 'Aliens'",
      "error_type": "Mismatch",
      "gold_result": "                               Hosts\nMiley Cyrus Jared Leto and Karen Mok\n       Leehom Wang and Kelly Rowland\n                         Alicia Keys\n      Vanness Wu and Michelle Branch\n                 Shaggy and Coco Lee",
      "pred_result": " City_ID           Official_Name  Status  Area_km_2  Population Census_Ranking\n       1 Grand Falls/Grand-Sault    Town      18.06      5706.0    636 of 5008\n       2           Perth-Andover Village       8.89      1778.0  1442 of 5,008\n       3            Plaster Rock Village       3.09      1135.0  1936 of 5,008\n       4                Drummond Village       8.91       775.0   2418 of 5008\n       5               Aroostook Village       2.24       351.0   3460 of 5008"
    },
    {
      "db_id": "farm",
      "question": "Return the hosts of competitions for which the theme is not Aliens?",
      "gold_query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
      "pred_query": "\nSELECT Official_Name\nFROM city\nWHERE Status != 'Aliens'",
      "error_type": "Mismatch",
      "gold_result": "                               Hosts\nMiley Cyrus Jared Leto and Karen Mok\n       Leehom Wang and Kelly Rowland\n                         Alicia Keys\n      Vanness Wu and Michelle Branch\n                 Shaggy and Coco Lee",
      "pred_result": "          Official_Name\nGrand Falls/Grand-Sault\n          Perth-Andover\n           Plaster Rock\n               Drummond\n              Aroostook"
    },
    {
      "db_id": "farm",
      "question": "What are the themes of farm competitions sorted by year in ascending order?",
      "gold_query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
      "pred_query": "\nSELECT T2.Theme\nFROM farm_competition T1\nJOIN farm_competition T2 ON T1.Farm_ID = T2.Farm_ID\nORDER BY T1.Year ASC",
      "error_type": "ExecutionError",
      "gold_result": "                 Theme\n0               Aliens\n1             MTV Cube\n2      Valentine's Day\n3         MTV Asia Aid\n4          Codehunters\n5  Carnival M is back!",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "Return the themes of farm competitions, sorted by year ascending.",
      "gold_query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
      "pred_query": "\nSELECT T2.Theme\nFROM farm_competition T1\nJOIN farm_competition T2 ON T1.Farm_ID = T2.Farm_ID\nORDER BY T1.Year ASC",
      "error_type": "ExecutionError",
      "gold_result": "                 Theme\n0               Aliens\n1             MTV Cube\n2      Valentine's Day\n3         MTV Asia Aid\n4          Codehunters\n5  Carnival M is back!",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
      "gold_query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
      "pred_query": "\nSELECT avg(Total_Horses)\nFROM farm\nWHERE Total_Horses > 5000",
      "error_type": "Mismatch",
      "gold_result": " avg(Working_Horses)\n             3977.75",
      "pred_result": " avg(Total_Horses)\n          5364.775"
    },
    {
      "db_id": "farm",
      "question": "Give the average number of working horses on farms with more than 5000 total horses.",
      "gold_query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
      "pred_query": "\nSELECT avg(Total_Horses)\nFROM farm\nWHERE Total_Horses > 5000",
      "error_type": "Mismatch",
      "gold_result": " avg(Working_Horses)\n             3977.75",
      "pred_result": " avg(Total_Horses)\n          5364.775"
    },
    {
      "db_id": "farm",
      "question": "Return the maximum and minimum number of cows across all farms.",
      "gold_query": "SELECT max(Cows) ,  min(Cows) FROM farm",
      "pred_query": "\nSELECT MAX(Cows)\nFROM farm\nWHERE Farmer_ID != NULL\nORDER BY MAX(Cows) DESC\nLIMIT 1",
      "error_type": "ExecutionError",
      "gold_result": "   max(Cows)  min(Cows)\n0     3987.0     2407.2",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "How many different statuses do cities have?",
      "gold_query": "SELECT count(DISTINCT Status) FROM city",
      "pred_query": "\nSELECT count(*)\nFROM city\nWHERE city_id NOT IN\n    (SELECT host_city_id\n     FROM farm_competition);",
      "error_type": "Mismatch",
      "gold_result": " count(DISTINCT Status)\n                      2",
      "pred_result": " count(*)\n        0"
    },
    {
      "db_id": "farm",
      "question": "Show the years and the official names of the host cities of competitions.",
      "gold_query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
      "pred_query": "\nSELECT T1.Year,\n       T1.Official_Name\nFROM city AS T1\nJOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\nORDER BY T1.Year ASC",
      "error_type": "ExecutionError",
      "gold_result": "   Year            Official_Name\n0  2013  Grand Falls/Grand-Sault\n1  2006            Perth-Andover\n2  2005             Plaster Rock\n3  2004                 Drummond\n4  2003                Aroostook\n5  2002                Aroostook",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "Give the years and official names of the cities of each competition.",
      "gold_query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
      "pred_query": "\nSELECT T1.year,\n       T1official_name\nFROM city AS T1\nJOIN farm_competition AS T2 ON T1.city_ID = T2.host_city_ID\nORDER BY T2.year DESC ```",
      "error_type": "ExecutionError",
      "gold_result": "   Year            Official_Name\n0  2013  Grand Falls/Grand-Sault\n1  2006            Perth-Andover\n2  2005             Plaster Rock\n3  2004                 Drummond\n4  2003                Aroostook\n5  2002                Aroostook",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "Show the official names of the cities that have hosted more than one competition.",
      "gold_query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
      "pred_query": "\nSELECT Official_Name\nFROM city\nWHERE City_ID NOT EXISTS\n  SELECT City_ID\n  FROM city\nGROUP BY City_ID",
      "error_type": "ExecutionError",
      "gold_result": "  Official_Name\n0     Aroostook",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "What are the official names of cities that have hosted more than one competition?",
      "gold_query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
      "pred_query": "\nSELECT Official_Name\nFROM city\nWHERE City_ID NOT IN\n    (SELECT Host_city_ID\n     FROM farm_competition)",
      "error_type": "Mismatch",
      "gold_result": "Official_Name\n    Aroostook",
      "pred_result": "Empty DataFrame\nColumns: [Official_Name]\nIndex: []"
    },
    {
      "db_id": "farm",
      "question": "What is the status of the city that has hosted the most competitions?",
      "gold_query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
      "pred_query": "\nSELECT T1.Status\nFROM city AS T1\nJOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\nGROUP BY T1.City_ID\nORDER BY COUNT(T2) DESC\nLIMIT 1",
      "error_type": "ExecutionError",
      "gold_result": "    Status\n0  Village",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "Please show the themes of competitions with host cities having populations larger than 1000.",
      "gold_query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
      "pred_query": "\nSELECT T2.Theme\nFROM city AS T1\nJOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\nWHERE T1 POPULATION > 1000",
      "error_type": "ExecutionError",
      "gold_result": "                 Theme\n0  Carnival M is back!\n1          Codehunters\n2         MTV Asia Aid",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?",
      "gold_query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
      "pred_query": "\nSELECT T2.Theme\nFROM city AS T1\nJOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\nWHERE T1 POPULATION > 1000",
      "error_type": "ExecutionError",
      "gold_result": "                 Theme\n0  Carnival M is back!\n1          Codehunters\n2         MTV Asia Aid",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "Please show the different statuses of cities and the average population of cities with each status.",
      "gold_query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
      "pred_query": "\nSELECT Status,\n       AVG(Population)\nFROM city\nGROUP BY Status",
      "error_type": "Mismatch",
      "gold_result": " Status  avg(Population)\n   Town          5706.00\nVillage          1009.75",
      "pred_result": " Status  AVG(Population)\n   Town          5706.00\nVillage          1009.75"
    },
    {
      "db_id": "farm",
      "question": "What are the statuses and average populations of each city?",
      "gold_query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
      "pred_query": "\nSELECT Status,\n       AVG(Population)\nFROM city",
      "error_type": "Mismatch",
      "gold_result": " Status  avg(Population)\n   Town          5706.00\nVillage          1009.75",
      "pred_result": "Status  AVG(Population)\n  Town           1949.0"
    },
    {
      "db_id": "farm",
      "question": "List the official names of cities that have not held any competition.",
      "gold_query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
      "pred_query": "\nSELECT Official_Name\nFROM city\nWHERE NOT EXISTS\n    (SELECT Population\n     FROM competition\n     WHERE Competition_ID NOT IN\n         (SELECT Competition_ID\n          FROM competition_competition\n          WHERE State = 'None'))",
      "error_type": "ExecutionError",
      "gold_result": "Empty DataFrame\nColumns: [Official_Name]\nIndex: []",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "What are the official names of cities that have not hosted a farm competition?",
      "gold_query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
      "pred_query": "\nSELECT Official_Name\nFROM city\nWHERE NOT EXISTS\n    (SELECT DISTINCT City_ID\n     FROM farm_competition\n     WHERE Competition_ID = ?)",
      "error_type": "ExecutionError",
      "gold_result": "Empty DataFrame\nColumns: [Official_Name]\nIndex: []",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
      "gold_query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
      "pred_query": "\nSELECT Status\nFROM city\nWHERE Population > 1500\n  AND Population < 500",
      "error_type": "Mismatch",
      "gold_result": " Status\nVillage",
      "pred_result": "Empty DataFrame\nColumns: [Status]\nIndex: []"
    },
    {
      "db_id": "farm",
      "question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?",
      "gold_query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
      "pred_query": "\nSELECT T2.Status\nFROM city AS T1\nJOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\nWHERE T1 POPULATION > 1500\n  AND T2.Rank = 3",
      "error_type": "ExecutionError",
      "gold_result": "    Status\n0  Village",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "Show the census ranking of cities whose status are not \"Village\".",
      "gold_query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
      "pred_query": "\nSELECT T1.Census_Ranking\nFROM city AS T1\nJOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\nWHERE T2.Theme NOT LIKE '%Village%'",
      "error_type": "Mismatch",
      "gold_result": "Census_Ranking\n   636 of 5008",
      "pred_result": "Census_Ranking\n   636 of 5008\n 1442 of 5,008\n 1936 of 5,008\n  2418 of 5008\n  3460 of 5008\n  3460 of 5008"
    },
    {
      "db_id": "aircraft",
      "question": "What is the number of aircraft?",
      "gold_query": "SELECT count(*) FROM aircraft",
      "pred_query": "\nSELECT count(Aircraft_ID)\nFROM aircraft",
      "error_type": "Mismatch",
      "gold_result": " count(*)\n        5",
      "pred_result": " count(Aircraft_ID)\n                  5"
    },
    {
      "db_id": "aircraft",
      "question": "List the description of all aircrafts.",
      "gold_query": "SELECT Description FROM aircraft",
      "pred_query": "\nSELECT Aircraft\nFROM aircraft",
      "error_type": "Mismatch",
      "gold_result": "                  Description\n     Light utility helicopter\nTurboshaft utility helicopter\n      Tandem rotor helicopter\n        Heavy-lift helicopter\n        Heavy-lift helicopter",
      "pred_result": "             Aircraft\n        Robinson R-22\n Bell 206B3 JetRanger\n       CH-47D Chinook\n            Mil Mi-26\nCH-53E Super Stallion"
    },
    {
      "db_id": "aircraft",
      "question": "What are the descriptions for the aircrafts?",
      "gold_query": "SELECT Description FROM aircraft",
      "pred_query": "\nSELECT Aircraft\nFROM aircraft",
      "error_type": "Mismatch",
      "gold_result": "                  Description\n     Light utility helicopter\nTurboshaft utility helicopter\n      Tandem rotor helicopter\n        Heavy-lift helicopter\n        Heavy-lift helicopter",
      "pred_result": "             Aircraft\n        Robinson R-22\n Bell 206B3 JetRanger\n       CH-47D Chinook\n            Mil Mi-26\nCH-53E Super Stallion"
    },
    {
      "db_id": "aircraft",
      "question": "What is the average number of international passengers of all airports?",
      "gold_query": "SELECT avg(International_Passengers) FROM airport",
      "pred_query": "\nSELECT avg(international_Passengers)\nFROM airport\nWHERE airport NOT EXISTS\n  SELECT count(*)\n  FROM airport WHERE airport NOT EXISTS",
      "error_type": "ExecutionError",
      "gold_result": "   avg(International_Passengers)\n0                     16443156.6",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What is the average number of international passengers for an airport?",
      "gold_query": "SELECT avg(International_Passengers) FROM airport",
      "pred_query": "\nSELECT avg(international_Passengers)\nFROM airport\nWHERE airport ( intentionally returning 'I do not know' if I cannot answer the question with the available database schema 'I do not know' if I cannot answer the question with the available database schema\nSELECT avg(international_Passengers)\nFROM airport",
      "error_type": "ExecutionError",
      "gold_result": "   avg(International_Passengers)\n0                     16443156.6",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?",
      "gold_query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
      "pred_query": "\nSELECT count(IIF(CASE\n                     WHEN Airport_Name = 'London \"Heathrow\"' THEN 1\n                     ELSE 0\n                 END), 1, 2)\nFROM airport",
      "error_type": "ExecutionError",
      "gold_result": "   International_Passengers  Domestic_Passengers\n0                61344438.0            5562516.0",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "How many international and domestic passengers are there in the airport London Heathrow?",
      "gold_query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
      "pred_query": "\nSELECT count(*)\nFROM airport\nWHERE Airport_Name = 'London Heathrow'",
      "error_type": "Mismatch",
      "gold_result": " International_Passengers  Domestic_Passengers\n               61344438.0            5562516.0",
      "pred_result": " count(*)\n        1"
    },
    {
      "db_id": "aircraft",
      "question": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
      "gold_query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
      "pred_query": "\nSELECT D.Domestic_Passengers\nFROM airport\nWHERE Airport_Name LIKE '%London%'\nORDER BY D.Domestic_Passengers ASC\nLIMIT 1",
      "error_type": "ExecutionError",
      "gold_result": "   sum(Domestic_Passengers)\n0                12957585.0",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the total number of domestic passengers at all London airports?",
      "gold_query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
      "pred_query": "\nSELECT DISTINCT DDomestic_Passengers\nFROM airport\nWHERE Airport_Name LIKE '%London%'",
      "error_type": "ExecutionError",
      "gold_result": "   sum(Domestic_Passengers)\n0                12957585.0",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the maximum and minimum number of transit passengers of all aiports.",
      "gold_query": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
      "pred_query": "\nSELECT MIN(Transit_Passengers) AS MINTransitPassengers,\n       MAX(Transit_Passengers) AS MAXTransitPassengers\nFROM airport\nWHERE Airport_Name LIKE '%_2007%\";",
      "error_type": "ExecutionError",
      "gold_result": "   max(Transit_Passengers)  min(Transit_Passengers)\n0                 156246.0                   4395.0",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What is the maximum and mininum number of transit passengers for all airports?",
      "gold_query": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
      "pred_query": "\nSELECT MIN(Transit_Passengers) AS MINTransitPassengers,\n       MAX(Transit_Passengers) AS MAXTransitPassengers\nFROM airport\nWHERE Airport_ID NOT IN\n    (SELECT Aircraft_ID\n     FROM aircraft);",
      "error_type": "Mismatch",
      "gold_result": " max(Transit_Passengers)  min(Transit_Passengers)\n                156246.0                   4395.0",
      "pred_result": " MINTransitPassengers  MAXTransitPassengers\n               4395.0               50889.0"
    },
    {
      "db_id": "aircraft",
      "question": "What are the name of pilots aged 25 or older?",
      "gold_query": "SELECT Name FROM pilot WHERE Age  >=  25",
      "pred_query": "\nSELECT DISTINCT T1.Name\nFROM aircraft AS T1\nJOIN pilot AS T2 ON T1.Aircraft_ID = T2.Pilot_Id\nWHERE T2.Age >= 25",
      "error_type": "ExecutionError",
      "gold_result": "                 Name\n0       Ayana Spencer\n1    Ellen Ledner III\n2     Elisha Hickle V\n3  Dr. Jade Bradtke V\n4     Winnifred Boyle\n5      Della Lindgren\n6      Maxwell Graham\n7       Blaise Muller\n8      Baylee Steuber",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "what is the name of every pilot who is at least 25 years old?",
      "gold_query": "SELECT Name FROM pilot WHERE Age  >=  25",
      "pred_query": "\nSELECT DISTINCT T1.Name\nFROM pilot AS T1\nJOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID\nWHERE T2.Aircraft_ID = NULL WHERE T1.Age >= 25",
      "error_type": "ExecutionError",
      "gold_result": "                 Name\n0       Ayana Spencer\n1    Ellen Ledner III\n2     Elisha Hickle V\n3  Dr. Jade Bradtke V\n4     Winnifred Boyle\n5      Della Lindgren\n6      Maxwell Graham\n7       Blaise Muller\n8      Baylee Steuber",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the names of the pilots in alphabetical order?",
      "gold_query": "SELECT Name FROM pilot ORDER BY Name ASC",
      "pred_query": "\nSELECT names\nFROM pilot\nORDER BY name ASC",
      "error_type": "ExecutionError",
      "gold_result": "                         Name\n0               Ayana Spencer\n1              Baylee Steuber\n2               Blaise Muller\n3              Della Lindgren\n4          Dr. Jade Bradtke V\n5             Elisha Hickle V\n6            Ellen Ledner III\n7        Katheryn Gorczany IV\n8              Maxwell Graham\n9   Mr. Cristian Halvorson II\n10      Prof. Zackery Collins\n11            Winnifred Boyle",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "List names of all pilot aged 30 or younger in descending alphabetical order.",
      "gold_query": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC",
      "pred_query": "\nSELECT L.Name\nFROM pilot AS T\nWHERE T.Aged <= 30\nORDER BY L.Name DESC",
      "error_type": "ExecutionError",
      "gold_result": "                        Name\n0            Winnifred Boyle\n1      Prof. Zackery Collins\n2  Mr. Cristian Halvorson II\n3             Maxwell Graham\n4       Katheryn Gorczany IV\n5         Dr. Jade Bradtke V\n6             Della Lindgren\n7             Baylee Steuber\n8              Ayana Spencer",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the names of all pilots 30 years old or young in descending alphabetical order?",
      "gold_query": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC",
      "pred_query": "\nSELECT DISTINCT T1.Name\nFROM pilot AS T1\nJOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID\nWHERE T2.Aircraft_ID = 200 IN\n    (SELECT MAX(Aircraft.Max_Gross_Weight)\n     FROM aircraft)\nLIMIT 500",
      "error_type": "ExecutionError",
      "gold_result": "                        Name\n0            Winnifred Boyle\n1      Prof. Zackery Collins\n2  Mr. Cristian Halvorson II\n3             Maxwell Graham\n4       Katheryn Gorczany IV\n5         Dr. Jade Bradtke V\n6             Della Lindgren\n7             Baylee Steuber\n8              Ayana Spencer",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".",
      "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
      "pred_query": "\nSELECT Aircraft\nFROM aircraft\nWHERE Pilot_ID = 11\n  AND Aircraft_ID\n  FROM airport WHERE Airport_Name = 'London Gatwick'",
      "error_type": "ExecutionError",
      "gold_result": "        Aircraft\n0  Robinson R-22",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the names of all the aircrafts associated with London Gatwick airport?",
      "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
      "pred_query": "\nSELECT Aircraft\nFROM aircraft\nWHERE Pilot_ID = '2000'",
      "error_type": "ExecutionError",
      "gold_result": "        Aircraft\n0  Robinson R-22",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.",
      "gold_query": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
      "pred_query": "\nSELECT A.Aircraft\nFROM aircraft AS A\nWHERE A.Total_Passengers > 10000000",
      "error_type": "ExecutionError",
      "gold_result": "               Aircraft                    Description\n0  Bell 206B3 JetRanger  Turboshaft utility helicopter\n1         Robinson R-22       Light utility helicopter",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?",
      "gold_query": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
      "pred_query": "\nSELECT A.Aircraft\nFROM aircraft AS A\nWHERE A.Total_Passengers > 10000000",
      "error_type": "ExecutionError",
      "gold_result": "               Aircraft                    Description\n0  Bell 206B3 JetRanger  Turboshaft utility helicopter\n1         Robinson R-22       Light utility helicopter",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?",
      "gold_query": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"",
      "pred_query": "\nSELECT avg(Total_Passengers)\nFROM airport\nWHERE airport关联 pilot WHERE pilot.Aircraft_ID = 22",
      "error_type": "ExecutionError",
      "gold_result": "   avg(T3.Total_Passengers)\n0                34205887.0",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?",
      "gold_query": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"",
      "pred_query": "\nSELECT avg(Total_Passengers)\nFROM airport\nWHERE airport_winning_pilot = 'Robinson R-22'",
      "error_type": "ExecutionError",
      "gold_result": "   avg(T3.Total_Passengers)\n0                34205887.0",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "Please list the location and the winning aircraft name.",
      "gold_query": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
      "pred_query": "\nSELECT DISTINCT Location,\n                Winning_Aircraft\nFROM match",
      "error_type": "Mismatch",
      "gold_result": "                       Location              Aircraft\n        Mina' Zayid , Abu Dhabi         Robinson R-22\n             Swan River , Perth         Robinson R-22\nFlamengo Beach , Rio de Janeiro  Bell 206B3 JetRanger\n              Windsor , Ontario             Mil Mi-26\n                  New York City        CH-47D Chinook\n           EuroSpeedway Lausitz             Mil Mi-26\n        River Danube , Budapest CH-53E Super Stallion",
      "pred_result": "                       Location Winning_Aircraft\n        Mina' Zayid , Abu Dhabi                1\n             Swan River , Perth                1\nFlamengo Beach , Rio de Janeiro                2\n              Windsor , Ontario                4\n                  New York City                3\n           EuroSpeedway Lausitz                4\n        River Danube , Budapest                5"
    },
    {
      "db_id": "aircraft",
      "question": "What is the location and name of the winning aircraft?",
      "gold_query": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
      "pred_query": "\nSELECT *Aircraft\nFROM match\nWHERE Winning_Pilot = ?",
      "error_type": "ExecutionError",
      "gold_result": "                          Location               Aircraft\n0          Mina' Zayid , Abu Dhabi          Robinson R-22\n1               Swan River , Perth          Robinson R-22\n2  Flamengo Beach , Rio de Janeiro   Bell 206B3 JetRanger\n3                Windsor , Ontario              Mil Mi-26\n4                    New York City         CH-47D Chinook\n5             EuroSpeedway Lausitz              Mil Mi-26\n6          River Danube , Budapest  CH-53E Super Stallion",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "List the name of the aircraft that has been named winning aircraft the most number of times.",
      "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
      "pred_query": "\nSELECT A.WINNING_Aircraft\nFROM aircraft AS W\nWHERE W.Winning_Pilot = 'Winning Aircraft'\nGROUP BY A.WINNING_Aircraft\nORDER BY COUNT(*) ASC\nLIMIT 1",
      "error_type": "ExecutionError",
      "gold_result": "    Aircraft\n0  Mil Mi-26",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What is the name of the aircraft that has won an award the most?",
      "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
      "pred_query": "\nSELECT T2.Aircraft\nFROM aircraft AS T1\nJOIN aircraft_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft PRIMARY KEY (T2.Aircraft)",
      "error_type": "ExecutionError",
      "gold_result": "    Aircraft\n0  Mil Mi-26",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "List the names of aircrafts and the number of times it won matches.",
      "gold_query": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",
      "pred_query": "\nSELECT Aircraft\nFROM aircraft\nJOIN WINNING_Aircraft\nFROM match\nWHERE Winning_Pilot = 'Kirk'\nORDER BY Aircraft ASC",
      "error_type": "ExecutionError",
      "gold_result": "                Aircraft  COUNT(*)\n0          Robinson R-22         2\n1   Bell 206B3 JetRanger         1\n2         CH-47D Chinook         1\n3              Mil Mi-26         2\n4  CH-53E Super Stallion         1",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "For each aircraft that has won an award, what is its name and how many time has it won?",
      "gold_query": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",
      "pred_query": "\nSELECT Aircraft\nFROM aircraft\nWHERE winning_airsport IS NOT NULL",
      "error_type": "ExecutionError",
      "gold_result": "                Aircraft  COUNT(*)\n0          Robinson R-22         2\n1   Bell 206B3 JetRanger         1\n2         CH-47D Chinook         1\n3              Mil Mi-26         2\n4  CH-53E Super Stallion         1",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "List the names of aircrafts and that won matches at least twice.",
      "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
      "pred_query": "\nSELECT Aircraft\nFROM aircraft\nWHERE EXISTS\n  SELECT name\n  FROM pilot WHERE EXISTS",
      "error_type": "ExecutionError",
      "gold_result": "        Aircraft\n0  Robinson R-22\n1      Mil Mi-26",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the names of all aircrafts that have won a match at least twice?",
      "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
      "pred_query": "\nSELECT A.WINNING_Aircraft\nFROM aircraft\nWHERE EXISTS\n  SELECT A1.WINNING_Aircraft\n  FROM aircraft AS A\n  FROM aircraft AS A2\n  JOIN MATCH ON A.Aircraft_ID 2 WHERE EXISTS\n  SELECT DISTINCT R.Winning_Aircraft\n  FROM match AS T\n  JOIN aircraft AS A\n  FROM airport_aircraft AS RA ON R.AIRPORT_ID 1 WHERE EXISTS",
      "error_type": "ExecutionError",
      "gold_result": "        Aircraft\n0  Robinson R-22\n1      Mil Mi-26",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "List the names of aircrafts and that did not win any match.",
      "gold_query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
      "pred_query": "\nSELECT DISTINCT A.Aircraft\nFROM aircraft\nWHERE NOT EXISTS\n  SELECT P.Winning_Pilot\n  FROM match WHERE Winning_Pilot NOT NULL",
      "error_type": "ExecutionError",
      "gold_result": "Empty DataFrame\nColumns: [Aircraft]\nIndex: []",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the names of all aicrafts that have never won any match?",
      "gold_query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
      "pred_query": "\nSELECT T2.Aircraft\nFROM aircraft AS T1\nJOIN aircraft_twinning_wins ON T1.Aircraft_ID = T2.Aircraft\nWHERE T1.Aircraft_ID NOT IN\n    (SELECT T1.Aircraft_ID\n     FROM aircraft_twinning_wins\n     WHERE Winning_Pilot NOT NULL)",
      "error_type": "ExecutionError",
      "gold_result": "Empty DataFrame\nColumns: [Aircraft]\nIndex: []",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"",
      "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
      "pred_query": "\nSELECT Aircraft\nFROM aircraft\nWHERE pilot_id IN\n    (SELECT *\n     FROM pilot\n     WHERE pilot_id = '3')\n  AND aircraft_id IN\n    (SELECT *\n     FROM aircraft\n     WHERE airport_id IN\n         (SELECT airportID\n          FROM airport\n          WHERE airport_name = 'London Heathrow')\n       AND airport_id IN\n         (SELECT airportID\n          FROM airport\n          WHERE airport_name = 'London Gatwick'))",
      "error_type": "ExecutionError",
      "gold_result": "Empty DataFrame\nColumns: [Aircraft]\nIndex: []",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?",
      "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
      "pred_query": "\nSELECT A.Aircraft\nFROM aircraft AS A\nWHERE A.Aircraft_ID IN\n    (SELECT Aircraft.Aircraft\n     FROM aircraft AS B\n     WHERE B.Aircraft_ID IN\n         (SELECT id\n          FROM pilot AS C\n          WHERE C.Pilot_Id = '1000000000000000000')\n       AND A.Aircraft_ID = B.Aircraft_ID)\nGROUP BY A.Aircraft\nORDER BY A.Aircraft ASC",
      "error_type": "ExecutionError",
      "gold_result": "Empty DataFrame\nColumns: [Aircraft]\nIndex: []",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "Show all information on the airport that has the largest number of international passengers.",
      "gold_query": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1",
      "pred_query": "\nSELECT *\nFROM airport\nWHERE airportInternational_Passengers MAX",
      "error_type": "ExecutionError",
      "gold_result": "   Airport_ID     Airport_Name  Total_Passengers %_Change_2007  \\\n0           1  London Heathrow        67054745.0          1.5%   \n\n   International_Passengers  Domestic_Passengers  Transit_Passengers  \\\n0                61344438.0            5562516.0            147791.0   \n\n   Aircraft_Movements  Freight_Metric_Tonnes  \n0            478693.0              1397054.0  ",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What is all the information on the airport with the largest number of international passengers?",
      "gold_query": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1",
      "pred_query": "\nSELECT *\nFROM airport\nWHERE airportInternational_Passengers MAX",
      "error_type": "ExecutionError",
      "gold_result": "   Airport_ID     Airport_Name  Total_Passengers %_Change_2007  \\\n0           1  London Heathrow        67054745.0          1.5%   \n\n   International_Passengers  Domestic_Passengers  Transit_Passengers  \\\n0                61344438.0            5562516.0            147791.0   \n\n   Aircraft_Movements  Freight_Metric_Tonnes  \n0            478693.0              1397054.0  ",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.",
      "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
      "pred_query": "\nSELECT T2.Name,\n       T2.Age\nFROM aircraft AS T1\nJOIN match AS T2 ON T1.Aircraft_ID = T2.Winning_Pilot\nGROUP BY T1.Aircraft_ID\nORDER BY COUNT(*) DESC\nLIMIT 1",
      "error_type": "ExecutionError",
      "gold_result": "            Name  Age\n0  Ayana Spencer   25",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What is the name and age of the pilot younger than 30 who has won the most number of times?",
      "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
      "pred_query": "\nSELECT T1.Name,\n       T1.Age\nFROM pilot AS T1\nJOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Pilot\nGROUP BY T1.Aircraft_ID\nORDER BY COUNT(*) DESC\nLIMIT 1",
      "error_type": "ExecutionError",
      "gold_result": "            Name  Age\n0  Ayana Spencer   25",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "what is the name and age of the youngest winning pilot?",
      "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
      "pred_query": "\nSELECT T1.Name,\n       T1.Age\nFROM pilot AS T1\nJOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID\nWHERE T2.Winning_Pilot = 'Jack nominated'\nORDER BY T1.Age ASC\nLIMIT 1",
      "error_type": "ExecutionError",
      "gold_result": "                   Name  Age\n0  Katheryn Gorczany IV   20",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "How old is the youngest winning pilot and what is their name?",
      "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
      "pred_query": "\nSELECT T1.Age, (* name of the pilot)*\nFROM pilot AS T1\nJOIN winning_pilot AS T2 ON T1.Aircraft_ID = T2.Winning_Pilot\nORDER BY T1.Aircraft_ID ASC\nLIMIT 1",
      "error_type": "ExecutionError",
      "gold_result": "                   Name  Age\n0  Katheryn Gorczany IV   20",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "find the name of pilots who did not win the matches held in the country of Australia.",
      "gold_query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
      "pred_query": "\nSELECT DISTINCT Name\nFROM pilot\nWHERE Winning_Pilot NOT IN\n    (SELECT Winning_Pilot\n     FROM match\n     WHERE Country = 'Australia')",
      "error_type": "ExecutionError",
      "gold_result": "                         Name\n0       Prof. Zackery Collins\n1        Katheryn Gorczany IV\n2   Mr. Cristian Halvorson II\n3            Ellen Ledner III\n4             Elisha Hickle V\n5          Dr. Jade Bradtke V\n6             Winnifred Boyle\n7              Della Lindgren\n8              Maxwell Graham\n9               Blaise Muller\n10             Baylee Steuber",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the names of the pilots that have not won any matches in Australia?",
      "gold_query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
      "pred_query": "\nSELECT DISTINCT Name\nFROM pilot\nWHERE Winning_Pilot NOT IN\n    (SELECT Winning_Pilot\n     FROM match\n     WHERE Country = 'Australia')",
      "error_type": "ExecutionError",
      "gold_result": "                         Name\n0       Prof. Zackery Collins\n1        Katheryn Gorczany IV\n2   Mr. Cristian Halvorson II\n3            Ellen Ledner III\n4             Elisha Hickle V\n5          Dr. Jade Bradtke V\n6             Winnifred Boyle\n7              Della Lindgren\n8              Maxwell Graham\n9               Blaise Muller\n10             Baylee Steuber",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "What is the maximum length in meters for the bridges and what are the architects' names?",
      "gold_query": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id",
      "pred_query": "\nSELECT MAX(length_meters)\nFROM bridge\nWHERE type = 'public'\n  SELECT name\n  FROM archict WHERE id = MAX(length_meters)",
      "error_type": "ExecutionError",
      "gold_result": "   max(T1.length_meters)                name\n0                  121.0  Frank Lloyd Wright",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "What are the names and year of construction for the mills of 'Grondzeiler' type?",
      "gold_query": "SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler'",
      "pred_query": "\nSELECT DISTINCT T1.name,\n                T1.built_year\nFROM mill AS T1\nJOIN architect AS T2 ON T1.architect_id = T2.id\nWHERE T2.name = 'Grondzeiler'",
      "error_type": "Mismatch",
      "gold_result": "             name  built_year\n   Le Vieux Molen        1840\n  Moulin Bertrand        1890\n  Moulin de Fexhe        1843\nMoulin du Château        1856\nMoulin de Pousset        1819",
      "pred_result": "Empty DataFrame\nColumns: [name, built_year]\nIndex: []"
    },
    {
      "db_id": "architecture",
      "question": "What are the distinct names and nationalities of the architects who have ever built a mill?",
      "gold_query": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id",
      "pred_query": "\nSELECT DISTINCT DISTINCT name,\n                         nationality\nFROM architect\nJOIN mill ON architect.id = mill.architect_id\nJOIN architect ON architect.id = a.id",
      "error_type": "ExecutionError",
      "gold_result": "                 name       nationality\n0  Frank Lloyd Wright          American\n1         Frank Gehry          Canadian\n2          Zaha Hadid    Iraqi, British\n3   Mies Van Der Rohe  German, American",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "What are the distinct types of mills that are built by American or Canadian architects?",
      "gold_query": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'",
      "pred_query": "\nSELECT DISTINCT T1.name\nFROM mill AS T2\nJOIN architect AS T1 ON T2.architect_id = T1.id\nWHERE T1 nationality = 'American'\n  OR T1 nationality = 'Canadian'",
      "error_type": "ExecutionError",
      "gold_result": "          type\n0  Grondzeiler",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "What are the ids, names and genders of the architects who built two bridges or one mill?",
      "gold_query": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1",
      "pred_query": "\nSELECT T1.id,\n       T1.name,\n       T1.gender,\n       T2.id,\n       T2.name\nFROM architect AS T1\nJOIN bridge AS T2 ON T1.id = T2.architect_id\nGROUP BY T1.id\nHAVING COUNT(T2.id) = 2\nOR T1.id = 11",
      "error_type": "Mismatch",
      "gold_result": "id              name gender\n 2       Frank Gehry   male\n 3        Zaha Hadid female\n 4 Mies Van Der Rohe   male",
      "pred_result": " id              name gender  id       name\n  3        Zaha Hadid female   3 Kolob Arch\n  4 Mies Van Der Rohe   male   4 Aloba Arch"
    },
    {
      "db_id": "architecture",
      "question": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
      "gold_query": "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'",
      "pred_query": "\nSELECT L localization\nFROM bridge\nWHERE name LIKE '%Kolob Arch%\n  OR %Rainbow Arch%",
      "error_type": "ExecutionError",
      "gold_result": "                                            location\n0                    Zion National Park , Utah , USA\n1  Glen Canyon National Recreation Area , Utah , USA",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "Which of the mill names contains the french word 'Moulin'?",
      "gold_query": "SELECT name FROM mill WHERE name LIKE '%Moulin%'",
      "pred_query": "\nSELECT location\nFROM mill\nWHERE name LIKE '%Moulin%'",
      "error_type": "Mismatch",
      "gold_result": "             name\n  Moulin Bertrand\n  Moulin de Fexhe\nMoulin de Momalle\nMoulin du Château\nMoulin de Pousset",
      "pred_result": "             location\n              Donceel\nFexhe-le-haut-Clocher\n              Momalle\n                Othée\n              Pousset"
    },
    {
      "db_id": "architecture",
      "question": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?",
      "gold_query": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80",
      "pred_query": "\nSELECT DISTINCT T1.name\nFROM mill AS T1\nJOIN architect AS T2 ON T1.architect_id = T2.id\nWHERE T2.architect_id IN (4,\n                          7)",
      "error_type": "ExecutionError",
      "gold_result": "                name\n0     Le Vieux Molen\n1    Moulin Bertrand\n2    Moulin de Fexhe\n3  Moulin de Momalle",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "What is the most common mill type, and how many are there?",
      "gold_query": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
      "pred_query": "\nSELECT type,\n       COUNT(*)\nFROM mill\nGROUP BY type\nORDER BY COUNT(*) DESC\nLIMIT 1",
      "error_type": "Mismatch",
      "gold_result": "       type  count(*)\nGrondzeiler         5",
      "pred_result": "       type  COUNT(*)\nGrondzeiler         5"
    },
    {
      "db_id": "architecture",
      "question": "How many architects haven't built a mill before year 1850?",
      "gold_query": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );",
      "pred_query": "\nSELECT count(*)\nFROM architect\nWHERE nationality = 'US'\n  AND built_year < 1850",
      "error_type": "ExecutionError",
      "gold_result": "   count(*)\n0         2",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
      "gold_query": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet",
      "pred_query": "YourSQL\nSELECT t1.name\nFROM bridge AS t1\nJOIN architect AS t2 ON t1.architect_id = t2.id\nWHERE t2.nationality = 'American'\nORDER BY t1.length_feet",
      "error_type": "ExecutionError",
      "gold_result": "                           name\n0   Hazarchishma Natural Bridge\n1                Jiangzhou Arch\n2                Shipton's Arch\n3  Xian Ren Qiao (Fairy Bridge)",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Show all the locations where no cinema has capacity over 800.",
      "gold_query": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800",
      "pred_query": "\nSELECT LOCATION\nFROM cinema\nWHERE capacity > 800",
      "error_type": "Mismatch",
      "gold_result": "        Location\n     County Cork\n   County Dublin\n    County Laois\n    County Louth\nCounty Tipperary",
      "pred_result": "      Location\nCounty Wicklow\n  County Clare"
    },
    {
      "db_id": "cinema",
      "question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
      "gold_query": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011",
      "pred_query": "\nSELECT DISTINCTLocation\nFROM cinema\nWHERE cinema.Name LIKE '%2010%'\n  AND cinema.Name LIKE '%2011%'",
      "error_type": "ExecutionError",
      "gold_result": "           Location\n0  County Tipperary",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Count the number of cinemas.",
      "gold_query": "SELECT count(*) FROM cinema",
      "pred_query": "\nSELECT count(Cinema_ID)\nFROM cinema",
      "error_type": "Mismatch",
      "gold_result": " count(*)\n       10",
      "pred_result": " count(Cinema_ID)\n               10"
    },
    {
      "db_id": "cinema",
      "question": "Show the cinema name and location for cinemas with capacity above average.",
      "gold_query": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)",
      "pred_query": "\nSELECT Name,\n       Location\nFROM cinema\nWHERE capacity >\n    (SELECT MAX(capacity)\n     FROM cinema)",
      "error_type": "Mismatch",
      "gold_result": "        Name       Location\n     Codling County Wicklow\nMount Callan   County Clare",
      "pred_result": "Empty DataFrame\nColumns: [Name, Location]\nIndex: []"
    },
    {
      "db_id": "cinema",
      "question": "What are the name and location of the cinema with the largest capacity?",
      "gold_query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
      "pred_query": "\nSELECT Name,\n       Location\nFROM cinema\nWHERE capacity MAX",
      "error_type": "ExecutionError",
      "gold_result": "      Name        Location\n0  Codling  County Wicklow",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.",
      "gold_query": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011",
      "pred_query": "\nSELECT avg(capacity) AS average_capacity,\n       min(capacity) AS minimum_capacity,\n       max(capacity) AS maximum_capacity\nFROM cinema\nWHERE openning_year >= 2011",
      "error_type": "Mismatch",
      "gold_result": " avg(capacity)  min(capacity)  max(capacity)\n    399.666667            203            908",
      "pred_result": " average_capacity  minimum_capacity  maximum_capacity\n       399.666667               203               908"
    },
    {
      "db_id": "cinema",
      "question": "Show each location and the number of cinemas there.",
      "gold_query": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION",
      "pred_query": "\nSELECT DISTINCTLocation,\n       COUNT(*)\nFROM cinema\nORDER BY COUNT(*) ASC",
      "error_type": "ExecutionError",
      "gold_result": "           Location  count(*)\n0      County Clare         3\n1       County Cork         1\n2     County Dublin         1\n3      County Laois         1\n4      County Louth         1\n5  County Tipperary         2\n6    County Wicklow         1",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "What is the location with the most cinemas opened in year 2010 or later?",
      "gold_query": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
      "pred_query": "\nSELECT LOCATION\nFROM cinema\nWHERE openning_year >= 2010\nGROUP BY LOCATION\nORDER BY COUNT(*) ASC\nLIMIT 1",
      "error_type": "Mismatch",
      "gold_result": "        Location\nCounty Tipperary",
      "pred_result": "   Location\nCounty Cork"
    },
    {
      "db_id": "cinema",
      "question": "Show all the locations with at least two cinemas with capacity above 300.",
      "gold_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
      "pred_query": "\nSELECT LOCATION\nFROM cinema\nWHERE cinema ID NOT IN\n    (SELECT Cinema_ID\n     FROM schedule\n     WHERE film ID IN (SELECTFilm_ID\n                       FROM film\n                       WHERE Title = 'THE EXTRALIKES'))\n  AND capacity > 300",
      "error_type": "ExecutionError",
      "gold_result": "       Location\n0  County Clare",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Which locations have 2 or more cinemas with capacity over 300?",
      "gold_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
      "pred_query": "\nSELECT LOCATION\nFROM cinema\nWHERE cinema_ID IN (SELECTFilm_ID\n                    FROM film\n                    WHERE Title IN\n                        (SELECT Title\n                         FROM schedule\n                         WHERE schedule[3] = 'Cinema'\n                           AND capacity > 300)) ) WITH COUNT(*) AS m\n  FROM cinema\nGROUP BY LOCATION\nHAVING m = 2",
      "error_type": "ExecutionError",
      "gold_result": "       Location\n0  County Clare",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Show the title and director for all films.",
      "gold_query": "SELECT title ,  directed_by FROM film",
      "pred_query": "\nSELECT T2.title,\n       T2.director\nFROM film AS T1\nJOIN cinema AS T2 ON T1.Film_ID = T2.Cinema_ID",
      "error_type": "ExecutionError",
      "gold_result": "                              Title             Directed_by\n0   The Case of the Mystery Weekend          Bill Schreiner\n1       The Case of the Smart Dummy          Bill Schreiner\n2          The Case: Off the Record          Bill Schreiner\n3  The Case of the Bermuda Triangle  Jesus Salvador Treviño\n4      The Case of the Piggy Banker          Bill Schreiner",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "What are the title and director of each film?",
      "gold_query": "SELECT title ,  directed_by FROM film",
      "pred_query": "\nSELECT T2.title,\n       T2.director\nFROM film AS T1\nJOIN cinema AS T2 ON T1film_id = T2.cinema_id",
      "error_type": "ExecutionError",
      "gold_result": "                              Title             Directed_by\n0   The Case of the Mystery Weekend          Bill Schreiner\n1       The Case of the Smart Dummy          Bill Schreiner\n2          The Case: Off the Record          Bill Schreiner\n3  The Case of the Bermuda Triangle  Jesus Salvador Treviño\n4      The Case of the Piggy Banker          Bill Schreiner",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Show all directors.",
      "gold_query": "SELECT DISTINCT directed_by FROM film",
      "pred_query": "\nSELECT DISTINCT D.title\nFROM film\nWHERE film.directed_by = D.directING\n  FROM cinema",
      "error_type": "ExecutionError",
      "gold_result": "              Directed_by\n0          Bill Schreiner\n1  Jesus Salvador Treviño",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "List all directors along with the number of films directed by each director.",
      "gold_query": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by",
      "pred_query": "\nSELECT Dir_name\nFROM film\nGROUP BY Dir_name\nORDER BY COUNT(*) DESC\nLIMIT 3",
      "error_type": "ExecutionError",
      "gold_result": "              Directed_by  count(*)\n0          Bill Schreiner         4\n1  Jesus Salvador Treviño         1",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "What is total number of show times per dat for each cinema?",
      "gold_query": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id",
      "pred_query": "\nSELECT DISTINCT COUNT(*)\nFROM schedule\nWHERE cinema_id NOT IN\n    (SELECT cinema_id\n     FROM cinema);",
      "error_type": "Mismatch",
      "gold_result": "        Name  sum(T1.show_times_per_day)\n     Codling                          10\n Carrowleagh                           5\n   Gortahile                           4\nMount Callan                           5\n       Oriel                           5",
      "pred_result": " COUNT(*)\n        0"
    },
    {
      "db_id": "cinema",
      "question": "What are the title and maximum price of each film?",
      "gold_query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
      "pred_query": "\nSELECT T2.title,\n       MAX(T1.price)\nFROM schedule AS T1\nJOIN film AS T2 ON T1.film_id = T2.film_id PRIMARY KEY (T1.film_id)",
      "error_type": "ExecutionError",
      "gold_result": "                              Title  max(T1.price)\n0   The Case of the Mystery Weekend          15.99\n1       The Case of the Smart Dummy          12.99\n2          The Case: Off the Record           8.99\n3  The Case of the Bermuda Triangle           9.99\n4      The Case of the Piggy Banker          12.99",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Show cinema name, film title, date, and price for each record in schedule.",
      "gold_query": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id",
      "pred_query": "\nSELECT name,\n       title, date, price\nFROM cinema\nJOIN schedule ON cinema ID\nJOIN film ON film ID",
      "error_type": "ExecutionError",
      "gold_result": "           Name                             Title     Date  Price\n0       Codling   The Case of the Mystery Weekend   21 May  12.99\n1       Codling       The Case of the Smart Dummy   21 May  12.99\n2       Codling          The Case: Off the Record   21 Jun   8.99\n3   Carrowleagh   The Case of the Mystery Weekend  11 July   9.99\n4     Gortahile      The Case of the Piggy Banker    2 Aug  12.99\n5  Mount Callan  The Case of the Bermuda Triangle   20 May   9.99\n6         Oriel   The Case of the Mystery Weekend   19 May  15.99",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "What are the title and director of the films without any schedule?",
      "gold_query": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
      "pred_query": "\nSELECT T2.title,\n       T2.director\nFROM schedule AS T1\nJOIN film AS T2 ON T1.film_id = T2.film_id\nWHERE T1.schedule_times_per_day = 0",
      "error_type": "ExecutionError",
      "gold_result": "Empty DataFrame\nColumns: [Title, Directed_by]\nIndex: []",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Show director with the largest number of show times in total.",
      "gold_query": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
      "pred_query": "\nSELECT T2.directed_by\nFROM schedule AS T1\nJOIN film AS T2 ON T1.film_id = T2.film_id\nGROUP BY T1.directed_by\nORDER BY COUNT(T2) DESC\nLIMIT 1",
      "error_type": "ExecutionError",
      "gold_result": "      Directed_by\n0  Bill Schreiner",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Find the locations that have more than one movie theater with capacity above 300.",
      "gold_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
      "pred_query": "\nSELECT DISTINCT LOCATION\nFROM cinema\nWHERE OPENING_YEAR = '2009'\n  AND capacity > 300",
      "error_type": "ExecutionError",
      "gold_result": "       Location\n0  County Clare",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "In which locations are there more than one movie theater with capacity above 300?",
      "gold_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
      "pred_query": "\nSELECT DISTINCT LOCATION\nFROM cinema\nWHERE cinema_name ?",
      "error_type": "ExecutionError",
      "gold_result": "       Location\n0  County Clare",
      "pred_result": "None"
    }
  ]
}