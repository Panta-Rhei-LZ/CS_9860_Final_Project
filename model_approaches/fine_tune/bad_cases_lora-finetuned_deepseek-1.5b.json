{
  "model_name": "lora-finetuned_deepseek-1.5b",
  "final_accuracy": 0.28859060402684567,
  "per_dataset_accuracy": {
    "department_management": 0.3125,
    "farm": 0.425,
    "aircraft": 0.1956521739130435,
    "architecture": 0.17647058823529413,
    "cinema": 0.3
  },
  "bad_cases": [
    {
      "db_id": "department_management",
      "question": "List the creation year, name and budget of each department.",
      "gold_query": "SELECT creation ,  name ,  budget_in_billions FROM department",
      "pred_query": "\nSELECT D.name,\n       D.budget_in_Billions\nFROM department AS D",
      "error_type": "Mismatch",
      "gold_result": "Creation                          Name  Budget_in_Billions\n    1789                         State                9.96\n    1789                      Treasury               11.10\n    1947                       Defense              439.30\n    1870                       Justice               23.40\n    1849                      Interior               10.70\n    1889                   Agriculture               77.60\n    1903                      Commerce                6.20\n    1913                         Labor               59.70\n    1953     Health and Human Services              543.20\n    1965 Housing and Urban Development               46.20\n    1966                Transportation               58.00\n    1977                        Energy               21.50\n    1979                     Education               62.80\n    1989              Veterans Affairs               73.20\n    2002             Homeland Security               44.60",
      "pred_result": "                         Name  Budget_in_Billions\n                        State                9.96\n                     Treasury               11.10\n                      Defense              439.30\n                      Justice               23.40\n                     Interior               10.70\n                  Agriculture               77.60\n                     Commerce                6.20\n                        Labor               59.70\n    Health and Human Services              543.20\nHousing and Urban Development               46.20\n               Transportation               58.00\n                       Energy               21.50\n                    Education               62.80\n             Veterans Affairs               73.20\n            Homeland Security               44.60"
    },
    {
      "db_id": "department_management",
      "question": "What are the maximum and minimum budget of the departments?",
      "gold_query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
      "pred_query": "\nSELECT MAX(budget_in_billions) AS Maximum\nFROM department",
      "error_type": "Mismatch",
      "gold_result": " max(budget_in_billions)  min(budget_in_billions)\n                   543.2                      6.2",
      "pred_result": " Maximum\n   543.2"
    },
    {
      "db_id": "department_management",
      "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
      "gold_query": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
      "pred_query": "\nSELECT DISTINCT Creation\nFROM department\nWHERE management(TEMPERARY_ID = 'Alabama')",
      "error_type": "ExecutionError",
      "gold_result": "  Creation\n0     1903",
      "pred_result": "None"
    },
    {
      "db_id": "department_management",
      "question": "What are the names of the states where at least 3 heads were born?",
      "gold_query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3",
      "pred_query": "\nSELECT born_state\nFROM head\nWHERE head_id NOT IN\n    (SELECT head_id\n     FROM management)\nORDER BY born_state ASC</SQL>",
      "error_type": "ExecutionError",
      "gold_result": "   born_state\n0  California",
      "pred_result": "None"
    },
    {
      "db_id": "department_management",
      "question": "In which year were most departments established?",
      "gold_query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
      "pred_query": "\nSELECT D1 creation\nFROM department AS D1\nJOIN head AS H ON D1.department_ID = H.department_ID\nJOIN management AS M ON D1.department_ID = M.department_ID\nJOIN M temporary_acting ON Mtemporary_acting = 'Most'\nJOIN management ON COUNT(*) = 1",
      "error_type": "ExecutionError",
      "gold_result": "  Creation\n0     1789",
      "pred_result": "None"
    },
    {
      "db_id": "department_management",
      "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
      "gold_query": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'",
      "pred_query": "\nSELECT name,\n       temp acting\nFROM management\nWHERE\n  temporary acting = 'Yes'",
      "error_type": "ExecutionError",
      "gold_result": "                Name  Num_Employees\n0           Treasury       115897.0\n1  Homeland Security       208000.0\n2           Treasury       115897.0",
      "pred_result": "None"
    },
    {
      "db_id": "department_management",
      "question": "How many acting statuses are there?",
      "gold_query": "SELECT count(DISTINCT temporary_acting) FROM management",
      "pred_query": "\nSELECT COUNT(DISTINCT temp_acting)\nFROM management",
      "error_type": "ExecutionError",
      "gold_result": "   count(DISTINCT temporary_acting)\n0                                 2",
      "pred_result": "None"
    },
    {
      "db_id": "department_management",
      "question": "What are the distinct ages of the heads who are acting?",
      "gold_query": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
      "pred_query": "\nSELECT DISTINCT age\nFROM head\nWHERE acting = 'Yes'",
      "error_type": "ExecutionError",
      "gold_result": "    age\n0  53.0\n1  52.0\n2  69.0",
      "pred_result": "None"
    },
    {
      "db_id": "department_management",
      "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
      "gold_query": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'",
      "pred_query": "\nSELECT b.born_state\nFROM department AS b\nJOIN management AS m ON b.department_id = 109\nJOIN head AS h ON m.head_id = 33\nAND h.department_id = 109\nORDER BY b.born_state",
      "error_type": "ExecutionError",
      "gold_result": "   born_state\n0  California",
      "pred_result": "None"
    },
    {
      "db_id": "department_management",
      "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
      "gold_query": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",
      "pred_query": "\nSELECT D.department_ID,\n       D.Name,\n       COUNT(*)\nFROM department AS D\nJOIN manages AS M\nWHERE D.department_ID NOT EXISTS",
      "error_type": "ExecutionError",
      "gold_result": "   Department_ID      Name  count(*)\n0              2  Treasury         2",
      "pred_result": "None"
    },
    {
      "db_id": "department_management",
      "question": "Which head's name has the substring 'Ha'? List the id and name.",
      "gold_query": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'",
      "pred_query": "\nSELECT h.head_ID,\n       h.name\nFROM head\nWHERE t.name LIKE '%Ha%'",
      "error_type": "ExecutionError",
      "gold_result": "   head_ID                name\n0        4         Dudley Hart\n1        9  PÃ¡draig Harrington\n2       10    Franklin Langham",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "Count the number of farms.",
      "gold_query": "SELECT count(*) FROM farm",
      "pred_query": "\nSELECT COUNT(*)\nFROM farm",
      "error_type": "Mismatch",
      "gold_result": " count(*)\n        8",
      "pred_result": " COUNT(*)\n        8"
    },
    {
      "db_id": "farm",
      "question": "What is the total horses record for each farm, sorted ascending?",
      "gold_query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
      "pred_query": "\nSELECT T1.Total_Horses\nFROM farm AS T1\nJOIN farm_competition AS T2 ON T1.Farm_ID = T2.Farm_ID\nORDER BY T2.Year ASC",
      "error_type": "ExecutionError",
      "gold_result": "   Total_Horses\n0        2546.9\n1        2604.8\n2        3658.9\n3        4781.3\n4        5056.5\n5        5308.2\n6        5486.9\n7        5607.5",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "Return the hosts of competitions for which the theme is not Aliens?",
      "gold_query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
      "pred_query": "\nSELECT Official_Name\nFROM city\nWHERE Hosts NOT LIKE 'Aliens'",
      "error_type": "ExecutionError",
      "gold_result": "                                  Hosts\n0  Miley Cyrus Jared Leto and Karen Mok\n1         Leehom Wang and Kelly Rowland\n2                           Alicia Keys\n3        Vanness Wu and Michelle Branch\n4                   Shaggy and Coco Lee",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "What are the themes of farm competitions sorted by year in ascending order?",
      "gold_query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
      "pred_query": "\nSELECT Theme,\n       Year\nFROM farm_competition\nORDER BY Year ASC",
      "error_type": "Mismatch",
      "gold_result": "              Theme\n             Aliens\n           MTV Cube\n    Valentine's Day\n       MTV Asia Aid\n        Codehunters\nCarnival M is back!",
      "pred_result": "              Theme  Year\n             Aliens  2002\n           MTV Cube  2003\n    Valentine's Day  2004\n       MTV Asia Aid  2005\n        Codehunters  2006\nCarnival M is back!  2013"
    },
    {
      "db_id": "farm",
      "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
      "gold_query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
      "pred_query": "\nSELECT avg(Total_Horses)\nFROM farm\nWHERE Total_Horses > 5000",
      "error_type": "Mismatch",
      "gold_result": " avg(Working_Horses)\n             3977.75",
      "pred_result": " avg(Total_Horses)\n          5364.775"
    },
    {
      "db_id": "farm",
      "question": "What are the maximum and minimum number of cows across all farms.",
      "gold_query": "SELECT max(Cows) ,  min(Cows) FROM farm",
      "pred_query": "\nSELECT MAX(Cows)\nFROM farm WHEREfarm_ID NOT IN\n  (SELECT Farmer_ID\n   FROM farm_competition\n   WHERE Theme = 'Cattle'\n     OR EXISTS\n       (SELECT Farmer_ID\n        FROM farm_competition\n        WHERE Theme = 'Horses'\n          OR EXISTS\n            (SELECT Farmer_ID\n             FROM farm_competition\n             WHERE Theme = 'Dogs'\n               OR EXISTS\n                 (SELECT Farmer_ID\n                  FROM farm_competition\n                  WHERE Theme = 'Rats'))))",
      "error_type": "ExecutionError",
      "gold_result": "   max(Cows)  min(Cows)\n0     3987.0     2407.2",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "Return the maximum and minimum number of cows across all farms.",
      "gold_query": "SELECT max(Cows) ,  min(Cows) FROM farm",
      "pred_query": "\nSELECT MAX(Cows)\nFROM farm\nWHERE Farmer_ID NOT  NULL\n  SELECT MIN(Cows)\n  FROM farm WHERE Farmer_ID NOT  NULL",
      "error_type": "ExecutionError",
      "gold_result": "   max(Cows)  min(Cows)\n0     3987.0     2407.2",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "How many different statuses do cities have?",
      "gold_query": "SELECT count(DISTINCT Status) FROM city",
      "pred_query": "\nSELECT Count(DISTINCT Status)\nFROM city",
      "error_type": "Mismatch",
      "gold_result": " count(DISTINCT Status)\n                      2",
      "pred_result": " Count(DISTINCT Status)\n                      2"
    },
    {
      "db_id": "farm",
      "question": "Count the number of different statuses.",
      "gold_query": "SELECT count(DISTINCT Status) FROM city",
      "pred_query": "\nSELECT COUNT(DISTINCT Status)\nFROM city",
      "error_type": "Mismatch",
      "gold_result": " count(DISTINCT Status)\n                      2",
      "pred_result": " COUNT(DISTINCT Status)\n                      2"
    },
    {
      "db_id": "farm",
      "question": "Show the years and the official names of the host cities of competitions.",
      "gold_query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
      "pred_query": "\nSELECT T1.Year,\n       T1.Official_Name\nFROM city AS T1\nJOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\nORDER BY T1.Official_Name ASC\nLIMIT 1",
      "error_type": "ExecutionError",
      "gold_result": "   Year            Official_Name\n0  2013  Grand Falls/Grand-Sault\n1  2006            Perth-Andover\n2  2005             Plaster Rock\n3  2004                 Drummond\n4  2003                Aroostook\n5  2002                Aroostook",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "Give the years and official names of the cities of each competition.",
      "gold_query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
      "pred_query": "\nSELECT T1.year,\n       T1official_name\nFROM city AS T1\nJOIN farm_competition AS T2 ON T1.city_id = T2.host_city_id\nJOIN competition_record AS T3 ON T2.competition_id = T3.competition_id\nWHERE T3.rank = 1",
      "error_type": "ExecutionError",
      "gold_result": "   Year            Official_Name\n0  2013  Grand Falls/Grand-Sault\n1  2006            Perth-Andover\n2  2005             Plaster Rock\n3  2004                 Drummond\n4  2003                Aroostook\n5  2002                Aroostook",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "Show the official names of the cities that have hosted more than one competition.",
      "gold_query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
      "pred_query": "\nSELECT Official_Name\nFROM city\nWHERE Hosts > 1",
      "error_type": "ExecutionError",
      "gold_result": "  Official_Name\n0     Aroostook",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "What are the official names of cities that have hosted more than one competition?",
      "gold_query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
      "pred_query": "\nSELECT Official_Name\nFROM city\nWHERE COUNT(Distinct Hosts) > 1",
      "error_type": "ExecutionError",
      "gold_result": "  Official_Name\n0     Aroostook",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "What is the status of the city that has hosted the most competitions?",
      "gold_query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
      "pred_query": "\nSELECT T1.Status\nFROM city AS T1\nJOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\nGROUP BY T1.City_ID\nORDER BY COUNT(T2 competection_ID) DESC\nLIMIT 1",
      "error_type": "ExecutionError",
      "gold_result": "    Status\n0  Village",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "Please show the themes of competitions with host cities having populations larger than 1000.",
      "gold_query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
      "pred_query": "\nSELECT T1.Theme\nFROM city AS T1\nWHERE T2.Host_city_ID = 111111\n  AND T2 POPULATION > 1000",
      "error_type": "ExecutionError",
      "gold_result": "                 Theme\n0  Carnival M is back!\n1          Codehunters\n2         MTV Asia Aid",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?",
      "gold_query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
      "pred_query": "\nSELECT T1.Theme\nFROM city AS T1\nWHERE T2.Host_city_ID\n  FROM city AS T2 WHERE T2.Host_city_ID IN\n    (SELECT City_ID\n     FROM city\n     WHERE Area_km_2 > 10000)",
      "error_type": "ExecutionError",
      "gold_result": "                 Theme\n0  Carnival M is back!\n1          Codehunters\n2         MTV Asia Aid",
      "pred_result": "None"
    },
    {
      "db_id": "farm",
      "question": "Please show the different statuses of cities and the average population of cities with each status.",
      "gold_query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
      "pred_query": "\nSELECT avg(Population) AS averagePopulation\nFROM city\nGROUP BY Status",
      "error_type": "Mismatch",
      "gold_result": " Status  avg(Population)\n   Town          5706.00\nVillage          1009.75",
      "pred_result": " averagePopulation\n           5706.00\n           1009.75"
    },
    {
      "db_id": "farm",
      "question": "What are the statuses and average populations of each city?",
      "gold_query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
      "pred_query": "\nSELECT Status,\n       AVG(Population)\nFROM city",
      "error_type": "Mismatch",
      "gold_result": " Status  avg(Population)\n   Town          5706.00\nVillage          1009.75",
      "pred_result": "Status  AVG(Population)\n  Town           1949.0"
    },
    {
      "db_id": "farm",
      "question": "List the most common type of Status across cities.",
      "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
      "pred_query": "\nSELECT T1.Status\nFROM city AS T1\nJOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\nGROUP BY T1.Status\nORDER BY COUNT(*) DESC",
      "error_type": "Mismatch",
      "gold_result": " Status\nVillage",
      "pred_result": " Status\nVillage\n   Town"
    },
    {
      "db_id": "farm",
      "question": "What is the most common status across all cities?",
      "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
      "pred_query": "\nSELECT Population\nFROM city\nWHERE Status LIKE '%Common%'",
      "error_type": "Mismatch",
      "gold_result": " Status\nVillage",
      "pred_result": "Empty DataFrame\nColumns: [Population]\nIndex: []"
    },
    {
      "db_id": "farm",
      "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
      "gold_query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
      "pred_query": "\nSELECT Area_km_2\nFROM city\nWHERE Population > 1500\n  AND Population < 500",
      "error_type": "Mismatch",
      "gold_result": " Status\nVillage",
      "pred_result": "Empty DataFrame\nColumns: [Area_km_2]\nIndex: []"
    },
    {
      "db_id": "farm",
      "question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?",
      "gold_query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
      "pred_query": "\nSELECT Status\nFROM city\nWHERE Population > 1500\nORDER BY Status\nLIMIT 2",
      "error_type": "Mismatch",
      "gold_result": " Status\nVillage",
      "pred_result": " Status\n   Town\nVillage"
    },
    {
      "db_id": "farm",
      "question": "Show the census ranking of cities whose status are not \"Village\".",
      "gold_query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
      "pred_query": "\nSELECT census_rank\nFROM city\nWHERE status != 'Village'",
      "error_type": "ExecutionError",
      "gold_result": "  Census_Ranking\n0    636 of 5008",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "How many aircrafts are there?",
      "gold_query": "SELECT count(*) FROM aircraft",
      "pred_query": "\nSELECT COUNT(Aircraft_ID)\nFROM aircraft",
      "error_type": "Mismatch",
      "gold_result": " count(*)\n        5",
      "pred_result": " COUNT(Aircraft_ID)\n                  5"
    },
    {
      "db_id": "aircraft",
      "question": "What is the number of aircraft?",
      "gold_query": "SELECT count(*) FROM aircraft",
      "pred_query": "\nSELECT COUNT(Aircraft_ID)\nFROM aircraft",
      "error_type": "Mismatch",
      "gold_result": " count(*)\n        5",
      "pred_result": " COUNT(Aircraft_ID)\n                  5"
    },
    {
      "db_id": "aircraft",
      "question": "List the description of all aircrafts.",
      "gold_query": "SELECT Description FROM aircraft",
      "pred_query": "\nSELECT A Description\nFROM aircraft",
      "error_type": "ExecutionError",
      "gold_result": "                     Description\n0       Light utility helicopter\n1  Turboshaft utility helicopter\n2        Tandem rotor helicopter\n3          Heavy-lift helicopter\n4          Heavy-lift helicopter",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the descriptions for the aircrafts?",
      "gold_query": "SELECT Description FROM aircraft",
      "pred_query": "\nSELECT Description\nFROM aircraft\nWHERE Airport_ID NOT IN\n    (SELECT Winning_Aircraft\n     FROM match\n     WHERE Round = 1\n       AND Winning_Pilot != '')",
      "error_type": "ExecutionError",
      "gold_result": "                     Description\n0       Light utility helicopter\n1  Turboshaft utility helicopter\n2        Tandem rotor helicopter\n3          Heavy-lift helicopter\n4          Heavy-lift helicopter",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What is the average number of international passengers for an airport?",
      "gold_query": "SELECT avg(International_Passengers) FROM airport",
      "pred_query": "\nSELECT avg(International_Passengers)\nFROM airport\nWHERE Airport_Name LIKE '%International%'",
      "error_type": "Mismatch",
      "gold_result": " avg(International_Passengers)\n                    16443156.6",
      "pred_result": " avg(International_Passengers)\n                     3943139.0"
    },
    {
      "db_id": "aircraft",
      "question": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?",
      "gold_query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
      "pred_query": "\nSELECT INT(International_Passengers),\n       INT(Domestic_Passengers)\nFROM airport\nWHERE Airport_Name LIKE '% Heathrow%'",
      "error_type": "ExecutionError",
      "gold_result": "   International_Passengers  Domestic_Passengers\n0                61344438.0            5562516.0",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "How many international and domestic passengers are there in the airport London Heathrow?",
      "gold_query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
      "pred_query": "\nSELECT Count(*)\nFROM airport\nWHERE Airport_Name LIKE '%London Heathrow%\"",
      "error_type": "ExecutionError",
      "gold_result": "   International_Passengers  Domestic_Passengers\n0                61344438.0            5562516.0",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
      "gold_query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
      "pred_query": "\nSELECT Total_Passengers\nFROM airport\nWHERE airport_name LIKE '%London%'",
      "error_type": "Mismatch",
      "gold_result": " sum(Domestic_Passengers)\n               12957585.0",
      "pred_result": " Total_Passengers\n       67054745.0\n       34205887.0\n       22360364.0\n       10180734.0"
    },
    {
      "db_id": "aircraft",
      "question": "What are the total number of domestic passengers at all London airports?",
      "gold_query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
      "pred_query": "\nSELECT DISTINCT D.Domestic_Passengers\nFROM airport AS A\nJOIN PI AS PI\nJOIN airport_aircraft AS AA ON A.Aircraft_ID = AA.Aircraft\nGROUP BY A.Aircraft\nORDER BY A.Domestic_Passengers ASC",
      "error_type": "ExecutionError",
      "gold_result": "   sum(Domestic_Passengers)\n0                12957585.0",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the maximum and minimum number of transit passengers of all aiports.",
      "gold_query": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
      "pred_query": "\nSELECT MAX(Transit_Passengers)\nFROM airport\nWHERE Airport_Name LIKE '% transit%'\n  SELECT MIN(Transit_Passengers)\n  FROM airport WHERE Airport_Name LIKE '% transit%'",
      "error_type": "ExecutionError",
      "gold_result": "   max(Transit_Passengers)  min(Transit_Passengers)\n0                 156246.0                   4395.0",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What is the maximum and mininum number of transit passengers for all airports?",
      "gold_query": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
      "pred_query": "\nSELECT MIN(Total_Passengers)\nFROM airport AS A\nJOIN PI AS PI ON A.AIRPORT_ID = PI.AIRPORT_ID\nSELECT MAX(Total_Passengers)\nFROM airport AS A\nJOIN PI AS PI ON A.AIRPORT_ID = A.AIRPORT_ID",
      "error_type": "ExecutionError",
      "gold_result": "   max(Transit_Passengers)  min(Transit_Passengers)\n0                 156246.0                   4395.0",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".",
      "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
      "pred_query": "\nSELECT Aircraft\nFROM airport_aircraft\nWHERE Airport_ID LIKE '%London Gatwick%'",
      "error_type": "ExecutionError",
      "gold_result": "        Aircraft\n0  Robinson R-22",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the names of all the aircrafts associated with London Gatwick airport?",
      "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
      "pred_query": "\nSELECT Aircraft\nFROM aircraft\nWHERE Aircraft_ID = 2",
      "error_type": "Mismatch",
      "gold_result": "     Aircraft\nRobinson R-22",
      "pred_result": "            Aircraft\nBell 206B3 JetRanger"
    },
    {
      "db_id": "aircraft",
      "question": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.",
      "gold_query": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
      "pred_query": "\nSELECT Description\nFROM aircraft\nWHERE Airport_ID REFERENCES airport WHERE airport .Total_Passengers GREATER THAN 1000000",
      "error_type": "ExecutionError",
      "gold_result": "               Aircraft                    Description\n0  Bell 206B3 JetRanger  Turboshaft utility helicopter\n1         Robinson R-22       Light utility helicopter",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?",
      "gold_query": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
      "pred_query": "\nSELECT A.Aircraft\nFROM aircraft AS A\nWHERE A.Aircraft_ID IN\n  SELECT\n  SELECT W.Aircraft\n  FROM match AS M WHERE M.Finning_Pilot_ID = '3'\n  FROM match",
      "error_type": "ExecutionError",
      "gold_result": "               Aircraft                    Description\n0  Bell 206B3 JetRanger  Turboshaft utility helicopter\n1         Robinson R-22       Light utility helicopter",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?",
      "gold_query": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"",
      "pred_query": "\nSELECT avg(Total_Passengers)\nFROM airport\nWHERE airport_aircraft(\"Robinson R-22\")",
      "error_type": "ExecutionError",
      "gold_result": "   avg(T3.Total_Passengers)\n0                34205887.0",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?",
      "gold_query": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"",
      "pred_query": "\nSELECT avg(Total_Passengers)\nFROM airport\nWHERE airport_aircraft('Robinson R-22') = T Woodward PRIMARY KEY (Total_Passengers)",
      "error_type": "ExecutionError",
      "gold_result": "   avg(T3.Total_Passengers)\n0                34205887.0",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "Please list the location and the winning aircraft name.",
      "gold_query": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
      "pred_query": "\nSELECT DISTINCT Labeled \"Location\"\nFROM `aircraft`\nWHERE \"Winning_Pilot\" NOT NULL",
      "error_type": "ExecutionError",
      "gold_result": "                          Location               Aircraft\n0          Mina' Zayid , Abu Dhabi          Robinson R-22\n1               Swan River , Perth          Robinson R-22\n2  Flamengo Beach , Rio de Janeiro   Bell 206B3 JetRanger\n3                Windsor , Ontario              Mil Mi-26\n4                    New York City         CH-47D Chinook\n5             EuroSpeedway Lausitz              Mil Mi-26\n6          River Danube , Budapest  CH-53E Super Stallion",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What is the location and name of the winning aircraft?",
      "gold_query": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
      "pred_query": "\nSELECT Description\nFROM aircraft\nWHERE Winning_Aircraft IS NOT NULL",
      "error_type": "ExecutionError",
      "gold_result": "                          Location               Aircraft\n0          Mina' Zayid , Abu Dhabi          Robinson R-22\n1               Swan River , Perth          Robinson R-22\n2  Flamengo Beach , Rio de Janeiro   Bell 206B3 JetRanger\n3                Windsor , Ontario              Mil Mi-26\n4                    New York City         CH-47D Chinook\n5             EuroSpeedway Lausitz              Mil Mi-26\n6          River Danube , Budapest  CH-53E Super Stallion",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "List the name of the aircraft that has been named winning aircraft the most number of times.",
      "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
      "pred_query": "\nSELECT Aircraft\nFROM aircraft\nGROUP BY Aircraft\nORDER BY COUNT(*) DESC\nLIMIT 1",
      "error_type": "Mismatch",
      "gold_result": " Aircraft\nMil Mi-26",
      "pred_result": "     Aircraft\nRobinson R-22"
    },
    {
      "db_id": "aircraft",
      "question": "What is the name of the aircraft that has won an award the most?",
      "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
      "pred_query": "\nSELECT Aircraft\nFROM aircraft\nGROUP BY Aircraft\nORDER BY COUNT(*) DESC\nLIMIT 1",
      "error_type": "Mismatch",
      "gold_result": " Aircraft\nMil Mi-26",
      "pred_result": "     Aircraft\nRobinson R-22"
    },
    {
      "db_id": "aircraft",
      "question": "List the names of aircrafts and the number of times it won matches.",
      "gold_query": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",
      "pred_query": "\nSELECT Aircraft\nFROM aircraft\nJOIN MATCH ON aircraft.Aircraft_ID WITH GROUPS\nORDER BY COUNT(*)\nFROM match",
      "error_type": "ExecutionError",
      "gold_result": "                Aircraft  COUNT(*)\n0          Robinson R-22         2\n1   Bell 206B3 JetRanger         1\n2         CH-47D Chinook         1\n3              Mil Mi-26         2\n4  CH-53E Super Stallion         1",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "For each aircraft that has won an award, what is its name and how many time has it won?",
      "gold_query": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",
      "pred_query": "\nSELECT Name,\n       COUNT(Distinctawin)\nFROM aircraft\nWHERE aircraft.Aircraft_ID NOT IN\n    (SELECT A.Aircraft_ID\n     FROM match\n     WHERE match.Winning_Aircraft NOT IN\n         (SELECT airport.aircraft\n          FROM airport\n          WHERE airport.Airport_Name LIKE ' %))",
      "error_type": "ExecutionError",
      "gold_result": "                Aircraft  COUNT(*)\n0          Robinson R-22         2\n1   Bell 206B3 JetRanger         1\n2         CH-47D Chinook         1\n3              Mil Mi-26         2\n4  CH-53E Super Stallion         1",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "List the names of aircrafts and that won matches at least twice.",
      "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
      "pred_query": "\nSELECT Aircraft\nFROM aircraft\nWHERE Aircraft_ID NOT NULL",
      "error_type": "Mismatch",
      "gold_result": "     Aircraft\nRobinson R-22\n    Mil Mi-26",
      "pred_result": "             Aircraft\n        Robinson R-22\n Bell 206B3 JetRanger\n       CH-47D Chinook\n            Mil Mi-26\nCH-53E Super Stallion"
    },
    {
      "db_id": "aircraft",
      "question": "What are the names of all aircrafts that have won a match at least twice?",
      "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
      "pred_query": "\nSELECT Aircraft\nFROM aircraft\nWHERE Aircraft_ID NOT IN\n    (SELECT Aircraft_ID\n     FROM aircraft\n     WHERE Description LIKE '%WING%'\n       OR Aircraft_ID LIKE '%WING%')",
      "error_type": "Mismatch",
      "gold_result": "     Aircraft\nRobinson R-22\n    Mil Mi-26",
      "pred_result": "             Aircraft\n        Robinson R-22\n Bell 206B3 JetRanger\n       CH-47D Chinook\n            Mil Mi-26\nCH-53E Super Stallion"
    },
    {
      "db_id": "aircraft",
      "question": "List the names of aircrafts and that did not win any match.",
      "gold_query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
      "pred_query": "\nSELECT Aircraft\nFROM aircraft\nWHERE pilot_id NOT IN\n    (SELECT Winning_Pilot\n     FROM match)",
      "error_type": "ExecutionError",
      "gold_result": "Empty DataFrame\nColumns: [Aircraft]\nIndex: []",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the names of all aicrafts that have never won any match?",
      "gold_query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
      "pred_query": "\nSELECT Aircraft\nFROM aircraft\nWHERE Aircraft_ID NOT IN (\n  SELECT Winning_Aircraft\n  FROM match WHERE Date LIKE '% won%'",
      "error_type": "ExecutionError",
      "gold_result": "Empty DataFrame\nColumns: [Aircraft]\nIndex: []",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"",
      "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
      "pred_query": "\nSELECT Aircraft\nFROM aircraft\nWHERE Aircraft_ID IS NOT NULL",
      "error_type": "Mismatch",
      "gold_result": "Empty DataFrame\nColumns: [Aircraft]\nIndex: []",
      "pred_result": "             Aircraft\n        Robinson R-22\n Bell 206B3 JetRanger\n       CH-47D Chinook\n            Mil Mi-26\nCH-53E Super Stallion"
    },
    {
      "db_id": "aircraft",
      "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?",
      "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
      "pred_query": "\nSELECT A.Aircraft\nFROM aircraft AS A\nWHERE A.Aircraft_ID IN (\n  SELECT A.Aircraft_ID\n  FROM airport AS i1\n  JOIN airport_aircraft AS a1 ON A.Aircraft_ID IN\n    (SELECT DISTINCT A.Aircraft_ID\n     FROM airport_aircraft AS ai1\n     JOIN airport AS i2 ON i2.Airport_ID = ai1.Aircraft_ID\n     WHERE i2.Airport_Name LIKE '% Heathrow%'\n       AND i2.Airport_Name LIKE '% Gatwick%')\n  FROM airport AS i1",
      "error_type": "ExecutionError",
      "gold_result": "Empty DataFrame\nColumns: [Aircraft]\nIndex: []",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "Show all information on the airport that has the largest number of international passengers.",
      "gold_query": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1",
      "pred_query": "\nSELECT Name\nFROM airport\nWHERE INTMAX(International_Passengers) IS MAX",
      "error_type": "ExecutionError",
      "gold_result": "   Airport_ID     Airport_Name  Total_Passengers %_Change_2007  \\\n0           1  London Heathrow        67054745.0          1.5%   \n\n   International_Passengers  Domestic_Passengers  Transit_Passengers  \\\n0                61344438.0            5562516.0            147791.0   \n\n   Aircraft_Movements  Freight_Metric_Tonnes  \n0            478693.0              1397054.0  ",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What is all the information on the airport with the largest number of international passengers?",
      "gold_query": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1",
      "pred_query": "\nSELECT *\nFROM airport\nWHERE INTMAX(International_Passengers) > 100000",
      "error_type": "ExecutionError",
      "gold_result": "   Airport_ID     Airport_Name  Total_Passengers %_Change_2007  \\\n0           1  London Heathrow        67054745.0          1.5%   \n\n   International_Passengers  Domestic_Passengers  Transit_Passengers  \\\n0                61344438.0            5562516.0            147791.0   \n\n   Aircraft_Movements  Freight_Metric_Tonnes  \n0            478693.0              1397054.0  ",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.",
      "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
      "pred_query": "\nSELECT Name,\n       Age\nFROM pilot\nWHERE Age < 30\nGROUP BY Name\nORDER BY Count(*) DESC\nLIMIT 1",
      "error_type": "Mismatch",
      "gold_result": "         Name  Age\nAyana Spencer   25",
      "pred_result": "                 Name  Age\nProf. Zackery Collins   23"
    },
    {
      "db_id": "aircraft",
      "question": "What is the name and age of the pilot younger than 30 who has won the most number of times?",
      "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
      "pred_query": "\nSELECT Name,\n       Age\nFROM pilot\nWHERE Age < 30\nGROUP BY Name\nORDER BY Count(*) DESC\nLIMIT 1",
      "error_type": "Mismatch",
      "gold_result": "         Name  Age\nAyana Spencer   25",
      "pred_result": "                 Name  Age\nProf. Zackery Collins   23"
    },
    {
      "db_id": "aircraft",
      "question": "what is the name and age of the youngest winning pilot?",
      "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
      "pred_query": "\nSELECT Name,\n       Age\nFROM pilot WHEREå¹´é¾ < (\nSELECT MAX(å¹´é¾)\nFROM pilot\nWHERE Winning_Pilot NOT NULL",
      "error_type": "ExecutionError",
      "gold_result": "                   Name  Age\n0  Katheryn Gorczany IV   20",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "How old is the youngest winning pilot and what is their name?",
      "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
      "pred_query": "\nSELECT T1.Age,\n       T1.Name\nFROM pilot AS T1\nWHERE T2.Aircraft_ID = 3\n  AND T2.Pilot_ID = 3\nORDER BY T1.Age IN\n  (SELECT MIN(Age)\n   FROM pilot)\nLIMIT 1",
      "error_type": "ExecutionError",
      "gold_result": "                   Name  Age\n0  Katheryn Gorczany IV   20",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "find the name of pilots who did not win the matches held in the country of Australia.",
      "gold_query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
      "pred_query": "\nSELECT Name\nFROM pilot\nWHERE Winning_Pilot NOT IN (\n  SELECT Winning_Pilot\n  FROM match WHERE Country LIKE '% Australia'",
      "error_type": "ExecutionError",
      "gold_result": "                         Name\n0       Prof. Zackery Collins\n1        Katheryn Gorczany IV\n2   Mr. Cristian Halvorson II\n3            Ellen Ledner III\n4             Elisha Hickle V\n5          Dr. Jade Bradtke V\n6             Winnifred Boyle\n7              Della Lindgren\n8              Maxwell Graham\n9               Blaise Muller\n10             Baylee Steuber",
      "pred_result": "None"
    },
    {
      "db_id": "aircraft",
      "question": "What are the names of the pilots that have not won any matches in Australia?",
      "gold_query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
      "pred_query": "\nSELECT Name\nFROM pilot\nWHERE winning_aircraft NOT IN\n    (SELECT Winning_Aircraft\n     FROM match\n     WHERE date LIKE '% won'\n     ORDER BY Winning_Aircraft ASC)",
      "error_type": "ExecutionError",
      "gold_result": "                         Name\n0       Prof. Zackery Collins\n1        Katheryn Gorczany IV\n2   Mr. Cristian Halvorson II\n3            Ellen Ledner III\n4             Elisha Hickle V\n5          Dr. Jade Bradtke V\n6             Winnifred Boyle\n7              Della Lindgren\n8              Maxwell Graham\n9               Blaise Muller\n10             Baylee Steuber",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "How many architects are female?",
      "gold_query": "SELECT count(*) FROM architect WHERE gender  =  'female'",
      "pred_query": "\nSELECT count(*)\nFROM architect\nWHERE gender = 'F'",
      "error_type": "Mismatch",
      "gold_result": " count(*)\n        1",
      "pred_result": " count(*)\n        0"
    },
    {
      "db_id": "architecture",
      "question": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
      "gold_query": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name",
      "pred_query": "\nSELECT name,\n       nationality,\n       id\nFROM architect\nORDER BY name ASC",
      "error_type": "Mismatch",
      "gold_result": "              name      nationality id\n       Frank Gehry         Canadian  2\nFrank Lloyd Wright         American  1\n      Le Corbusier    Swiss, French  5\n Mies Van Der Rohe German, American  4",
      "pred_result": "              name      nationality id\n       Frank Gehry         Canadian  2\nFrank Lloyd Wright         American  1\n      Le Corbusier    Swiss, French  5\n Mies Van Der Rohe German, American  4\n        Zaha Hadid   Iraqi, British  3"
    },
    {
      "db_id": "architecture",
      "question": "What is the maximum length in meters for the bridges and what are the architects' names?",
      "gold_query": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id",
      "pred_query": "\nSELECT MAX(length_meters)\nFROM bridge\nWHERE name = \"Architect A\"\"",
      "error_type": "ExecutionError",
      "gold_result": "   max(T1.length_meters)                name\n0                  121.0  Frank Lloyd Wright",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "What are the distinct names and nationalities of the architects who have ever built a mill?",
      "gold_query": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id",
      "pred_query": "\nSELECT DISTINCT n.name,\n                n.nationality\nFROM architect AS a\nJOIN mill AS m ON a.id = m.architect_id\nGROUP BY n.name,\n         n.nationality",
      "error_type": "ExecutionError",
      "gold_result": "                 name       nationality\n0  Frank Lloyd Wright          American\n1         Frank Gehry          Canadian\n2          Zaha Hadid    Iraqi, British\n3   Mies Van Der Rohe  German, American",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "What are the distinct types of mills that are built by American or Canadian architects?",
      "gold_query": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'",
      "pred_query": "\nSELECT DISTINCT t1.name\nFROM mill AS t2\nJOIN architect AS t3 ON t2.architect_id = t3.id\nWHERE t3.nationality IN ('American',\n                         'Canadian')",
      "error_type": "ExecutionError",
      "gold_result": "          type\n0  Grondzeiler",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "What are the ids and names of the architects who built at least 3 bridges ?",
      "gold_query": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3",
      "pred_query": "\nSELECT id,\n       name\nFROM architect\nWHERE archict_id NOT NULL\n  AND COUNT(*) >= 3",
      "error_type": "ExecutionError",
      "gold_result": "  id                name\n0  1  Frank Lloyd Wright\n1  2         Frank Gehry\n2  5        Le Corbusier",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "What is the id, name and nationality of the architect who built most mills?",
      "gold_query": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
      "pred_query": "\nSELECT T1.id,\n       T1.name,\n       T1.nationality\nFROM bridge AS T1\nJOIN mill AS T2 ON T1.id = T2.architect_id\nORDER BY T2.id DESC\nLIMIT 1",
      "error_type": "ExecutionError",
      "gold_result": "  id                name nationality\n0  1  Frank Lloyd Wright    American",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "What are the ids, names and genders of the architects who built two bridges or one mill?",
      "gold_query": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1",
      "pred_query": "\nSELECT id,\n       name,\n       gender\nFROM architect\nWHERE architect_id NOT IN (1,\n                           3)\nORDER BY name ASC\nLIMIT 10",
      "error_type": "ExecutionError",
      "gold_result": "  id               name  gender\n0  2        Frank Gehry    male\n1  3         Zaha Hadid  female\n2  4  Mies Van Der Rohe    male",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
      "gold_query": "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'",
      "pred_query": "\nSELECT location\nFROM bridge\nWHERE architect_id LIKE '%Kolob Arch% OR '%Rainbow Bridge%",
      "error_type": "ExecutionError",
      "gold_result": "                                            location\n0                    Zion National Park , Utah , USA\n1  Glen Canyon National Recreation Area , Utah , USA",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "Which of the mill names contains the french word 'Moulin'?",
      "gold_query": "SELECT name FROM mill WHERE name LIKE '%Moulin%'",
      "pred_query": "\nSELECT L names\nFROM mill\nWHERE mill names LIKE '%Moulin%'",
      "error_type": "ExecutionError",
      "gold_result": "                name\n0    Moulin Bertrand\n1    Moulin de Fexhe\n2  Moulin de Momalle\n3  Moulin du ChÃ¢teau\n4  Moulin de Pousset",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?",
      "gold_query": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80",
      "pred_query": "\nSELECT DISTINCT name\nFROM bridge\nWHERE architect_id\n  FROM mill",
      "error_type": "ExecutionError",
      "gold_result": "                name\n0     Le Vieux Molen\n1    Moulin Bertrand\n2    Moulin de Fexhe\n3  Moulin de Momalle",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "What is the most common mill type, and how many are there?",
      "gold_query": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
      "pred_query": "\nSELECT TOP 2 (%) AS Most Common\nFROM mill\nGROUP BY mill\nWHERE count(mill) > 2",
      "error_type": "ExecutionError",
      "gold_result": "          type  count(*)\n0  Grondzeiler         5",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "How many architects haven't built a mill before year 1850?",
      "gold_query": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );",
      "pred_query": "\nSELECT count(*)\nFROM architect\nWHERE architect_id NOT EXISTS \"mill\" WHERE milllocation LIKE '% doesn't build%'",
      "error_type": "ExecutionError",
      "gold_result": "   count(*)\n0         2",
      "pred_result": "None"
    },
    {
      "db_id": "architecture",
      "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
      "gold_query": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet",
      "pred_query": "\nSELECT name\nFROM bridge\nWHERE architect_id LIKE '% American '%\nORDER BY length_feet",
      "error_type": "ExecutionError",
      "gold_result": "                           name\n0   Hazarchishma Natural Bridge\n1                Jiangzhou Arch\n2                Shipton's Arch\n3  Xian Ren Qiao (Fairy Bridge)",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Show all the locations where no cinema has capacity over 800.",
      "gold_query": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800",
      "pred_query": "\nSELECT DISTINCT Location\nFROM cinema\nWHERE cinema capacities are NOT OVER 800",
      "error_type": "ExecutionError",
      "gold_result": "           Location\n0       County Cork\n1     County Dublin\n2      County Laois\n3      County Louth\n4  County Tipperary",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
      "gold_query": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011",
      "pred_query": "\nSELECT DISTINCT Location\nFROM cinema\nWHERE (OPENING_YEAR = 2010\n       AND OPENING_YEAR = 2011)",
      "error_type": "ExecutionError",
      "gold_result": "           Location\n0  County Tipperary",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Count the number of cinemas.",
      "gold_query": "SELECT count(*) FROM cinema",
      "pred_query": "\nSELECT COUNT(*)\nFROM schedule",
      "error_type": "Mismatch",
      "gold_result": " count(*)\n       10",
      "pred_result": " COUNT(*)\n        7"
    },
    {
      "db_id": "cinema",
      "question": "Show name, opening year, and capacity for each cinema.",
      "gold_query": "SELECT name ,  openning_year ,  capacity FROM cinema",
      "pred_query": "\nSELECT Name,\n       Openning_year,\n       Capacity\nFROM cinema\nWHERE cinema.Cinema_ID NOT IN\n    (SELECT Cinema_ID\n     FROM cinema);",
      "error_type": "Mismatch",
      "gold_result": "        Name  Openning_year  Capacity\n     Codling           2010      1100\n Carrowleagh           2012       368\nDublin Array           2015       364\n    Glenmore           2009       305\n    Glenough           2010       325\n   Gortahile           2010       208\nGrouse Lodge           2011       203\n  Moneypoint           2011       225\nMount Callan           2011       908\n       Oriel           2013       330",
      "pred_result": "Empty DataFrame\nColumns: [Name, Openning_year, Capacity]\nIndex: []"
    },
    {
      "db_id": "cinema",
      "question": "Show the cinema name and location for cinemas with capacity above average.",
      "gold_query": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)",
      "pred_query": "\nSELECT Name,\n       Location\nFROM cinema\nWHERE capacity >\n    (SELECT MAX(capacity)\n     FROM schedule)",
      "error_type": "ExecutionError",
      "gold_result": "           Name        Location\n0       Codling  County Wicklow\n1  Mount Callan    County Clare",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "What are all the locations with a cinema?",
      "gold_query": "SELECT DISTINCT LOCATION FROM cinema",
      "pred_query": "\nSELECT DISTINCT LOCATION\nFROM cinema\nWHERE cinema.name NOT IN (\n  SELECT film.name\n  FROM film WHERE film_id IN\n    (SELECT film.id\n     FROM schedule\n     WHERE schedule.cinema_id = 111111)",
      "error_type": "ExecutionError",
      "gold_result": "           Location\n0    County Wicklow\n1       County Cork\n2     County Dublin\n3      County Clare\n4  County Tipperary\n5      County Laois\n6      County Louth",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Show all the cinema names and opening years in descending order of opening year.",
      "gold_query": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC",
      "pred_query": "\nSELECT Name,\nFROM cinema\nWHERE cinema Name DESC\nORDER BY Openning_year",
      "error_type": "ExecutionError",
      "gold_result": "           Name  Openning_year\n0  Dublin Array           2015\n1         Oriel           2013\n2   Carrowleagh           2012\n3  Grouse Lodge           2011\n4    Moneypoint           2011\n5  Mount Callan           2011\n6       Codling           2010\n7      Glenough           2010\n8     Gortahile           2010\n9      Glenmore           2009",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "What are the name and location of the cinema with the largest capacity?",
      "gold_query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
      "pred_query": "\nSELECT Name,\n       Location\nFROM cinema\nWHERE capacity MAX",
      "error_type": "ExecutionError",
      "gold_result": "      Name        Location\n0  Codling  County Wicklow",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Show each location and the number of cinemas there.",
      "gold_query": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION",
      "pred_query": "\nSELECT LOCATION,\n       COUNT(*)\nFROM cinema\nGROUP BY LOCATION",
      "error_type": "Mismatch",
      "gold_result": "        Location  count(*)\n    County Clare         3\n     County Cork         1\n   County Dublin         1\n    County Laois         1\n    County Louth         1\nCounty Tipperary         2\n  County Wicklow         1",
      "pred_result": "        Location  COUNT(*)\n    County Clare         3\n     County Cork         1\n   County Dublin         1\n    County Laois         1\n    County Louth         1\nCounty Tipperary         2\n  County Wicklow         1"
    },
    {
      "db_id": "cinema",
      "question": "What is the location with the most cinemas opened in year 2010 or later?",
      "gold_query": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
      "pred_query": "\nSELECT LOCATION\nFROM cinema\nWHERE directed_by LIKE '%T%",
      "error_type": "ExecutionError",
      "gold_result": "           Location\n0  County Tipperary",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Show all the locations with at least two cinemas with capacity above 300.",
      "gold_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
      "pred_query": "\nSELECT LOCATION\nFROM cinema\nWHERE cinema directed by 'RIPER'\n  OR cinema directed by 'SHUTTLE'",
      "error_type": "ExecutionError",
      "gold_result": "       Location\n0  County Clare",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Which locations have 2 or more cinemas with capacity over 300?",
      "gold_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
      "pred_query": "\nSELECT DISTINCT LOCATION\nFROM cinema\nWHERE cinema directed by 'RIPETTA'\n  OR cinema directed by 'MANCIN'\n  OR cinema directed by 'GIOVANNE 1'",
      "error_type": "ExecutionError",
      "gold_result": "       Location\n0  County Clare",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Who are all the directors?",
      "gold_query": "SELECT DISTINCT directed_by FROM film",
      "pred_query": "\nSELECT DISTINCT D.title\nFROM film\nWHERE directed_by_id = D.directed_by\nORDER BY D.title ASC",
      "error_type": "ExecutionError",
      "gold_result": "              Directed_by\n0          Bill Schreiner\n1  Jesus Salvador TreviÃ±o",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "List all directors along with the number of films directed by each director.",
      "gold_query": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by",
      "pred_query": "\nSELECT Dir_name\nFROM film\nGROUP BY Dir_name\nORDER BY COUNT(*) DESC",
      "error_type": "ExecutionError",
      "gold_result": "              Directed_by  count(*)\n0          Bill Schreiner         4\n1  Jesus Salvador TreviÃ±o         1",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "What is total number of show times per dat for each cinema?",
      "gold_query": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id",
      "pred_query": "\nSELECT COUNT(*)\nFROM schedule\nWHERE cinema_id NOT NULL\n  FROM cinema",
      "error_type": "ExecutionError",
      "gold_result": "           Name  sum(T1.show_times_per_day)\n0       Codling                          10\n1   Carrowleagh                           5\n2     Gortahile                           4\n3  Mount Callan                           5\n4         Oriel                           5",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "What are the title and maximum price of each film?",
      "gold_query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
      "pred_query": "\nSELECT T1.title,\n       MAX(T2.price)\nFROM schedule AS T1\nJOIN film AS T2 ON T1.film_id = T2.film_id",
      "error_type": "ExecutionError",
      "gold_result": "                              Title  max(T1.price)\n0   The Case of the Mystery Weekend          15.99\n1       The Case of the Smart Dummy          12.99\n2          The Case: Off the Record           8.99\n3  The Case of the Bermuda Triangle           9.99\n4      The Case of the Piggy Banker          12.99",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Give me the title and highest price for each film.",
      "gold_query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
      "pred_query": "\nSELECT T2.title,\n       MAX(T1.price)\nFROM schedule AS T1\nJOIN film AS T2 ON T1.Film_ID = T2.Film_ID",
      "error_type": "Mismatch",
      "gold_result": "                           Title  max(T1.price)\n The Case of the Mystery Weekend          15.99\n     The Case of the Smart Dummy          12.99\n        The Case: Off the Record           8.99\nThe Case of the Bermuda Triangle           9.99\n    The Case of the Piggy Banker          12.99",
      "pred_result": "                          Title  MAX(T1.price)\nThe Case of the Mystery Weekend          15.99"
    },
    {
      "db_id": "cinema",
      "question": "Show cinema name, film title, date, and price for each record in schedule.",
      "gold_query": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id",
      "pred_query": "\nSELECT name,\n       title, date, price\nFROM cinema\nJOIN schedule ON cinema.cinema_id = schedule.Cinema_ID\nGROUP BY name\nORDER BY name",
      "error_type": "ExecutionError",
      "gold_result": "           Name                             Title     Date  Price\n0       Codling   The Case of the Mystery Weekend   21 May  12.99\n1       Codling       The Case of the Smart Dummy   21 May  12.99\n2       Codling          The Case: Off the Record   21 Jun   8.99\n3   Carrowleagh   The Case of the Mystery Weekend  11 July   9.99\n4     Gortahile      The Case of the Piggy Banker    2 Aug  12.99\n5  Mount Callan  The Case of the Bermuda Triangle   20 May   9.99\n6         Oriel   The Case of the Mystery Weekend   19 May  15.99",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Show director with the largest number of show times in total.",
      "gold_query": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
      "pred_query": "\nSELECT T2.directed_by\nFROM schedule AS T1\nJOIN film AS T2 ON T1.Film_ID = T2.Film_ID\nGROUP BY T1.Film_ID\nORDER BY COUNT(T2) DESC\nLIMIT 1",
      "error_type": "ExecutionError",
      "gold_result": "      Directed_by\n0  Bill Schreiner",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "Find the locations that have more than one movie theater with capacity above 300.",
      "gold_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
      "pred_query": "\nSELECT LOCATION\nFROM cinema\nWHERE cinema-location LIKE '%Tues% OR %Thurs% OR %Fri%'",
      "error_type": "ExecutionError",
      "gold_result": "       Location\n0  County Clare",
      "pred_result": "None"
    },
    {
      "db_id": "cinema",
      "question": "In which locations are there more than one movie theater with capacity above 300?",
      "gold_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
      "pred_query": "\nSELECT DISTINCT L LOCATION\nFROM cinema AS T1\nJOIN schedule AS T2 ON T1.Cinema_ID = T2.Cinema_ID\nJOIN film AS T3 ON T2.Film_ID = T3.Film_ID\nWHERE T3.Rank_in_series = 1000\nORDER BY T1.Location</SQL>",
      "error_type": "ExecutionError",
      "gold_result": "       Location\n0  County Clare",
      "pred_result": "None"
    }
  ]
}