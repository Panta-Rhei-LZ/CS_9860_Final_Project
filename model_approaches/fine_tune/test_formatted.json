[
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]How many heads of the departments are older than 56 ?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE IF NOT EXISTS \"department\" (\n\"Department_ID\" int,\n\"Name\" text,\n\"Creation\" text,\n\"Ranking\" int,\n\"Budget_in_Billions\" real,\n\"Num_Employees\" real,\nPRIMARY KEY (\"Department_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"head\" (\n\"head_ID\" int,\n\"name\" text,\n\"born_state\" text,\n\"age\" real,\nPRIMARY KEY (\"head_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"management\" (\n\"department_ID\" int,\n\"head_ID\" int,\n\"temporary_acting\" text,\nPRIMARY KEY (\"Department_ID\",\"head_ID\"),\nFOREIGN KEY (\"Department_ID\") REFERENCES `department`(\"Department_ID\"),\nFOREIGN KEY (\"head_ID\") REFERENCES `head`(\"head_ID\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]How many heads of the departments are older than 56 ?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT count(*) FROM head WHERE age  >  56 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List the name, born state and age of the heads of departments ordered by age.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE IF NOT EXISTS \"department\" (\n\"Department_ID\" int,\n\"Name\" text,\n\"Creation\" text,\n\"Ranking\" int,\n\"Budget_in_Billions\" real,\n\"Num_Employees\" real,\nPRIMARY KEY (\"Department_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"head\" (\n\"head_ID\" int,\n\"name\" text,\n\"born_state\" text,\n\"age\" real,\nPRIMARY KEY (\"head_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"management\" (\n\"department_ID\" int,\n\"head_ID\" int,\n\"temporary_acting\" text,\nPRIMARY KEY (\"Department_ID\",\"head_ID\"),\nFOREIGN KEY (\"Department_ID\") REFERENCES `department`(\"Department_ID\"),\nFOREIGN KEY (\"head_ID\") REFERENCES `head`(\"head_ID\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List the name, born state and age of the heads of departments ordered by age.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT name ,  born_state ,  age FROM head ORDER BY age [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the names of the heads who are born outside the California state?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE IF NOT EXISTS \"department\" (\n\"Department_ID\" int,\n\"Name\" text,\n\"Creation\" text,\n\"Ranking\" int,\n\"Budget_in_Billions\" real,\n\"Num_Employees\" real,\nPRIMARY KEY (\"Department_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"head\" (\n\"head_ID\" int,\n\"name\" text,\n\"born_state\" text,\n\"age\" real,\nPRIMARY KEY (\"head_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"management\" (\n\"department_ID\" int,\n\"head_ID\" int,\n\"temporary_acting\" text,\nPRIMARY KEY (\"Department_ID\",\"head_ID\"),\nFOREIGN KEY (\"Department_ID\") REFERENCES `department`(\"Department_ID\"),\nFOREIGN KEY (\"head_ID\") REFERENCES `head`(\"head_ID\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the names of the heads who are born outside the California state?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT name FROM head WHERE born_state != 'California' [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Which department has more than 1 head at a time? List the id, name and the number of heads.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE IF NOT EXISTS \"department\" (\n\"Department_ID\" int,\n\"Name\" text,\n\"Creation\" text,\n\"Ranking\" int,\n\"Budget_in_Billions\" real,\n\"Num_Employees\" real,\nPRIMARY KEY (\"Department_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"head\" (\n\"head_ID\" int,\n\"name\" text,\n\"born_state\" text,\n\"age\" real,\nPRIMARY KEY (\"head_ID\")\n);\n\nCREATE TABLE IF NOT EXISTS \"management\" (\n\"department_ID\" int,\n\"head_ID\" int,\n\"temporary_acting\" text,\nPRIMARY KEY (\"Department_ID\",\"head_ID\"),\nFOREIGN KEY (\"Department_ID\") REFERENCES `department`(\"Department_ID\"),\nFOREIGN KEY (\"head_ID\") REFERENCES `head`(\"head_ID\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Which department has more than 1 head at a time? List the id, name and the number of heads.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Give the years and official names of the cities of each competition.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Give the years and official names of the cities of each competition.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List the official name and status of the city with the largest population.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List the official name and status of the city with the largest population.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the official names of cities, ordered descending by population?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the official names of cities, ordered descending by population?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Official_Name FROM city ORDER BY Population DESC [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Please show the different statuses of cities and the average population of cities with each status.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Please show the different statuses of cities and the average population of cities with each status.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Status ,  avg(Population) FROM city GROUP BY Status [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the hosts of competitions whose theme is not \"Aliens\"?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the hosts of competitions whose theme is not \"Aliens\"?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens' [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]How many different statuses do cities have?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]How many different statuses do cities have?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT count(DISTINCT Status) FROM city [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the official names of cities that have population over 1500 or less than 500?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the official names of cities that have population over 1500 or less than 500?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the statuses and average populations of each city?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the statuses and average populations of each city?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Status ,  avg(Population) FROM city GROUP BY Status [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the census rankings of cities that do not have the status \"Village\"?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the census rankings of cities that do not have the status \"Village\"?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\" [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the themes of farm competitions sorted by year in ascending order?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);\n\nCREATE TABLE \"farm_competition\" (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);\n\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the themes of farm competitions sorted by year in ascending order?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is all the information on the airport with the largest number of international passengers?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is all the information on the airport with the largest number of international passengers?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the location and name of the winning aircraft?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the location and name of the winning aircraft?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List the name of the aircraft that has been named winning aircraft the most number of times.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List the name of the aircraft that has been named winning aircraft the most number of times.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]find the name of pilots who did not win the matches held in the country of Australia.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]find the name of pilots who did not win the matches held in the country of Australia.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia') [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the names of all aicrafts that have never won any match?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the names of all aicrafts that have never won any match?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH) [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the name and age of the pilot younger than 30 who has won the most number of times?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the name and age of the pilot younger than 30 who has won the most number of times?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the average number of international passengers of all airports?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the average number of international passengers of all airports?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT avg(International_Passengers) FROM airport [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the name of pilots aged 25 or older?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the name of pilots aged 25 or older?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Name FROM pilot WHERE Age  >=  25 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the total number of Domestic Passengers of airports that contain the word \"London\".[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the total number of Domestic Passengers of airports that contain the word \"London\".[/QUESTION]\n[SQL]\n",
    "completion": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\" [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the descriptions for the aircrafts?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the descriptions for the aircrafts?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT Description FROM aircraft [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the number of international and domestic passengers of the airport named London \"Heathrow\"?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the number of international and domestic passengers of the airport named London \"Heathrow\"?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\" [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Please list the location and the winning aircraft name.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE `pilot` (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);\n\nCREATE TABLE `aircraft` (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);\n\nCREATE TABLE `match` (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);\n\nCREATE TABLE `airport` (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);\n\nCREATE TABLE `airport_aircraft` (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Please list the location and the winning aircraft name.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]How many architects are female?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"architect\" (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);\n\nCREATE TABLE \"bridge\" (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\nCREATE TABLE \"mill\" (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]How many architects are female?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT count(*) FROM architect WHERE gender  =  'female' [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]List the name, nationality and id of all male architects ordered by their names lexicographically.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"architect\" (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);\n\nCREATE TABLE \"bridge\" (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\nCREATE TABLE \"mill\" (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]List the name, nationality and id of all male architects ordered by their names lexicographically.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the distinct names and nationalities of the architects who have ever built a mill?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"architect\" (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);\n\nCREATE TABLE \"bridge\" (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\nCREATE TABLE \"mill\" (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the distinct names and nationalities of the architects who have ever built a mill?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]How many architects haven't built a mill before year 1850?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"architect\" (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);\n\nCREATE TABLE \"bridge\" (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\nCREATE TABLE \"mill\" (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]How many architects haven't built a mill before year 1850?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 ); [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"architect\" (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);\n\nCREATE TABLE \"bridge\" (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\nCREATE TABLE \"mill\" (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge' [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]In which locations are there more than one movie theater with capacity above 300?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]In which locations are there more than one movie theater with capacity above 300?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show the title and director for all films.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show the title and director for all films.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT title ,  directed_by FROM film [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show cinema name, film title, date, and price for each record in schedule.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show cinema name, film title, date, and price for each record in schedule.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show all directors.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show all directors.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT DISTINCT directed_by FROM film [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]Show all the cinema names and opening years in descending order of opening year.[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]Show all the cinema names and opening years in descending order of opening year.[/QUESTION]\n[SQL]\n",
    "completion": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the name and location of the cinema with the largest capacity?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the name and location of the cinema with the largest capacity?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1 [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]How many films have the word 'Dummy' in their titles?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]How many films have the word 'Dummy' in their titles?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\" [/SQL]"
  },
  {
    "prompt": "\n### Task\nGenerate a SQLite query to answer [QUESTION]What are the title and director of the films without any schedule?[/QUESTION]\n\n### Instructions\n- If you cannot answer the question with the available database schema, return 'I do not know'\n- Pay close attention to the given database schema, note on how they can join together\n- You do not need to generate your thought process but just the answer\n- Your answer should end with '[/SQL]'\n\nCREATE TABLE \"film\" (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);\n\nCREATE TABLE \"cinema\" (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));\n\nCREATE TABLE \"schedule\" (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);\n\n### Answer\nGiven the database schema, here is the SQLite query that answers [QUESTION]What are the title and director of the films without any schedule?[/QUESTION]\n[SQL]\n",
    "completion": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule) [/SQL]"
  }
]