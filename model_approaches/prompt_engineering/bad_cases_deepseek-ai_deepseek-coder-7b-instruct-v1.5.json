[
  {
    "db_id": "department_management",
    "question": "How many heads of the departments are older than 56 ?",
    "gold_query": "SELECT count(*) FROM head WHERE age  >  56",
    "pred_query": "\nSELECT COUNT(*)\nFROM head\nWHERE age > 56;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        5",
    "pred_result": " COUNT(*)\n        5"
  },
  {
    "db_id": "department_management",
    "question": "List the name, born state and age of the heads of departments ordered by age.",
    "gold_query": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
    "pred_query": "\nSELECT h.name,\n       h.born_state,\n       h.age\nFROM head h\nJOIN management m ON h.head_ID = m.head_ID\nJOIN department d ON m.department_ID = d.Department_ID\nORDER BY h.age;",
    "error_type": "Mismatch",
    "gold_result": "              name  born_state  age\nPádraig Harrington Connecticut 43.0\n      Stewart Cink     Florida 50.0\n       Dudley Hart  California 52.0\n      Jeff Maggert    Delaware 53.0\n        Nick Faldo  California 56.0\n       Tiger Woods     Alabama 67.0\n  Franklin Langham Connecticut 67.0\n     Sergio García  California 68.0\n        K. J. Choi     Alabama 69.0\n     Billy Mayfair  California 69.0",
    "pred_result": "            name  born_state  age\n     Dudley Hart  California 52.0\n    Jeff Maggert    Delaware 53.0\nFranklin Langham Connecticut 67.0\n   Billy Mayfair  California 69.0\n      K. J. Choi     Alabama 69.0"
  },
  {
    "db_id": "department_management",
    "question": "List the creation year, name and budget of each department.",
    "gold_query": "SELECT creation ,  name ,  budget_in_billions FROM department",
    "pred_query": "\nSELECT strftime('%Y', Creation) AS Creation_Year,\n       Name,\n       Budget_in_Billions\nFROM department;",
    "error_type": "Mismatch",
    "gold_result": "Creation                          Name  Budget_in_Billions\n    1789                         State                9.96\n    1789                      Treasury               11.10\n    1947                       Defense              439.30\n    1870                       Justice               23.40\n    1849                      Interior               10.70\n    1889                   Agriculture               77.60\n    1903                      Commerce                6.20\n    1913                         Labor               59.70\n    1953     Health and Human Services              543.20\n    1965 Housing and Urban Development               46.20\n    1966                Transportation               58.00\n    1977                        Energy               21.50\n    1979                     Education               62.80\n    1989              Veterans Affairs               73.20\n    2002             Homeland Security               44.60",
    "pred_result": "Creation_Year                          Name  Budget_in_Billions\n        -4708                         State                9.96\n        -4708                      Treasury               11.10\n        -4707                       Defense              439.30\n        -4707                       Justice               23.40\n        -4708                      Interior               10.70\n        -4707                   Agriculture               77.60\n        -4707                      Commerce                6.20\n        -4707                         Labor               59.70\n        -4707     Health and Human Services              543.20\n        -4707 Housing and Urban Development               46.20\n        -4707                Transportation               58.00\n        -4707                        Energy               21.50\n        -4707                     Education               62.80\n        -4707              Veterans Affairs               73.20\n        -4707             Homeland Security               44.60"
  },
  {
    "db_id": "department_management",
    "question": "What are the maximum and minimum budget of the departments?",
    "gold_query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
    "pred_query": "\nSELECT MAX(Budget_in_Billions) AS Maximum_Budget,\n       MIN(Budget_in_Billions) AS Minimum_Budget\nFROM department;",
    "error_type": "Mismatch",
    "gold_result": " max(budget_in_billions)  min(budget_in_billions)\n                   543.2                      6.2",
    "pred_result": " Maximum_Budget  Minimum_Budget\n          543.2             6.2"
  },
  {
    "db_id": "department_management",
    "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
    "gold_query": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
    "pred_query": "\nSELECT AVG(Num_Employees)\nFROM department\nWHERE Ranking BETWEEN 10 AND 15;",
    "error_type": "Mismatch",
    "gold_result": " avg(num_employees)\n      105468.166667",
    "pred_result": " AVG(Num_Employees)\n      105468.166667"
  },
  {
    "db_id": "department_management",
    "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
    "gold_query": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
    "pred_query": "\nSELECT DISTINCT strftime('%Y', department.Creation) AS Creation_Year\nFROM department\nJOIN management ON department.Department_ID = management.department_ID\nJOIN head ON management.head_ID = head.head_ID\nWHERE head.born_state = 'Alabama'\n  AND head.name = 'Secretary';",
    "error_type": "Mismatch",
    "gold_result": "Creation\n    1903",
    "pred_result": "Empty DataFrame\nColumns: [Creation_Year]\nIndex: []"
  },
  {
    "db_id": "department_management",
    "question": "In which year were most departments established?",
    "gold_query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
    "pred_query": "\nSELECT SUBSTR(Creation, 1, 4) as Year,\n       COUNT(*) as NumDepartments\nFROM department\nGROUP BY Year\nORDER BY NumDepartments DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": "Creation\n    1789",
    "pred_result": "Year  NumDepartments\n1789               2"
  },
  {
    "db_id": "department_management",
    "question": "How many acting statuses are there?",
    "gold_query": "SELECT count(DISTINCT temporary_acting) FROM management",
    "pred_query": "\nSELECT COUNT(DISTINCT \"temporary_acting\")\nFROM \"management\";",
    "error_type": "Mismatch",
    "gold_result": " count(DISTINCT temporary_acting)\n                                2",
    "pred_result": " COUNT(DISTINCT \"temporary_acting\")\n                                  2"
  },
  {
    "db_id": "department_management",
    "question": "How many departments are led by heads who are not mentioned?",
    "gold_query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
    "pred_query": "\nSELECT COUNT(DISTINCT d.Department_ID)\nFROM department d\nLEFT JOIN management m ON d.Department_ID = m.department_ID\nWHERE m.head_ID IS NULL;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n       11",
    "pred_result": " COUNT(DISTINCT d.Department_ID)\n                              11"
  },
  {
    "db_id": "department_management",
    "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
    "gold_query": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'",
    "pred_query": "\nSELECT h.born_state\nFROM head h\nJOIN management m1 ON h.head_ID = m1.head_ID\nJOIN department d1 ON m1.department_ID = d1.Department_ID\nJOIN management m2 ON h.head_ID = m2.head_ID\nJOIN department d2 ON m2.department_ID = d2.Department_ID\nWHERE d1.Name = 'Treasury'\n  AND d2.Name = 'Homeland Security';",
    "error_type": "Mismatch",
    "gold_result": "born_state\nCalifornia",
    "pred_result": "Empty DataFrame\nColumns: [born_state]\nIndex: []"
  },
  {
    "db_id": "department_management",
    "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
    "gold_query": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",
    "pred_query": "\nSELECT d.Department_ID,\n       d.Name,\n       COUNT(m.head_ID) as Number_of_heads\nFROM department d\nJOIN management m ON d.Department_ID = m.department_ID\nGROUP BY d.Department_ID,\n         d.Name\nHAVING COUNT(m.head_ID) > 1;",
    "error_type": "Mismatch",
    "gold_result": " Department_ID     Name  count(*)\n             2 Treasury         2",
    "pred_result": " Department_ID     Name  Number_of_heads\n             2 Treasury                2"
  },
  {
    "db_id": "farm",
    "question": "How many farms are there?",
    "gold_query": "SELECT count(*) FROM farm",
    "pred_query": "\nSELECT COUNT(*)\nFROM farm;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        8",
    "pred_result": " COUNT(*)\n        8"
  },
  {
    "db_id": "farm",
    "question": "Count the number of farms.",
    "gold_query": "SELECT count(*) FROM farm",
    "pred_query": "\nSELECT COUNT(*)\nFROM farm;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        8",
    "pred_result": " COUNT(*)\n        8"
  },
  {
    "db_id": "farm",
    "question": "List the total number of horses on farms in ascending order.",
    "gold_query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
    "pred_query": "\nSELECT SUM(Total_Horses) as Total_Horses\nFROM farm\nORDER BY Total_Horses ASC;",
    "error_type": "Mismatch",
    "gold_result": " Total_Horses\n       2546.9\n       2604.8\n       3658.9\n       4781.3\n       5056.5\n       5308.2\n       5486.9\n       5607.5",
    "pred_result": " Total_Horses\n      35051.0"
  },
  {
    "db_id": "farm",
    "question": "What is the total horses record for each farm, sorted ascending?",
    "gold_query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
    "pred_query": "\nSELECT f.Farm_ID,\n       SUM(f.Total_Horses) as Total_Horses_Record\nFROM farm f\nGROUP BY f.Farm_ID\nORDER BY Total_Horses_Record ASC;",
    "error_type": "Mismatch",
    "gold_result": " Total_Horses\n       2546.9\n       2604.8\n       3658.9\n       4781.3\n       5056.5\n       5308.2\n       5486.9\n       5607.5",
    "pred_result": " Farm_ID  Total_Horses_Record\n       8               2546.9\n       7               2604.8\n       6               3658.9\n       5               4781.3\n       1               5056.5\n       4               5308.2\n       2               5486.9\n       3               5607.5"
  },
  {
    "db_id": "farm",
    "question": "What are the themes of farm competitions sorted by year in ascending order?",
    "gold_query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
    "pred_query": "\nSELECT fc.Year,\n       fc.Theme\nFROM farm_competition fc\nORDER BY fc.Year ASC;",
    "error_type": "Mismatch",
    "gold_result": "              Theme\n             Aliens\n           MTV Cube\n    Valentine's Day\n       MTV Asia Aid\n        Codehunters\nCarnival M is back!",
    "pred_result": " Year               Theme\n 2002              Aliens\n 2003            MTV Cube\n 2004     Valentine's Day\n 2005        MTV Asia Aid\n 2006         Codehunters\n 2013 Carnival M is back!"
  },
  {
    "db_id": "farm",
    "question": "Return the themes of farm competitions, sorted by year ascending.",
    "gold_query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
    "pred_query": "\nSELECT fc.Year,\n       fc.Theme\nFROM farm_competition fc\nORDER BY fc.Year ASC;",
    "error_type": "Mismatch",
    "gold_result": "              Theme\n             Aliens\n           MTV Cube\n    Valentine's Day\n       MTV Asia Aid\n        Codehunters\nCarnival M is back!",
    "pred_result": " Year               Theme\n 2002              Aliens\n 2003            MTV Cube\n 2004     Valentine's Day\n 2005        MTV Asia Aid\n 2006         Codehunters\n 2013 Carnival M is back!"
  },
  {
    "db_id": "farm",
    "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
    "gold_query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
    "pred_query": "\nSELECT AVG(Working_Horses)\nFROM farm\nWHERE Total_Horses > 5000;",
    "error_type": "Mismatch",
    "gold_result": " avg(Working_Horses)\n             3977.75",
    "pred_result": " AVG(Working_Horses)\n             3977.75"
  },
  {
    "db_id": "farm",
    "question": "Give the average number of working horses on farms with more than 5000 total horses.",
    "gold_query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
    "pred_query": "\nSELECT AVG(Working_Horses) as Average_Working_Horses\nFROM farm\nWHERE Total_Horses > 5000;",
    "error_type": "Mismatch",
    "gold_result": " avg(Working_Horses)\n             3977.75",
    "pred_result": " Average_Working_Horses\n                3977.75"
  },
  {
    "db_id": "farm",
    "question": "What are the maximum and minimum number of cows across all farms.",
    "gold_query": "SELECT max(Cows) ,  min(Cows) FROM farm",
    "pred_query": "\nSELECT MIN(Cows) AS Min_Cows,\n       MAX(Cows) AS Max_Cows\nFROM farm;",
    "error_type": "Mismatch",
    "gold_result": " max(Cows)  min(Cows)\n    3987.0     2407.2",
    "pred_result": " Min_Cows  Max_Cows\n   2407.2    3987.0"
  },
  {
    "db_id": "farm",
    "question": "Return the maximum and minimum number of cows across all farms.",
    "gold_query": "SELECT max(Cows) ,  min(Cows) FROM farm",
    "pred_query": "\nSELECT MAX(Total_Cattle) AS Max_Cows,\n       MIN(Total_Cattle) AS Min_Cows\nFROM farm;",
    "error_type": "Mismatch",
    "gold_result": " max(Cows)  min(Cows)\n    3987.0     2407.2",
    "pred_result": " Max_Cows  Min_Cows\n   8604.8    4446.3"
  },
  {
    "db_id": "farm",
    "question": "How many different statuses do cities have?",
    "gold_query": "SELECT count(DISTINCT Status) FROM city",
    "pred_query": "\nSELECT COUNT(DISTINCT Status)\nFROM city;",
    "error_type": "Mismatch",
    "gold_result": " count(DISTINCT Status)\n                      2",
    "pred_result": " COUNT(DISTINCT Status)\n                      2"
  },
  {
    "db_id": "farm",
    "question": "Count the number of different statuses.",
    "gold_query": "SELECT count(DISTINCT Status) FROM city",
    "pred_query": "\nSELECT COUNT(DISTINCT Status)\nFROM city;",
    "error_type": "Mismatch",
    "gold_result": " count(DISTINCT Status)\n                      2",
    "pred_result": " COUNT(DISTINCT Status)\n                      2"
  },
  {
    "db_id": "farm",
    "question": "What are the official names of cities, ordered descending by population?",
    "gold_query": "SELECT Official_Name FROM city ORDER BY Population DESC",
    "pred_query": "\nSELECT Official_Name,\n       Population\nFROM city\nORDER BY Population DESC;",
    "error_type": "Mismatch",
    "gold_result": "          Official_Name\nGrand Falls/Grand-Sault\n          Perth-Andover\n           Plaster Rock\n               Drummond\n              Aroostook",
    "pred_result": "          Official_Name  Population\nGrand Falls/Grand-Sault      5706.0\n          Perth-Andover      1778.0\n           Plaster Rock      1135.0\n               Drummond       775.0\n              Aroostook       351.0"
  },
  {
    "db_id": "farm",
    "question": "Show the status of the city that has hosted the greatest number of competitions.",
    "gold_query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT c.Official_Name,\n       c.Status\nFROM city c\nJOIN farm_competition fc ON c.City_ID = fc.Host_city_ID\nGROUP BY c.City_ID\nORDER BY COUNT(fc.Competition_ID) DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": " Status\nVillage",
    "pred_result": "Official_Name  Status\n    Aroostook Village"
  },
  {
    "db_id": "farm",
    "question": "What is the status of the city that has hosted the most competitions?",
    "gold_query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT c.Official_Name,\n       c.Status\nFROM city c\nJOIN\n  (SELECT fc.Host_city_ID,\n          COUNT(*) as Competition_Count\n   FROM farm_competition fc\n   GROUP BY fc.Host_city_ID\n   ORDER BY Competition_Count DESC\n   LIMIT 1) fc ON c.City_ID = fc.Host_city_ID;",
    "error_type": "Mismatch",
    "gold_result": " Status\nVillage",
    "pred_result": "Official_Name  Status\n    Aroostook Village"
  },
  {
    "db_id": "farm",
    "question": "Please show the different statuses of cities and the average population of cities with each status.",
    "gold_query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
    "pred_query": "\nSELECT city.Status,\n       AVG(city.Population) as Average_Population\nFROM city\nGROUP BY city.Status;",
    "error_type": "Mismatch",
    "gold_result": " Status  avg(Population)\n   Town          5706.00\nVillage          1009.75",
    "pred_result": " Status  Average_Population\n   Town             5706.00\nVillage             1009.75"
  },
  {
    "db_id": "farm",
    "question": "What are the statuses and average populations of each city?",
    "gold_query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
    "pred_query": "\nSELECT \"Official_Name\",\n       \"Status\",\n       AVG(\"Population\") as \"Average_Population\"\nFROM \"city\"\nGROUP BY \"City_ID\";",
    "error_type": "Mismatch",
    "gold_result": " Status  avg(Population)\n   Town          5706.00\nVillage          1009.75",
    "pred_result": "          Official_Name  Status  Average_Population\nGrand Falls/Grand-Sault    Town              5706.0\n          Perth-Andover Village              1778.0\n           Plaster Rock Village              1135.0\n               Drummond Village               775.0\n              Aroostook Village               351.0"
  },
  {
    "db_id": "farm",
    "question": "Please show the different statuses, ordered by the number of cities that have each.",
    "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
    "pred_query": "\nSELECT Status,\n       COUNT(City_ID) as Number_of_Cities\nFROM city\nGROUP BY Status\nORDER BY Number_of_Cities DESC;",
    "error_type": "Mismatch",
    "gold_result": " Status\n   Town\nVillage",
    "pred_result": " Status  Number_of_Cities\nVillage                 4\n   Town                 1"
  },
  {
    "db_id": "farm",
    "question": "Return the different statuses of cities, ascending by frequency.",
    "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
    "pred_query": "\nSELECT Status,\n       COUNT(*) as Frequency\nFROM city\nGROUP BY Status\nORDER BY Frequency ASC;",
    "error_type": "Mismatch",
    "gold_result": " Status\n   Town\nVillage",
    "pred_result": " Status  Frequency\n   Town          1\nVillage          4"
  },
  {
    "db_id": "farm",
    "question": "List the most common type of Status across cities.",
    "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT Status,\n       COUNT(*) as Frequency\nFROM city\nGROUP BY Status\nORDER BY Frequency DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": " Status\nVillage",
    "pred_result": " Status  Frequency\nVillage          4"
  },
  {
    "db_id": "farm",
    "question": "What is the most common status across all cities?",
    "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT Status,\n       COUNT(*) as Frequency\nFROM city\nGROUP BY Status\nORDER BY Frequency DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": " Status\nVillage",
    "pred_result": " Status  Frequency\nVillage          4"
  },
  {
    "db_id": "farm",
    "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
    "gold_query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
    "pred_query": "\nSELECT DISTINCT c.Status\nFROM city c\nWHERE c.Population > 1500\n  AND c.Population < 500;",
    "error_type": "Mismatch",
    "gold_result": " Status\nVillage",
    "pred_result": "Empty DataFrame\nColumns: [Status]\nIndex: []"
  },
  {
    "db_id": "farm",
    "question": "Show the census ranking of cities whose status are not \"Village\".",
    "gold_query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
    "pred_query": "\nSELECT c.Official_Name,\n       c.Census_Ranking\nFROM city c\nWHERE c.Status != 'Village'\nORDER BY c.Census_Ranking;",
    "error_type": "Mismatch",
    "gold_result": "Census_Ranking\n   636 of 5008",
    "pred_result": "          Official_Name Census_Ranking\nGrand Falls/Grand-Sault    636 of 5008"
  },
  {
    "db_id": "farm",
    "question": "What are the census rankings of cities that do not have the status \"Village\"?",
    "gold_query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
    "pred_query": "\nSELECT c.Official_Name,\n       c.Census_Ranking\nFROM city c\nWHERE c.Status != 'Village'",
    "error_type": "Mismatch",
    "gold_result": "Census_Ranking\n   636 of 5008",
    "pred_result": "          Official_Name Census_Ranking\nGrand Falls/Grand-Sault    636 of 5008"
  },
  {
    "db_id": "aircraft",
    "question": "How many aircrafts are there?",
    "gold_query": "SELECT count(*) FROM aircraft",
    "pred_query": "\nSELECT COUNT(*)\nFROM aircraft;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        5",
    "pred_result": " COUNT(*)\n        5"
  },
  {
    "db_id": "aircraft",
    "question": "What is the number of aircraft?",
    "gold_query": "SELECT count(*) FROM aircraft",
    "pred_query": "\nSELECT COUNT(*)\nFROM aircraft;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        5",
    "pred_result": " COUNT(*)\n        5"
  },
  {
    "db_id": "aircraft",
    "question": "What are the descriptions for the aircrafts?",
    "gold_query": "SELECT Description FROM aircraft",
    "pred_query": "\nSELECT Aircraft,\n       Description\nFROM aircraft;",
    "error_type": "Mismatch",
    "gold_result": "                  Description\n     Light utility helicopter\nTurboshaft utility helicopter\n      Tandem rotor helicopter\n        Heavy-lift helicopter\n        Heavy-lift helicopter",
    "pred_result": "             Aircraft                   Description\n        Robinson R-22      Light utility helicopter\n Bell 206B3 JetRanger Turboshaft utility helicopter\n       CH-47D Chinook       Tandem rotor helicopter\n            Mil Mi-26         Heavy-lift helicopter\nCH-53E Super Stallion         Heavy-lift helicopter"
  },
  {
    "db_id": "aircraft",
    "question": "What is the average number of international passengers of all airports?",
    "gold_query": "SELECT avg(International_Passengers) FROM airport",
    "pred_query": "\nSELECT AVG(International_Passengers) as Average_International_Passengers\nFROM airport;",
    "error_type": "Mismatch",
    "gold_result": " avg(International_Passengers)\n                    16443156.6",
    "pred_result": " Average_International_Passengers\n                       16443156.6"
  },
  {
    "db_id": "aircraft",
    "question": "What is the average number of international passengers for an airport?",
    "gold_query": "SELECT avg(International_Passengers) FROM airport",
    "pred_query": "\nSELECT AVG(International_Passengers) as Average_International_Passengers\nFROM airport;",
    "error_type": "Mismatch",
    "gold_result": " avg(International_Passengers)\n                    16443156.6",
    "pred_result": " Average_International_Passengers\n                       16443156.6"
  },
  {
    "db_id": "aircraft",
    "question": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
    "gold_query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
    "pred_query": "\nSELECT SUM(a.Domestic_Passengers) as Total_Domestic_Passengers\nFROM airport a\nWHERE a.Airport_Name LIKE '%London%';",
    "error_type": "Mismatch",
    "gold_result": " sum(Domestic_Passengers)\n               12957585.0",
    "pred_result": " Total_Domestic_Passengers\n                12957585.0"
  },
  {
    "db_id": "aircraft",
    "question": "What are the total number of domestic passengers at all London airports?",
    "gold_query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
    "pred_query": "\nSELECT SUM(Domestic_Passengers) as Total_Domestic_Passengers\nFROM airport\nWHERE Airport_Name LIKE '%London%'",
    "error_type": "Mismatch",
    "gold_result": " sum(Domestic_Passengers)\n               12957585.0",
    "pred_result": " Total_Domestic_Passengers\n                12957585.0"
  },
  {
    "db_id": "aircraft",
    "question": "What are the maximum and minimum number of transit passengers of all aiports.",
    "gold_query": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
    "pred_query": "\nSELECT MAX(Transit_Passengers) as Maximum_Transit_Passengers,\n       MIN(Transit_Passengers) as Minimum_Transit_Passengers\nFROM airport;",
    "error_type": "Mismatch",
    "gold_result": " max(Transit_Passengers)  min(Transit_Passengers)\n                156246.0                   4395.0",
    "pred_result": " Maximum_Transit_Passengers  Minimum_Transit_Passengers\n                   156246.0                      4395.0"
  },
  {
    "db_id": "aircraft",
    "question": "What is the maximum and mininum number of transit passengers for all airports?",
    "gold_query": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
    "pred_query": "\nSELECT MAX(Transit_Passengers) as Maximum_Transit_Passengers,\n       MIN(Transit_Passengers) as Minimum_Transit_Passengers\nFROM airport;",
    "error_type": "Mismatch",
    "gold_result": " max(Transit_Passengers)  min(Transit_Passengers)\n                156246.0                   4395.0",
    "pred_result": " Maximum_Transit_Passengers  Minimum_Transit_Passengers\n                   156246.0                      4395.0"
  },
  {
    "db_id": "aircraft",
    "question": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?",
    "gold_query": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"",
    "pred_query": "\nSELECT AVG(airport.Total_Passengers)\nFROM airport\nJOIN airport_aircraft ON airport.Airport_ID = airport_aircraft.Airport_ID\nJOIN aircraft ON airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID\nWHERE aircraft.Aircraft = \"Robinson R-22\";",
    "error_type": "Mismatch",
    "gold_result": " avg(T3.Total_Passengers)\n               34205887.0",
    "pred_result": " AVG(airport.Total_Passengers)\n                    34205887.0"
  },
  {
    "db_id": "aircraft",
    "question": "What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?",
    "gold_query": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"",
    "pred_query": "\nSELECT AVG(a.Total_Passengers)\nFROM airport a\nJOIN airport_aircraft aa ON a.Airport_ID = aa.Airport_ID\nJOIN aircraft ac ON aa.Aircraft_ID = ac.Aircraft_ID\nWHERE ac.Aircraft = 'Robinson R-22';",
    "error_type": "Mismatch",
    "gold_result": " avg(T3.Total_Passengers)\n               34205887.0",
    "pred_result": " AVG(a.Total_Passengers)\n              34205887.0"
  },
  {
    "db_id": "aircraft",
    "question": "Please list the location and the winning aircraft name.",
    "gold_query": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
    "pred_query": "\nSELECT `Location`,\n       `Winning_Aircraft`\nFROM `match`;",
    "error_type": "Mismatch",
    "gold_result": "                       Location              Aircraft\n        Mina' Zayid , Abu Dhabi         Robinson R-22\n             Swan River , Perth         Robinson R-22\nFlamengo Beach , Rio de Janeiro  Bell 206B3 JetRanger\n              Windsor , Ontario             Mil Mi-26\n                  New York City        CH-47D Chinook\n           EuroSpeedway Lausitz             Mil Mi-26\n        River Danube , Budapest CH-53E Super Stallion",
    "pred_result": "                       Location Winning_Aircraft\n        Mina' Zayid , Abu Dhabi                1\n             Swan River , Perth                1\nFlamengo Beach , Rio de Janeiro                2\n              Windsor , Ontario                4\n                  New York City                3\n           EuroSpeedway Lausitz                4\n        River Danube , Budapest                5"
  },
  {
    "db_id": "aircraft",
    "question": "List the name of the aircraft that has been named winning aircraft the most number of times.",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT a.Aircraft,\n       COUNT(m.Winning_Aircraft) as Winning_Count\nFROM aircraft a\nJOIN match m ON a.Aircraft_ID = m.Winning_Aircraft\nGROUP BY m.Winning_Aircraft\nORDER BY Winning_Count DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": " Aircraft\nMil Mi-26",
    "pred_result": " Aircraft  Winning_Count\nMil Mi-26              2"
  },
  {
    "db_id": "aircraft",
    "question": "What is the name of the aircraft that has won an award the most?",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT a.Aircraft,\n       COUNT(m.Winning_Aircraft) as Award_Count\nFROM aircraft a\nJOIN match m ON a.Aircraft_ID = m.Winning_Aircraft\nGROUP BY a.Aircraft\nORDER BY Award_Count DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": " Aircraft\nMil Mi-26",
    "pred_result": "     Aircraft  Award_Count\nRobinson R-22            2"
  },
  {
    "db_id": "aircraft",
    "question": "List the names of aircrafts and the number of times it won matches.",
    "gold_query": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",
    "pred_query": "\nSELECT a.Aircraft,\n       COUNT(m.Winning_Aircraft) as Number_of_Wins\nFROM aircraft a\nJOIN match m ON a.Aircraft_ID = m.Winning_Aircraft\nGROUP BY a.Aircraft;",
    "error_type": "Mismatch",
    "gold_result": "             Aircraft  COUNT(*)\n        Robinson R-22         2\n Bell 206B3 JetRanger         1\n       CH-47D Chinook         1\n            Mil Mi-26         2\nCH-53E Super Stallion         1",
    "pred_result": "             Aircraft  Number_of_Wins\n Bell 206B3 JetRanger               1\n       CH-47D Chinook               1\nCH-53E Super Stallion               1\n            Mil Mi-26               2\n        Robinson R-22               2"
  },
  {
    "db_id": "aircraft",
    "question": "For each aircraft that has won an award, what is its name and how many time has it won?",
    "gold_query": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",
    "pred_query": "\nSELECT a.Aircraft,\n       COUNT(m.Winning_Aircraft) as Number_of_Awards\nFROM aircraft a\nJOIN match m ON a.Aircraft_ID = m.Winning_Aircraft\nGROUP BY a.Aircraft;",
    "error_type": "Mismatch",
    "gold_result": "             Aircraft  COUNT(*)\n        Robinson R-22         2\n Bell 206B3 JetRanger         1\n       CH-47D Chinook         1\n            Mil Mi-26         2\nCH-53E Super Stallion         1",
    "pred_result": "             Aircraft  Number_of_Awards\n Bell 206B3 JetRanger                 1\n       CH-47D Chinook                 1\nCH-53E Super Stallion                 1\n            Mil Mi-26                 2\n        Robinson R-22                 2"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names of all pilots listed by descending age?",
    "gold_query": "SELECT Name FROM pilot ORDER BY Age DESC",
    "pred_query": "\nSELECT Name,\n       Age\nFROM pilot\nORDER BY Age DESC;",
    "error_type": "Mismatch",
    "gold_result": "                     Name\n          Elisha Hickle V\n            Blaise Muller\n         Ellen Ledner III\n          Winnifred Boyle\n           Baylee Steuber\n           Della Lindgren\n       Dr. Jade Bradtke V\n           Maxwell Graham\n            Ayana Spencer\n    Prof. Zackery Collins\nMr. Cristian Halvorson II\n     Katheryn Gorczany IV",
    "pred_result": "                     Name  Age\n          Elisha Hickle V   37\n            Blaise Muller   33\n         Ellen Ledner III   31\n          Winnifred Boyle   30\n           Baylee Steuber   30\n           Della Lindgren   29\n       Dr. Jade Bradtke V   26\n           Maxwell Graham   26\n            Ayana Spencer   25\n    Prof. Zackery Collins   23\nMr. Cristian Halvorson II   23\n     Katheryn Gorczany IV   20"
  },
  {
    "db_id": "aircraft",
    "question": "List the names of aircrafts and that won matches at least twice.",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
    "pred_query": "\nSELECT a.Aircraft\nFROM aircraft a\nJOIN match m ON a.Aircraft_ID = m.Winning_Aircraft\nGROUP BY a.Aircraft\nHAVING COUNT(m.Round) >= 2;",
    "error_type": "Mismatch",
    "gold_result": "     Aircraft\nRobinson R-22\n    Mil Mi-26",
    "pred_result": "     Aircraft\n    Mil Mi-26\nRobinson R-22"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names of all aircrafts that have won a match at least twice?",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
    "pred_query": "\nSELECT Winning_Aircraft\nFROM match\nGROUP BY Winning_Aircraft\nHAVING COUNT(*) >= 2;",
    "error_type": "Mismatch",
    "gold_result": "     Aircraft\nRobinson R-22\n    Mil Mi-26",
    "pred_result": "Winning_Aircraft\n               1\n               4"
  },
  {
    "db_id": "aircraft",
    "question": "find the name of pilots who did not win the matches held in the country of Australia.",
    "gold_query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
    "pred_query": "\nSELECT DISTINCT p.Name\nFROM pilot p\nLEFT JOIN match m ON p.Pilot_Id = m.Winning_Pilot\nWHERE m.Country != 'Australia'\n  OR m.Country IS NULL;",
    "error_type": "Mismatch",
    "gold_result": "                     Name\n    Prof. Zackery Collins\n     Katheryn Gorczany IV\nMr. Cristian Halvorson II\n         Ellen Ledner III\n          Elisha Hickle V\n       Dr. Jade Bradtke V\n          Winnifred Boyle\n           Della Lindgren\n           Maxwell Graham\n            Blaise Muller\n           Baylee Steuber",
    "pred_result": "                     Name\n    Prof. Zackery Collins\n     Katheryn Gorczany IV\nMr. Cristian Halvorson II\n            Ayana Spencer\n         Ellen Ledner III\n          Elisha Hickle V\n       Dr. Jade Bradtke V\n          Winnifred Boyle\n           Della Lindgren\n           Maxwell Graham\n            Blaise Muller\n           Baylee Steuber"
  },
  {
    "db_id": "architecture",
    "question": "How many architects are female?",
    "gold_query": "SELECT count(*) FROM architect WHERE gender  =  'female'",
    "pred_query": "\nSELECT COUNT(*)\nFROM architect\nWHERE gender = 'female';",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        1",
    "pred_result": " COUNT(*)\n        1"
  },
  {
    "db_id": "architecture",
    "question": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
    "gold_query": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name",
    "pred_query": "\nSELECT id,\n       name,\n       nationality\nFROM architect\nWHERE gender = 'male'\nORDER BY name ASC;",
    "error_type": "Mismatch",
    "gold_result": "              name      nationality id\n       Frank Gehry         Canadian  2\nFrank Lloyd Wright         American  1\n      Le Corbusier    Swiss, French  5\n Mies Van Der Rohe German, American  4",
    "pred_result": "id               name      nationality\n 2        Frank Gehry         Canadian\n 1 Frank Lloyd Wright         American\n 5       Le Corbusier    Swiss, French\n 4  Mies Van Der Rohe German, American"
  },
  {
    "db_id": "architecture",
    "question": "What is the maximum length in meters for the bridges and what are the architects' names?",
    "gold_query": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id",
    "pred_query": "\nSELECT MAX(bridge.length_meters) AS max_length_meters,\n       architect.name\nFROM bridge\nJOIN architect ON bridge.architect_id = architect.id",
    "error_type": "Mismatch",
    "gold_result": " max(T1.length_meters)               name\n                 121.0 Frank Lloyd Wright",
    "pred_result": " max_length_meters               name\n             121.0 Frank Lloyd Wright"
  },
  {
    "db_id": "architecture",
    "question": "What is the average length in feet of the bridges?",
    "gold_query": "SELECT avg(length_feet) FROM bridge",
    "pred_query": "\nSELECT AVG(length_feet) as average_length_feet\nFROM bridge;",
    "error_type": "Mismatch",
    "gold_result": " avg(length_feet)\n           244.64",
    "pred_result": " average_length_feet\n              244.64"
  },
  {
    "db_id": "architecture",
    "question": "What is the id, name and nationality of the architect who built most mills?",
    "gold_query": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "pred_query": "\nSELECT a.id,\n       a.name,\n       a.nationality\nFROM architect a\nJOIN\n  (SELECT architect_id,\n          COUNT(*) as mill_count\n   FROM mill\n   GROUP BY architect_id\n   ORDER BY mill_count DESC\n   LIMIT 1) m ON a.id = m.architect_id;",
    "error_type": "Mismatch",
    "gold_result": "id               name nationality\n 1 Frank Lloyd Wright    American",
    "pred_result": "id              name      nationality\n 4 Mies Van Der Rohe German, American"
  },
  {
    "db_id": "architecture",
    "question": "What is the most common mill type, and how many are there?",
    "gold_query": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
    "pred_query": "\nSELECT type,\n       COUNT(*) as count\nFROM mill\nGROUP BY type\nORDER BY count DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": "       type  count(*)\nGrondzeiler         5",
    "pred_result": "       type  count\nGrondzeiler      5"
  },
  {
    "db_id": "architecture",
    "question": "How many architects haven't built a mill before year 1850?",
    "gold_query": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );",
    "pred_query": "\nSELECT COUNT(DISTINCT a.id)\nFROM architect a\nLEFT JOIN mill m ON a.id = m.architect_id\nAND m.built_year < 1850\nWHERE m.id IS NULL;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        2",
    "pred_result": " COUNT(DISTINCT a.id)\n                    2"
  },
  {
    "db_id": "cinema",
    "question": "Show all the locations where no cinema has capacity over 800.",
    "gold_query": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800",
    "pred_query": "\nSELECT DISTINCT c.Location\nFROM cinema c\nWHERE c.Location NOT IN\n    (SELECT c.Location\n     FROM cinema c\n     WHERE c.Capacity > 800);",
    "error_type": "Mismatch",
    "gold_result": "        Location\n     County Cork\n   County Dublin\n    County Laois\n    County Louth\nCounty Tipperary",
    "pred_result": "        Location\n     County Cork\n   County Dublin\nCounty Tipperary\n    County Laois\n    County Louth"
  },
  {
    "db_id": "cinema",
    "question": "How many cinema do we have?",
    "gold_query": "SELECT count(*) FROM cinema",
    "pred_query": "\nSELECT COUNT(*)\nFROM cinema;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n       10",
    "pred_result": " COUNT(*)\n       10"
  },
  {
    "db_id": "cinema",
    "question": "Count the number of cinemas.",
    "gold_query": "SELECT count(*) FROM cinema",
    "pred_query": "\nSELECT COUNT(*)\nFROM cinema;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n       10",
    "pred_result": " COUNT(*)\n       10"
  },
  {
    "db_id": "cinema",
    "question": "Show name, opening year, and capacity for each cinema.",
    "gold_query": "SELECT name ,  openning_year ,  capacity FROM cinema",
    "pred_query": "\nSELECT Name,\n       Opening_year,\n       Capacity\nFROM cinema;",
    "error_type": "ExecutionError",
    "gold_result": "           Name  Openning_year  Capacity\n0       Codling           2010      1100\n1   Carrowleagh           2012       368\n2  Dublin Array           2015       364\n3      Glenmore           2009       305\n4      Glenough           2010       325\n5     Gortahile           2010       208\n6  Grouse Lodge           2011       203\n7    Moneypoint           2011       225\n8  Mount Callan           2011       908\n9         Oriel           2013       330",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.",
    "gold_query": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011",
    "pred_query": "\nSELECT AVG(c.Capacity) AS Average_Capacity,\n       MIN(c.Capacity) AS Minimum_Capacity,\n       MAX(c.Capacity) AS Maximum_Capacity\nFROM cinema c\nWHERE c.Openning_year >= 2011;",
    "error_type": "Mismatch",
    "gold_result": " avg(capacity)  min(capacity)  max(capacity)\n    399.666667            203            908",
    "pred_result": " Average_Capacity  Minimum_Capacity  Maximum_Capacity\n       399.666667               203               908"
  },
  {
    "db_id": "cinema",
    "question": "Show each location and the number of cinemas there.",
    "gold_query": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION",
    "pred_query": "\nSELECT Location,\n       COUNT(Cinema_ID) as Number_of_Cinemas\nFROM cinema\nGROUP BY Location;",
    "error_type": "Mismatch",
    "gold_result": "        Location  count(*)\n    County Clare         3\n     County Cork         1\n   County Dublin         1\n    County Laois         1\n    County Louth         1\nCounty Tipperary         2\n  County Wicklow         1",
    "pred_result": "        Location  Number_of_Cinemas\n    County Clare                  3\n     County Cork                  1\n   County Dublin                  1\n    County Laois                  1\n    County Louth                  1\nCounty Tipperary                  2\n  County Wicklow                  1"
  },
  {
    "db_id": "cinema",
    "question": "List all directors along with the number of films directed by each director.",
    "gold_query": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by",
    "pred_query": "\nSELECT \"Directed_by\",\n       COUNT(\"Film_ID\") as \"Number_of_films\"\nFROM \"film\"\nGROUP BY \"Directed_by\";",
    "error_type": "Mismatch",
    "gold_result": "           Directed_by  count(*)\n        Bill Schreiner         4\nJesus Salvador Treviño         1",
    "pred_result": "           Directed_by  Number_of_films\n        Bill Schreiner                4\nJesus Salvador Treviño                1"
  },
  {
    "db_id": "cinema",
    "question": "What is total number of show times per dat for each cinema?",
    "gold_query": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id",
    "pred_query": "\nSELECT Cinema_ID, Date, SUM(Show_times_per_day) as Total_Show_Times\nFROM schedule\nGROUP BY Cinema_ID, Date",
    "error_type": "Mismatch",
    "gold_result": "        Name  sum(T1.show_times_per_day)\n     Codling                          10\n Carrowleagh                           5\n   Gortahile                           4\nMount Callan                           5\n       Oriel                           5",
    "pred_result": " Cinema_ID    Date  Total_Show_Times\n         1  21 Jun                 2\n         1  21 May                 8\n         2 11 July                 5\n         6   2 Aug                 4\n         9  20 May                 5\n        10  19 May                 5"
  },
  {
    "db_id": "cinema",
    "question": "What are the title and maximum price of each film?",
    "gold_query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
    "pred_query": "\nSELECT f.Title,\n       MAX(s.Price) as Max_Price\nFROM film f\nJOIN schedule s ON f.Film_ID = s.Film_ID\nGROUP BY f.Title;",
    "error_type": "Mismatch",
    "gold_result": "                           Title  max(T1.price)\n The Case of the Mystery Weekend          15.99\n     The Case of the Smart Dummy          12.99\n        The Case: Off the Record           8.99\nThe Case of the Bermuda Triangle           9.99\n    The Case of the Piggy Banker          12.99",
    "pred_result": "                           Title  Max_Price\nThe Case of the Bermuda Triangle       9.99\n The Case of the Mystery Weekend      15.99\n    The Case of the Piggy Banker      12.99\n     The Case of the Smart Dummy      12.99\n        The Case: Off the Record       8.99"
  },
  {
    "db_id": "cinema",
    "question": "Give me the title and highest price for each film.",
    "gold_query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
    "pred_query": "\nSELECT f.Title,\n       MAX(s.Price) as Highest_Price\nFROM film f\nJOIN schedule s ON f.Film_ID = s.Film_ID\nGROUP BY f.Title;",
    "error_type": "Mismatch",
    "gold_result": "                           Title  max(T1.price)\n The Case of the Mystery Weekend          15.99\n     The Case of the Smart Dummy          12.99\n        The Case: Off the Record           8.99\nThe Case of the Bermuda Triangle           9.99\n    The Case of the Piggy Banker          12.99",
    "pred_result": "                           Title  Highest_Price\nThe Case of the Bermuda Triangle           9.99\n The Case of the Mystery Weekend          15.99\n    The Case of the Piggy Banker          12.99\n     The Case of the Smart Dummy          12.99\n        The Case: Off the Record           8.99"
  },
  {
    "db_id": "cinema",
    "question": "Show director with the largest number of show times in total.",
    "gold_query": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
    "pred_query": "\nSELECT f.Directed_by,\n       COUNT(s.Show_times_per_day) as Total_Show_Times\nFROM film f\nJOIN schedule s ON f.Film_ID = s.Film_ID\nGROUP BY f.Directed_by\nORDER BY Total_Show_Times DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": "   Directed_by\nBill Schreiner",
    "pred_result": "   Directed_by  Total_Show_Times\nBill Schreiner                 6"
  },
  {
    "db_id": "cinema",
    "question": "How many films have the word 'Dummy' in their titles?",
    "gold_query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
    "pred_query": "\nSELECT COUNT(*)\nFROM film\nWHERE Title LIKE '%Dummy%';",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        1",
    "pred_result": " COUNT(*)\n        1"
  },
  {
    "db_id": "cinema",
    "question": "Count the number of films whose title contains the word 'Dummy'.",
    "gold_query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
    "pred_query": "\nSELECT COUNT(*)\nFROM film\nWHERE Title LIKE '%Dummy%';",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        1",
    "pred_result": " COUNT(*)\n        1"
  }
]