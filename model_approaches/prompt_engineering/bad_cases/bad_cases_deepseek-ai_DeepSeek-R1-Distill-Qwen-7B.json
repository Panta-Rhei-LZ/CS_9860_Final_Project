[
  {
    "db_id": "department_management",
    "question": "How many heads of the departments are older than 56 ?",
    "gold_query": "SELECT count(*) FROM head WHERE age  >  56",
    "pred_query": "\nSELECT COUNT(head.age)\nFROM head\nWHERE head.age > 56;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        5",
    "pred_result": " COUNT(head.age)\n               5"
  },
  {
    "db_id": "department_management",
    "question": "List the creation year, name and budget of each department.",
    "gold_query": "SELECT creation ,  name ,  budget_in_billions FROM department",
    "pred_query": "\nSELECT dCreation,\n       Name,\n       Budget_in_Billions\nFROM department;",
    "error_type": "ExecutionError",
    "gold_result": "   Creation                           Name  Budget_in_Billions\n0      1789                          State                9.96\n1      1789                       Treasury               11.10\n2      1947                        Defense              439.30\n3      1870                        Justice               23.40\n4      1849                       Interior               10.70\n5      1889                    Agriculture               77.60\n6      1903                       Commerce                6.20\n7      1913                          Labor               59.70\n8      1953      Health and Human Services              543.20\n9      1965  Housing and Urban Development               46.20\n10     1966                 Transportation               58.00\n11     1977                         Energy               21.50\n12     1979                      Education               62.80\n13     1989               Veterans Affairs               73.20\n14     2002              Homeland Security               44.60",
    "pred_result": "None"
  },
  {
    "db_id": "department_management",
    "question": "What are the maximum and minimum budget of the departments?",
    "gold_query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
    "pred_query": "\nSELECT MAX(Budget_in_Billions) AS Max_Budget,\n       MIN(Budget_in_Billions) AS Min_Budget\nFROM department;",
    "error_type": "Mismatch",
    "gold_result": " max(budget_in_billions)  min(budget_in_billions)\n                   543.2                      6.2",
    "pred_result": " Max_Budget  Min_Budget\n      543.2         6.2"
  },
  {
    "db_id": "department_management",
    "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
    "gold_query": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
    "pred_query": "\nSELECT AVG(Num_Employees) AS Average_Employees\nFROM department\nWHERE Ranking BETWEEN 10 AND 15;",
    "error_type": "Mismatch",
    "gold_result": " avg(num_employees)\n      105468.166667",
    "pred_result": " Average_Employees\n     105468.166667"
  },
  {
    "db_id": "department_management",
    "question": "What are the names of the states where at least 3 heads were born?",
    "gold_query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3",
    "pred_query": "\nSELECT DISTINCT head.born_state AS state_name\nFROM head\nJOIN management ON head.head_ID = management.head_ID\nJOIN department ON management.department_ID = department.Department_ID\nWHERE managementtemporary_acting = 'at least 3 heads'\nGROUP BY state_name\nORDER BY state_name;",
    "error_type": "ExecutionError",
    "gold_result": "   born_state\n0  California",
    "pred_result": "None"
  },
  {
    "db_id": "department_management",
    "question": "In which year were most departments established?",
    "gold_query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
    "pred_query": "\nSELECT MINCreation\nFROM department\nWHERE MINCreation =\n    (SELECT MINCreation\n     FROM department\n     GROUP BY Department_ID MIN)",
    "error_type": "ExecutionError",
    "gold_result": "  Creation\n0     1789",
    "pred_result": "None"
  },
  {
    "db_id": "department_management",
    "question": "How many acting statuses are there?",
    "gold_query": "SELECT count(DISTINCT temporary_acting) FROM management",
    "pred_query": "\nSELECT COUNT(DISTINCT temporary_acting) AS acting_statuses\nFROM management",
    "error_type": "Mismatch",
    "gold_result": " count(DISTINCT temporary_acting)\n                                2",
    "pred_result": " acting_statuses\n               2"
  },
  {
    "db_id": "department_management",
    "question": "How many departments are led by heads who are not mentioned?",
    "gold_query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
    "pred_query": "\nSELECT COUNT(DISTINCT m.department_ID) AS Num_Departments\nFROM management m\nWHERE m.head_ID NOT IN\n    (SELECT h.head_ID\n     FROM head h)",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n       11",
    "pred_result": " Num_Departments\n               0"
  },
  {
    "db_id": "department_management",
    "question": "What are the distinct ages of the heads who are acting?",
    "gold_query": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
    "pred_query": "\nSELECT DISTINCT age\nFROM head\nWHERE head_ID IN\n    (SELECT head_ID\n     FROM management\n     WHERE temporary_acting = 'acting');",
    "error_type": "Mismatch",
    "gold_result": " age\n53.0\n52.0\n69.0",
    "pred_result": "Empty DataFrame\nColumns: [age]\nIndex: []"
  },
  {
    "db_id": "department_management",
    "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
    "gold_query": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'",
    "pred_query": "\nSELECT DISTINCT m2.born_state\nFROM management m1\nJOIN management m2 ON m1.department_ID = m2.department_ID\nAND m1.head_ID != m2.head_ID\nWHERE m1.Name = 'Treasury'\n  AND m2.Name = 'Homeland Security';",
    "error_type": "ExecutionError",
    "gold_result": "   born_state\n0  California",
    "pred_result": "None"
  },
  {
    "db_id": "department_management",
    "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
    "gold_query": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",
    "pred_query": "\nSELECT d.D部ID,\n       d.Name,\n       COUNT(m.head_ID) as Num_Heads\nFROM department d\nJOIN management m ON d.D部ID = m.department_ID\nGROUP BY d.D部ID,\n         d.Name\nHAVING Num_Heads > 1;",
    "error_type": "ExecutionError",
    "gold_result": "   Department_ID      Name  count(*)\n0              2  Treasury         2",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "How many farms are there?",
    "gold_query": "SELECT count(*) FROM farm",
    "pred_query": "\nSELECT COUNT(DISTINCT Farm_ID)\nFROM farm;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        8",
    "pred_result": " COUNT(DISTINCT Farm_ID)\n                       8"
  },
  {
    "db_id": "farm",
    "question": "Count the number of farms.",
    "gold_query": "SELECT count(*) FROM farm",
    "pred_query": "\nSELECT COUNT(DISTINCT Farm_ID) AS NumberOfFarms\nFROM farm;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        8",
    "pred_result": " NumberOfFarms\n             8"
  },
  {
    "db_id": "farm",
    "question": "List the total number of horses on farms in ascending order.",
    "gold_query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
    "pred_query": "\nSELECT distinct Total_Horses\nFROM farm,\n     farm_competition,\n     competition_record\nWHERE farm.City_ID = farm_competition.Host_city_ID\n  AND farm_competition.Host_city_ID = competition_record.Host_city_ID\n  AND competition_record.Farm_ID = farm.Farm_ID\nORDER BY Total_Horses ASC;",
    "error_type": "ExecutionError",
    "gold_result": "   Total_Horses\n0        2546.9\n1        2604.8\n2        3658.9\n3        4781.3\n4        5056.5\n5        5308.2\n6        5486.9\n7        5607.5",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "What is the total horses record for each farm, sorted ascending?",
    "gold_query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
    "pred_query": "\nSELECT farm.Farm_ID,\n       farm.Total_Horses\nFROM farm\nORDER BY farm.Total_Horses ASC;",
    "error_type": "Mismatch",
    "gold_result": " Total_Horses\n       2546.9\n       2604.8\n       3658.9\n       4781.3\n       5056.5\n       5308.2\n       5486.9\n       5607.5",
    "pred_result": " Farm_ID  Total_Horses\n       8        2546.9\n       7        2604.8\n       6        3658.9\n       5        4781.3\n       1        5056.5\n       4        5308.2\n       2        5486.9\n       3        5607.5"
  },
  {
    "db_id": "farm",
    "question": "What are the hosts of competitions whose theme is not \"Aliens\"?",
    "gold_query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
    "pred_query": "\nSELECT DISTINCT city.Official_Name AS Host_City\nFROM city\nJOIN farm_competition ON city.City_ID = farm_competition.Host_city_ID\nJOIN competition_record ON farm_competition.Competition_ID = competition_record.Competition_ID\nAND competition_record.Farm_ID = farm_competition.Farm_ID\nWHERE farm_competition.Theme NOT LIKE '%Aliens%';\n\n[Wait, but the table 'farm' doesn't have a 'Theme' column. So the 'farm_competition' table has the 'Theme' column. So the query is correct as it references farm_competition.Theme.] </think> To find the hosts of competitions not themed around \"Aliens\",\n                                                                                                                                                                                                                                                  we\njoin the relevant tables\nand filter by the theme condition.",
    "error_type": "ExecutionError",
    "gold_result": "                                  Hosts\n0  Miley Cyrus Jared Leto and Karen Mok\n1         Leehom Wang and Kelly Rowland\n2                           Alicia Keys\n3        Vanness Wu and Michelle Branch\n4                   Shaggy and Coco Lee",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Return the hosts of competitions for which the theme is not Aliens?",
    "gold_query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
    "pred_query": "\nSELECT DISTINCT city.Official_Name AS Host_City\nFROM city\nJOIN farm_competition ON city.City_ID = farm_competition.Host_city_ID\nJOIN competition_record ON farm_competition.Competition_ID = competition_record.Competition_ID\nAND competition_record.Farm_ID = farm_competition.Farm_ID\nWHERE farm_competition.Theme != 'Aliens' [;/SQL] </think> To find the hosts of competitions where the theme is not Aliens,\n                                                                                                                   we need to\n  join the relevant tables. The `farm_competition` table links to `city`\n  and `competition_record`. We'll filter by `Theme != 'Aliens'`.",
    "error_type": "ExecutionError",
    "gold_result": "                                  Hosts\n0  Miley Cyrus Jared Leto and Karen Mok\n1         Leehom Wang and Kelly Rowland\n2                           Alicia Keys\n3        Vanness Wu and Michelle Branch\n4                   Shaggy and Coco Lee",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "What are the themes of farm competitions sorted by year in ascending order?",
    "gold_query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
    "pred_query": "\nSELECT DISTINCT fThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeTheme\nFROM farm_competition\nWHERE fThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeThemeTheme\n  FROM competition_record\nGROUP BY Year\nORDER BY Year ASC;",
    "error_type": "ExecutionError",
    "gold_result": "                 Theme\n0               Aliens\n1             MTV Cube\n2      Valentine's Day\n3         MTV Asia Aid\n4          Codehunters\n5  Carnival M is back!",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Return the themes of farm competitions, sorted by year ascending.",
    "gold_query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
    "pred_query": "\nSELECT DISTINCT Theme\nFROM farm_competition,\n     competition_record\nWHERE farm_competition.Host_city_ID = city.City_ID\n  AND competition_record.Farm_ID = farm.Farm_ID\n  AND competition_record.Competition_ID = farm_competition.Competition_ID\nORDER BY Year ASC;",
    "error_type": "ExecutionError",
    "gold_result": "                 Theme\n0               Aliens\n1             MTV Cube\n2      Valentine's Day\n3         MTV Asia Aid\n4          Codehunters\n5  Carnival M is back!",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
    "gold_query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
    "pred_query": "\nSELECT AVG(farm.working_horses)\nFROM farm\nWHERE farm.total_horses > 5000;",
    "error_type": "Mismatch",
    "gold_result": " avg(Working_Horses)\n             3977.75",
    "pred_result": " AVG(farm.working_horses)\n                  3977.75"
  },
  {
    "db_id": "farm",
    "question": "Give the average number of working horses on farms with more than 5000 total horses.",
    "gold_query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
    "pred_query": "\nSELECT AVG(farm.working_horses)\nFROM farm\nWHERE farm.total_horses > 5000;",
    "error_type": "Mismatch",
    "gold_result": " avg(Working_Horses)\n             3977.75",
    "pred_result": " AVG(farm.working_horses)\n                  3977.75"
  },
  {
    "db_id": "farm",
    "question": "What are the maximum and minimum number of cows across all farms.",
    "gold_query": "SELECT max(Cows) ,  min(Cows) FROM farm",
    "pred_query": "\nSELECT MAX(farm.Cows) AS Max_Cows,\n       MIN(farm.Cows) AS Min_Cows\nFROM farm",
    "error_type": "Mismatch",
    "gold_result": " max(Cows)  min(Cows)\n    3987.0     2407.2",
    "pred_result": " Max_Cows  Min_Cows\n   3987.0    2407.2"
  },
  {
    "db_id": "farm",
    "question": "Return the maximum and minimum number of cows across all farms.",
    "gold_query": "SELECT max(Cows) ,  min(Cows) FROM farm",
    "pred_query": "\nSELECT MAX(farm.Cows) AS Max_Cows,\n       MIN(farm.Cows) AS Min_Cows\nFROM farm;",
    "error_type": "Mismatch",
    "gold_result": " max(Cows)  min(Cows)\n    3987.0     2407.2",
    "pred_result": " Max_Cows  Min_Cows\n   3987.0    2407.2"
  },
  {
    "db_id": "farm",
    "question": "How many different statuses do cities have?",
    "gold_query": "SELECT count(DISTINCT Status) FROM city",
    "pred_query": "\nSELECT COUNT(DISTINCT Status) AS City_Status_Count\nFROM city",
    "error_type": "Mismatch",
    "gold_result": " count(DISTINCT Status)\n                      2",
    "pred_result": " City_Status_Count\n                 2"
  },
  {
    "db_id": "farm",
    "question": "Count the number of different statuses.",
    "gold_query": "SELECT count(DISTINCT Status) FROM city",
    "pred_query": "\nSELECT COUNT(DISTINCT Status)\nFROM city;",
    "error_type": "Mismatch",
    "gold_result": " count(DISTINCT Status)\n                      2",
    "pred_result": " COUNT(DISTINCT Status)\n                      2"
  },
  {
    "db_id": "farm",
    "question": "List the official name and status of the city with the largest population.",
    "gold_query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
    "pred_query": "\nSELECT city.Official_Name,\n       city.Status\nFROM city\nJOIN farm_competition ON city.City_ID = farm_competition.Host_city_ID\nJOIN competition_record ON farm_competition.Competition_ID = competition_record.Competition_ID\nJOIN farm ON competition_record.Farm_ID = farm.Farm_ID\nWHERE city.Population =\n    (SELECT MAX(Population)\n     FROM city)\nORDER BY city.Official_Name;",
    "error_type": "Mismatch",
    "gold_result": "          Official_Name Status\nGrand Falls/Grand-Sault   Town",
    "pred_result": "          Official_Name Status\nGrand Falls/Grand-Sault   Town\nGrand Falls/Grand-Sault   Town\nGrand Falls/Grand-Sault   Town"
  },
  {
    "db_id": "farm",
    "question": "What is the official name and status of the city with the most residents?",
    "gold_query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
    "pred_query": "\nSELECT c.Official_Name,\n       c.Status\nFROM city c\nJOIN farm_competition fc ON c.City_ID = fc.Host_city_ID\nJOIN competition_record cr ON fc.Competition_ID = cr.Competition_ID\nAND c.City_ID = cr.Host_city_ID\nGROUP BY c.Official_Name,\n         c.Status\nORDER BY c.Population DESC\nLIMIT 1;",
    "error_type": "ExecutionError",
    "gold_result": "             Official_Name Status\n0  Grand Falls/Grand-Sault   Town",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Show the years and the official names of the host cities of competitions.",
    "gold_query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
    "pred_query": "\nSELECT DISTINCT year,\n                city.Official_Name\nFROM city,\n     competition_record,\n     farm_competition\nWHERE city.City_ID = competition_record.Host_city_ID\n  AND competition_record.Year = farm_competition.Year\n  AND competition_record.Farm_ID = farm.farm_ID;\n\nWait,\nno,\nthat's not correct. Let me think again.\n\nI need to get the years and the host city's official names. So,\n                                                     I should\njoin the competition_record with farm_competition to get the year\nand the farm details,\n             then\njoin with city to get the official name. So,\n                                   the correct SQL should be:\nSELECT year,\n       city.Official_Name\nFROM competition_record,\n     farm_competition,\n     city\nWHERE competition_record.Host_city_ID = farm_competition.Host_city_ID\n  AND competition_record.Year = farm_competition.Year\n  AND farm_competition.Host_city_ID = city.City_ID;\n\nWait,\nbut",
    "error_type": "ExecutionError",
    "gold_result": "   Year            Official_Name\n0  2013  Grand Falls/Grand-Sault\n1  2006            Perth-Andover\n2  2005             Plaster Rock\n3  2004                 Drummond\n4  2003                Aroostook\n5  2002                Aroostook",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Give the years and official names of the cities of each competition.",
    "gold_query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
    "pred_query": "\nSELECT DISTINCT c.City_ID,\n                f.Year,\n                c.Official_Name\nFROM city c\nJOIN farm_competition fc ON c.City_ID = fc.Host_city_ID\nJOIN competition_record cr ON fc.Competition_ID = cr.Competition_ID\nWHERE cr.Rank = 1;",
    "error_type": "ExecutionError",
    "gold_result": "   Year            Official_Name\n0  2013  Grand Falls/Grand-Sault\n1  2006            Perth-Andover\n2  2005             Plaster Rock\n3  2004                 Drummond\n4  2003                Aroostook\n5  2002                Aroostook",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Show the official names of the cities that have hosted more than one competition.",
    "gold_query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
    "pred_query": "\nSELECT DISTINCT city.Official_Name\nFROM city,\n     competition_record,\n     farm_competition\nWHERE city.City_ID = competition_record.Host_city_ID\n  AND competition_record.farm_id = farm_competition.Farm_ID\n  AND competition_record.Theme LIKE '%more than one%';\n\nWait,\nno,\nthat might not be correct. Let me think again. I need to find cities that have hosted\nmore than one competition. So,\n          I should\ngroup by the city\nand count the number of competitions they've hosted. If the count is\nmore than one,\n          include them. So,\n                  the query should\njoin city with competition_record via Host_city_ID,\n                                      then\ngroup by city\nand count the number of competitions. Then,\nselect cities\nwhere the count is greater than one. The correct SQL would be:\n  SELECT city.Official_Name\n  FROM city,\n       competition_record,\n       farm_competition WHERE city.City",
    "error_type": "ExecutionError",
    "gold_result": "  Official_Name\n0     Aroostook",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "What are the official names of cities that have hosted more than one competition?",
    "gold_query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
    "pred_query": "\nSELECT DISTINCT city.Official_Name\nFROM city,\n     competition_record,\n     farm_competition,\n     competition_record c2\nWHERE city.City_ID = competition_record.Host_city_ID\n  AND competition_record.Official_Name = c2.Official_Name\n  AND competition_record.Year = c2.Year\n  AND city.Official_Name != c2.Official_Name;\n\nWait,\nno,\nthat's not correct. Let me think again. I need to find cities\nwhere they have hosted\n  more than one competition. So,\n            I should look\n  for cities that have multiple entries in the competition_record table. Each entry in competition_record has a Host_city_ID,\n                                                                                                              which references city. So,\n  for each city,\n           I need to count how many times it appears in competition_record. If the count is\n  more than one,\n            include its official name. So,\n                                 the query should\n  select distinct official names\n  from city where the",
    "error_type": "ExecutionError",
    "gold_result": "  Official_Name\n0     Aroostook",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Show the status of the city that has hosted the greatest number of competitions.",
    "gold_query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT city.`Official_Name`,\n       city.`Status`\nFROM city\nJOIN farm_competition ON city.`City_ID` = farm_competition.`Host_city_ID`\nGROUP BY city.`Official_Name`\nORDER BY COUNT(farm_competition.`Competition_ID`) DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": " Status\nVillage",
    "pred_result": "Official_Name  Status\n    Aroostook Village"
  },
  {
    "db_id": "farm",
    "question": "Please show the themes of competitions with host cities having populations larger than 1000.",
    "gold_query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
    "pred_query": "\nSELECT DISTINCT fTheme\nFROM farm_competition f\nJOIN city c ON f.Host_city_ID = c.City_ID\nWHERE c.Population > 1000;",
    "error_type": "ExecutionError",
    "gold_result": "                 Theme\n0  Carnival M is back!\n1          Codehunters\n2         MTV Asia Aid",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?",
    "gold_query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
    "pred_query": "\nSELECT fTheme\nFROM farm_competition f\nJOIN city c ON f.Host_city_ID = c.City_ID\nWHERE c.Population > 1000;",
    "error_type": "ExecutionError",
    "gold_result": "                 Theme\n0  Carnival M is back!\n1          Codehunters\n2         MTV Asia Aid",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Please show the different statuses of cities and the average population of cities with each status.",
    "gold_query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
    "pred_query": "\nSELECT city.Status,\n       AVG(farm.cityPopulation) as AveragePopulation\nFROM city\nJOIN farm_competition ON city.City_ID = farm_competition.Host_city_ID\nJOIN competition_record ON farm_competition.Competition_ID = competition_record.Competition_ID\nJOIN farm ON competition_record.Farm_ID = farm.Farm_ID\nGROUP BY city.Status",
    "error_type": "ExecutionError",
    "gold_result": "    Status  avg(Population)\n0     Town          5706.00\n1  Village          1009.75",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "What are the statuses and average populations of each city?",
    "gold_query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
    "pred_query": "\nSELECT city.\"City_ID\",\n       city.\"Official_Name\",\n       city.\"Status\",\n       AVG(farm.\"Population\") AS \"Average Population\"\nFROM city\nJOIN farm_competition ON city.\"City_ID\" = farm_competition.\"Host_city_ID\"\nJOIN farm ON farm.\"Farm_ID\" = farm_competition.\"Farm_ID\"\nGROUP BY city.\"City_ID\",\n         city.\"Official_Name\",\n         city.\"Status\"",
    "error_type": "ExecutionError",
    "gold_result": "    Status  avg(Population)\n0     Town          5706.00\n1  Village          1009.75",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Please show the different statuses, ordered by the number of cities that have each.",
    "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
    "pred_query": "\nSELECT distinct Status\nFROM city\nORDER BY COUNT(Status) DESC;",
    "error_type": "ExecutionError",
    "gold_result": "    Status\n0     Town\n1  Village",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Return the different statuses of cities, ascending by frequency.",
    "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
    "pred_query": "\nSELECT Status,\n       COUNT(*) as Frequency\nFROM city\nGROUP BY Status\nORDER BY Frequency DESC;",
    "error_type": "Mismatch",
    "gold_result": " Status\n   Town\nVillage",
    "pred_result": " Status  Frequency\nVillage          4\n   Town          1"
  },
  {
    "db_id": "farm",
    "question": "List the most common type of Status across cities.",
    "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT COUNT(DISTINCT Status) AS Unique_Status_Count\nFROM city;",
    "error_type": "Mismatch",
    "gold_result": " Status\nVillage",
    "pred_result": " Unique_Status_Count\n                   2"
  },
  {
    "db_id": "farm",
    "question": "What is the most common status across all cities?",
    "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT COUNT(DISTINCT Status) AS Common_Status\nFROM city\nGROUP BY Status\nORDER BY Common_Status DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": " Status\nVillage",
    "pred_result": " Common_Status\n             1"
  },
  {
    "db_id": "farm",
    "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
    "gold_query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
    "pred_query": "\nSELECT city.Status\nFROM city\nWHERE city.Population > 1500\n  AND city.Population < 500;",
    "error_type": "Mismatch",
    "gold_result": " Status\nVillage",
    "pred_result": "Empty DataFrame\nColumns: [Status]\nIndex: []"
  },
  {
    "db_id": "farm",
    "question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?",
    "gold_query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
    "pred_query": "\nSELECT DISTINCT s.Status\nFROM city c\nJOIN farm_competition fc ON c.City_ID = fc.Host_city_ID\nJOIN competition_record cr ON fc.Competition_ID = cr.Competition_ID\nWHERE cr.Rank IN\n    (SELECT COUNT(DISTINCT cr.Rank)\n     FROM competition_record cr\n     WHERE cr.Population > 1500)\n  OR cr.Rank IN\n    (SELECT COUNT(DISTINCT cr.Rank)\n     FROM competition_record cr\n     WHERE cr.Population < 500);\n\n[Wait,\n no,\n that's not correct. Let me think again. The question is about cities, not farms or competitions. So I need to filter the cities based on their population. But the way I'm joining might not be correct. Maybe I should first get the cities with population over 1500\nand those with less",
    "error_type": "ExecutionError",
    "gold_result": "    Status\n0  Village",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.",
    "gold_query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500",
    "pred_query": "\nSELECT DISTINCT city.Official_Name\nFROM city,\n     farm_competition,\n     competition_record\nWHERE city.City_ID = farm_competition.Host_city_ID\n  AND competition_record.Farm_ID = farm_competition.Host_city_ID\n  AND competition_record.Rank = 1\nORDER BY city.Official_Name;",
    "error_type": "Mismatch",
    "gold_result": "          Official_Name\nGrand Falls/Grand-Sault\n          Perth-Andover\n              Aroostook",
    "pred_result": "Official_Name\n    Aroostook\n     Drummond"
  },
  {
    "db_id": "farm",
    "question": "Show the census ranking of cities whose status are not \"Village\".",
    "gold_query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
    "pred_query": "\nSELECT c.City_ID,\n       c.Official_Name,\n       c.Census_Ranking\nFROM city c\nWHERE c.Status != 'Village'\nORDER BY c.Census_Ranking;\n\nWait,\nbut the question is about the ranking,\n                              so perhaps the ranking is a text field?\nOr maybe it's a numeric field. If it's a text, ordering by it might not make sense. Maybe the ranking is an integer. Let me check the tables again. The city table has a column named \"Census_Ranking\" which is a text. Hmm,\n                                                                                                                                                                                                                that's odd. Maybe it's supposed to be a number. Alternatively,\n                                                                                                                                                                                                                                                        perhaps it's a string representation of the rank. So,\n                                                                                                                                                                                                                                                                                                ordering by it would be tricky. Maybe the ranking is stored as an integer elsewhere. Alternatively,\n                                                                                                                                                                                                                                                                                                                                                                          perhaps the ranking is determined by another table. Wait,",
    "error_type": "ExecutionError",
    "gold_result": "  Census_Ranking\n0    636 of 5008",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "How many aircrafts are there?",
    "gold_query": "SELECT count(*) FROM aircraft",
    "pred_query": "\nSELECT COUNT(DISTINCT `Aircraft_ID`)\nFROM `aircraft`;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        5",
    "pred_result": " COUNT(DISTINCT `Aircraft_ID`)\n                             5"
  },
  {
    "db_id": "aircraft",
    "question": "What is the number of aircraft?",
    "gold_query": "SELECT count(*) FROM aircraft",
    "pred_query": "\nSELECT COUNT(DISTINCT `Aircraft_ID`) AS `Number of Aircraft`\nFROM `aircraft`;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        5",
    "pred_result": " Number of Aircraft\n                  5"
  },
  {
    "db_id": "aircraft",
    "question": "List the description of all aircrafts.",
    "gold_query": "SELECT Description FROM aircraft",
    "pred_query": "\nSELECT `aircraft`.\"Aircraft\",\n       `aircraft`.\"Description\"\nFROM `aircraft`",
    "error_type": "Mismatch",
    "gold_result": "                  Description\n     Light utility helicopter\nTurboshaft utility helicopter\n      Tandem rotor helicopter\n        Heavy-lift helicopter\n        Heavy-lift helicopter",
    "pred_result": "             Aircraft                   Description\n        Robinson R-22      Light utility helicopter\n Bell 206B3 JetRanger Turboshaft utility helicopter\n       CH-47D Chinook       Tandem rotor helicopter\n            Mil Mi-26         Heavy-lift helicopter\nCH-53E Super Stallion         Heavy-lift helicopter"
  },
  {
    "db_id": "aircraft",
    "question": "What is the average number of international passengers of all airports?",
    "gold_query": "SELECT avg(International_Passengers) FROM airport",
    "pred_query": "\nSELECT AVG(`International_Passengers`)\nFROM `airport`",
    "error_type": "Mismatch",
    "gold_result": " avg(International_Passengers)\n                    16443156.6",
    "pred_result": " AVG(`International_Passengers`)\n                      16443156.6"
  },
  {
    "db_id": "aircraft",
    "question": "What is the average number of international passengers for an airport?",
    "gold_query": "SELECT avg(International_Passengers) FROM airport",
    "pred_query": "\nSELECT ROUND(AVG(international_passengers)) AS avg_intl_passengers\nFROM airport",
    "error_type": "Mismatch",
    "gold_result": " avg(International_Passengers)\n                    16443156.6",
    "pred_result": " avg_intl_passengers\n          16443157.0"
  },
  {
    "db_id": "aircraft",
    "question": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
    "gold_query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
    "pred_query": "\nSELECT SUM(airport.Domestic_Passengers) as Total_Domestic_Passengers\nFROM airport\nJOIN match ON airport.Airport_ID = match.Location\nJOIN aircraft ON match.Aircraft_ID = aircraft.Aircraft_ID\nLEFT JOIN pilot ON match.Winning_Pilot = pilot.Name\nWHERE airport.Airport_Name LIKE '%London%';",
    "error_type": "ExecutionError",
    "gold_result": "   sum(Domestic_Passengers)\n0                12957585.0",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What are the total number of domestic passengers at all London airports?",
    "gold_query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
    "pred_query": "\nSELECT SUM(airport.Domestic_Passengers) as Total_Domestic_Passengers\nFROM airport\nWHERE airport.Airport_ID IN\n    (SELECT a.airport_id\n     FROM airport_aircraft a\n     WHERE a.airport_id =\n         (SELECT airport_id\n          FROM match m\n          WHERE m.Location = 'London')\n       OR a.airport_id =\n         (SELECT airport_id\n          FROM match m\n          WHERE m.Location = 'London')) Wait,\n                            no,\n                            that's not correct. Let me think again.\n\nI need to get all the domestic passengers from all London airports. So first, I need to find all the airports in London. Then, for each of those airports, get their Domestic_Passengers. Then sum them all.\n\nSo, step 1: Find all airports where the airport is in London. How? By matching the 'Location' in the 'match",
    "error_type": "ExecutionError",
    "gold_result": "   sum(Domestic_Passengers)\n0                12957585.0",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What are the maximum and minimum number of transit passengers of all aiports.",
    "gold_query": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
    "pred_query": "\nSELECT MIN(Transit_Passengers),\n       MAX(Transit_Passengers)\nFROM airport;",
    "error_type": "Mismatch",
    "gold_result": " max(Transit_Passengers)  min(Transit_Passengers)\n                156246.0                   4395.0",
    "pred_result": " MIN(Transit_Passengers)  MAX(Transit_Passengers)\n                  4395.0                 156246.0"
  },
  {
    "db_id": "aircraft",
    "question": "What is the maximum and mininum number of transit passengers for all airports?",
    "gold_query": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
    "pred_query": "\nSELECT MIN(Transit_Passengers),\n       MAX(Transit_Passengers)\nFROM airport;",
    "error_type": "Mismatch",
    "gold_result": " max(Transit_Passengers)  min(Transit_Passengers)\n                156246.0                   4395.0",
    "pred_result": " MIN(Transit_Passengers)  MAX(Transit_Passengers)\n                  4395.0                 156246.0"
  },
  {
    "db_id": "aircraft",
    "question": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
    "pred_query": "\nSELECT DISTINCT a.aircraft\nFROM airport a,\n     aircraft ac\nWHERE a.airport_id = ac.airport_id\n  AND a.airport_name = 'London Gatwick';",
    "error_type": "ExecutionError",
    "gold_result": "        Aircraft\n0  Robinson R-22",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names of all the aircrafts associated with London Gatwick airport?",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
    "pred_query": "\nSELECT DISTINCT a.aircraft\nFROM airport_aircraft a,\n     aircraft b\nWHERE a.airport_id = b.airport_id\n  AND a.airport_id =\n    (SELECT airport_id\n     FROM airport\n     WHERE airport_name = 'London Gatwick');",
    "error_type": "ExecutionError",
    "gold_result": "        Aircraft\n0  Robinson R-22",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.",
    "gold_query": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
    "pred_query": "\nSELECT a.aircraft\nFROM airport a\nJOIN airport_aircraft aa ON a.airport_id = aa.airport_id\nJOIN aircraft ac ON aa.aircraft_id = ac.aircraft_id\nWHERE a.Total_Passengers > 10000000;",
    "error_type": "ExecutionError",
    "gold_result": "               Aircraft                    Description\n0  Bell 206B3 JetRanger  Turboshaft utility helicopter\n1         Robinson R-22       Light utility helicopter",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?",
    "gold_query": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
    "pred_query": "\nSELECT a.airport_name,\n       a.total_passengers,\n       ac.aircraft,\n       ac.description\nFROM airport a\nJOIN airport_aircraft aa ON a.airport_id = aa.airport_id\nJOIN aircraft ac ON aa.aircraft_id = ac.aircraft_id\nWHERE a.total_passengers > 10000000\nORDER BY a.airport_name;",
    "error_type": "Mismatch",
    "gold_result": "            Aircraft                   Description\nBell 206B3 JetRanger Turboshaft utility helicopter\n       Robinson R-22      Light utility helicopter",
    "pred_result": "   Airport_Name  Total_Passengers             Aircraft                   Description\n London Gatwick        34205887.0        Robinson R-22      Light utility helicopter\nLondon Heathrow        67054745.0 Bell 206B3 JetRanger Turboshaft utility helicopter"
  },
  {
    "db_id": "aircraft",
    "question": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?",
    "gold_query": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"",
    "pred_query": "\nSELECT AVG(airport.Total_Passengers) AS Average_Passengers\nFROM airport\nJOIN match ON airport.Airport_ID = match.Location\nJOIN aircraft ON match.Winning_Aircraft = aircraft.Aircraft_ID\nWHERE aircraft.Aircraft = 'Robinson R-22';",
    "error_type": "Mismatch",
    "gold_result": " avg(T3.Total_Passengers)\n               34205887.0",
    "pred_result": "Average_Passengers\n              None"
  },
  {
    "db_id": "aircraft",
    "question": "What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?",
    "gold_query": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"",
    "pred_query": "\nSELECT ROUND(AVG(\"airport_aircraft\".\"Total_Passengers\")) AS \"Average Total Passengers\"\nFROM `airport_aircraft`\nJOIN `aircraft` ON `airport_aircraft\".\"Aircraft_ID` = `aircraft\".\"Aircraft_ID`\nWHERE `airport_aircraft\".\"Aircraft_ID` = 'Robinson R-22'\nGROUP BY `airport_aircraft\".\"Airport_ID`",
    "error_type": "ExecutionError",
    "gold_result": "   avg(T3.Total_Passengers)\n0                34205887.0",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "Please list the location and the winning aircraft name.",
    "gold_query": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
    "pred_query": "\nSELECT a.Location,\n       ac.Aircraft\nFROM airport a\nJOIN aircraft ac ON a.Airport_ID = ac.Aircraft_ID",
    "error_type": "ExecutionError",
    "gold_result": "                          Location               Aircraft\n0          Mina' Zayid , Abu Dhabi          Robinson R-22\n1               Swan River , Perth          Robinson R-22\n2  Flamengo Beach , Rio de Janeiro   Bell 206B3 JetRanger\n3                Windsor , Ontario              Mil Mi-26\n4                    New York City         CH-47D Chinook\n5             EuroSpeedway Lausitz              Mil Mi-26\n6          River Danube , Budapest  CH-53E Super Stallion",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What is the location and name of the winning aircraft?",
    "gold_query": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
    "pred_query": "\nSELECT DISTINCT a.Location,\n                a.Airport_Name\nFROM `airport` a\nJOIN `airport_aircraft` b ON a.Airport_ID = b.Airport_ID\nAND b.Aircraft_ID =\n  (SELECT aircraft_id\n   FROM `match`\n   WHERE `Winning_Aircraft` = a.`Aircraft`)\nWHERE a.`Airport_ID` IN\n    (SELECT b.Airport_ID\n     FROM `match`\n     WHERE `Winning_Aircraft` = a.`Aircraft`);",
    "error_type": "ExecutionError",
    "gold_result": "                          Location               Aircraft\n0          Mina' Zayid , Abu Dhabi          Robinson R-22\n1               Swan River , Perth          Robinson R-22\n2  Flamengo Beach , Rio de Janeiro   Bell 206B3 JetRanger\n3                Windsor , Ontario              Mil Mi-26\n4                    New York City         CH-47D Chinook\n5             EuroSpeedway Lausitz              Mil Mi-26\n6          River Danube , Budapest  CH-53E Super Stallion",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What is the name of the aircraft that has won an award the most?",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT DISTINCT aircraft.Aircraft\nFROM match,\n     aircraft\nWHERE match.Winning_Aircraft = aircraft.Aircraft_ID;",
    "error_type": "Mismatch",
    "gold_result": " Aircraft\nMil Mi-26",
    "pred_result": "             Aircraft\n        Robinson R-22\n Bell 206B3 JetRanger\n            Mil Mi-26\n       CH-47D Chinook\nCH-53E Super Stallion"
  },
  {
    "db_id": "aircraft",
    "question": "List the names of aircrafts and the number of times it won matches.",
    "gold_query": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",
    "pred_query": "\nSELECT a.Aircraft,\n       COUNT(m.Winning_Aircraft) as Wins\nFROM aircraft a\nJOIN match m ON a.Aircraft_ID = m.Winning_Aircraft\nGROUP BY a.Aircraft\nORDER BY Wins DESC;",
    "error_type": "Mismatch",
    "gold_result": "             Aircraft  COUNT(*)\n        Robinson R-22         2\n Bell 206B3 JetRanger         1\n       CH-47D Chinook         1\n            Mil Mi-26         2\nCH-53E Super Stallion         1",
    "pred_result": "             Aircraft  Wins\n        Robinson R-22     2\n            Mil Mi-26     2\nCH-53E Super Stallion     1\n       CH-47D Chinook     1\n Bell 206B3 JetRanger     1"
  },
  {
    "db_id": "aircraft",
    "question": "For each aircraft that has won an award, what is its name and how many time has it won?",
    "gold_query": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",
    "pred_query": "\nSELECT a.Aircraft,\n       COUNT(m.Winning_Aircraft) as NumberOfWins\nFROM aircraft a\nJOIN match m ON a.Aircraft_ID = m.Winnin Wait,\n                that's not correct. Let me think again. I need to\njoin the match table with the aircraft table. The match table has a\nforeign key to aircraft,\n               so I should\njoin on m.Aircraft_ID = a.Aircraft_ID. So the correct SQL should be:\nSELECT a.Aircraft,\n       COUNT(m.Winning_Aircraft) as NumberOfWins\nFROM aircraft a\nJOIN match m ON a.Aircraft_ID = m.Aircraft_ID\nGROUP BY a.Aircraft_ID",
    "error_type": "ExecutionError",
    "gold_result": "                Aircraft  COUNT(*)\n0          Robinson R-22         2\n1   Bell 206B3 JetRanger         1\n2         CH-47D Chinook         1\n3              Mil Mi-26         2\n4  CH-53E Super Stallion         1",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "List the names of aircrafts and that won matches at least twice.",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
    "pred_query": "\nSELECT DISTINCT a.aircraft\nFROM match m,\n           aircraft a\nWHERE m.Winning_Aircraft = a.Aircraft_ID\n  AND m.Round >= 2",
    "error_type": "Mismatch",
    "gold_result": "     Aircraft\nRobinson R-22\n    Mil Mi-26",
    "pred_result": "             Aircraft\n        Robinson R-22\n Bell 206B3 JetRanger\n            Mil Mi-26\n       CH-47D Chinook\nCH-53E Super Stallion"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names of all aircrafts that have won a match at least twice?",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
    "pred_query": "\nSELECT DISTINCT a.aircraft\nFROM match m\nJOIN aircraft a ON m.Winning_Aircraft = a.Aircraft_ID\nGROUP BY a.aircraft\nHAVING COUNT(m.Winning_Aircraft) >= 2;",
    "error_type": "Mismatch",
    "gold_result": "     Aircraft\nRobinson R-22\n    Mil Mi-26",
    "pred_result": "     Aircraft\n    Mil Mi-26\nRobinson R-22"
  },
  {
    "db_id": "aircraft",
    "question": "List the names of aircrafts and that did not win any match.",
    "gold_query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
    "pred_query": "\nSELECT a.Aircraft\nFROM aircraft a\nWHERE a.Aircraft_ID NOT IN\n    (SELECT m.Aircraft_ID\n     FROM match m)",
    "error_type": "ExecutionError",
    "gold_result": "Empty DataFrame\nColumns: [Aircraft]\nIndex: []",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names of all aicrafts that have never won any match?",
    "gold_query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
    "pred_query": "\nSELECT DISTINCT a.aircraft\nFROM aircraft a,\n     match m\nWHERE a.aircraft_id = m.aircraft_id\n  AND m.winning_aircraft IS NULL;",
    "error_type": "ExecutionError",
    "gold_result": "Empty DataFrame\nColumns: [Aircraft]\nIndex: []",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.",
    "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
    "pred_query": "\nSELECT Name,\n       Age\nFROM pilot\nWHERE Age < 30\n  AND\n    (SELECT COUNT(*)\n     FROM match\n     WHERE Winning_Pilot = pilot.Name) =\n    (SELECT MAX(COUNT(*))\n     FROM\n       (SELECT COUNT(*) AS Total_Wins\n        FROM match\n        WHERE Winning_Pilot = pilot.Name) AS Total_Wins_Pilot);\n\nWait,\nthat's a subquery within a subquery. Maybe I should use a Common Table Expression (CTE) to make it cleaner. Let me rewrite it.",
    "error_type": "ExecutionError",
    "gold_result": "            Name  Age\n0  Ayana Spencer   25",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What is the name and age of the pilot younger than 30 who has won the most number of times?",
    "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
    "pred_query": "\nSELECT p.Name,\n       p.Age\nFROM pilot p\nJOIN match m ON p.Pilot_Id = m.Winning_Pilot\nGROUP BY p.Name,\n         p.Age\nORDER BY p.Age ASC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": "         Name  Age\nAyana Spencer   25",
    "pred_result": "                Name  Age\nKatheryn Gorczany IV   20"
  },
  {
    "db_id": "aircraft",
    "question": "what is the name and age of the youngest winning pilot?",
    "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
    "pred_query": "\nSELECT `Name`,\n       `Age`\nFROM `pilot`\nWHERE `Pilot_Id` IN\n    (SELECT `Winning_Pilot`\n     FROM `match`\n     ORDER BY `Age` ASC\n     LIMIT 1);",
    "error_type": "ExecutionError",
    "gold_result": "                   Name  Age\n0  Katheryn Gorczany IV   20",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "How old is the youngest winning pilot and what is their name?",
    "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
    "pred_query": "\nSELECT MIN(pilot.Age) AS \"Youngest Pilot Age\",\n       pilot.Name\nFROM pilot\nJOIN match ON pilot.Pilot_Id = match.Winning_Pilot\nWHERE match.Winning_Aircraft IN\n    (SELECT MIN(aircraft.Max_Gross_Weight) AS \"Min Max Weight\",\n     FROM aircraft) Wait,\n                                no,\n                                that's not right. Let me think again.\n\nI need to find the youngest pilot, so I should select the pilot with the minimum age. The pilot's ID is linked to the match table via the winning pilot. The winning pilot's aircraft is linked to the aircraft table. So I need to get the pilot's age\n  and ensure that their aircraft has the minimum max gross weight,\n                                                     but wait,\n                                                     does the question require the pilot's aircraft to be the one with the youngest pilot?\n  Or is it",
    "error_type": "ExecutionError",
    "gold_result": "                   Name  Age\n0  Katheryn Gorczany IV   20",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "find the name of pilots who did not win the matches held in the country of Australia.",
    "gold_query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
    "pred_query": "\nSELECT p.Name\nFROM pilot p\nJOIN match m ON p.Pilot_Id = m.Winning_Pilot\nWHERE m.Country = 'Australia'\n  AND p.Pilot_Id NOT IN\n    (SELECT p2.Pilot_Id\n     FROM pilot p2\n     WHERE p2.Winning_Pilot = m.Winning_Pilot) [;/SQL] </think> To find the name of pilots who did not win the matches held in Australia,\n                                                                                                                               we need to: 1. Identify pilots who won matches in Australia using a\n  join on `pilot`\n  and `match` tables. 2. Exclude pilots who won matches in Australia\n  from the list of all pilots. The SQL query is:",
    "error_type": "ExecutionError",
    "gold_result": "                         Name\n0       Prof. Zackery Collins\n1        Katheryn Gorczany IV\n2   Mr. Cristian Halvorson II\n3            Ellen Ledner III\n4             Elisha Hickle V\n5          Dr. Jade Bradtke V\n6             Winnifred Boyle\n7              Della Lindgren\n8              Maxwell Graham\n9               Blaise Muller\n10             Baylee Steuber",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names of the pilots that have not won any matches in Australia?",
    "gold_query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
    "pred_query": "\nSELECT DISTINCT m.Winning_Pilot\nFROM match m\nWHERE m.Location = 'Australia'\n  AND m.Winning_Pilot IS NOT NULL;\n\nWait,\nno,\nthat would give the pilots who have won. I need to find pilots who have never won. So,\n                                                                        perhaps I need to get all pilots,\n                                                                                                  subtract those who have won. But without a pilot table,\n                                                                                                                                                   it's tricky. Wait, the pilot table has all pilots. So, to find pilots who have never won, I can get all pilots, then subtract those who have won in any match in Australia.\n\nSo, the query would be:\n\nSELECT p.Name FROM pilot p WHERE p.Pilot_Id NOT IN (SELECT m.Winning_Pilot FROM match m WHERE m.Location = 'Australia');\n\nBut wait,\nthe match table has the winning pilot,\n                        but the pilot might have won in",
    "error_type": "ExecutionError",
    "gold_result": "                         Name\n0       Prof. Zackery Collins\n1        Katheryn Gorczany IV\n2   Mr. Cristian Halvorson II\n3            Ellen Ledner III\n4             Elisha Hickle V\n5          Dr. Jade Bradtke V\n6             Winnifred Boyle\n7              Della Lindgren\n8              Maxwell Graham\n9               Blaise Muller\n10             Baylee Steuber",
    "pred_result": "None"
  },
  {
    "db_id": "architecture",
    "question": "How many architects are female?",
    "gold_query": "SELECT count(*) FROM architect WHERE gender  =  'female'",
    "pred_query": "\nSELECT COUNT(*)\nFROM architect\nWHERE gender = 'female';",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        1",
    "pred_result": " COUNT(*)\n        1"
  },
  {
    "db_id": "architecture",
    "question": "What is the maximum length in meters for the bridges and what are the architects' names?",
    "gold_query": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id",
    "pred_query": "\nSELECT DISTINCT architect.name,\n                MAX(bridge.length_meters) AS max_length\nFROM architect\nJOIN bridge ON architect.id = bridge.architect_id\nWHERE bridge.length_meters IS NOT NULL\nGROUP BY architect.name\nORDER BY max_length DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": " max(T1.length_meters)               name\n                 121.0 Frank Lloyd Wright",
    "pred_result": "              name  max_length\nFrank Lloyd Wright       121.0"
  },
  {
    "db_id": "architecture",
    "question": "What is the average length in feet of the bridges?",
    "gold_query": "SELECT avg(length_feet) FROM bridge",
    "pred_query": "\nSELECT AVG(b.length_feet) AS average_length\nFROM bridge b",
    "error_type": "Mismatch",
    "gold_result": " avg(length_feet)\n           244.64",
    "pred_result": " average_length\n         244.64"
  },
  {
    "db_id": "architecture",
    "question": "What are the distinct names and nationalities of the architects who have ever built a mill?",
    "gold_query": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id",
    "pred_query": "\nSELECT DISTINCT architect.name,\n                architect.nationality\nFROM architect,\n     bridge,\n     mill\nWHERE bridge.architect_id = architect.id\n  AND mill.architect_id = architect.id\n  AND mill.id =\n    (SELECT id\n     FROM mill\n     WHERE name = ?)\n  AND bridge.id =\n    (SELECT id\n     FROM bridge\n     WHERE architect_id =\n         (SELECT id\n          FROM architect\n          WHERE name = ?))[Wait,\n                           that's not right. Maybe I should use a different approach.] Wait,\n                                                                                       perhaps I should first get all the mill entries,\n                                                                                                                               then find their architect IDs,\n  and then get the\n  corresponding names\n  and nationalities\n  from the architect table. Alternatively,\n                     I can\n  join the tables directly. Let me think: I need to get the names\n  and nationalities of architects who have built a mill. So,\n                                                 I can\n  join the mill table with the architect table via the architect_id. Then,\n  from the",
    "error_type": "ExecutionError",
    "gold_result": "                 name       nationality\n0  Frank Lloyd Wright          American\n1         Frank Gehry          Canadian\n2          Zaha Hadid    Iraqi, British\n3   Mies Van Der Rohe  German, American",
    "pred_result": "None"
  },
  {
    "db_id": "architecture",
    "question": "What are the names of the mills which are not located in 'Donceel'?",
    "gold_query": "SELECT name FROM mill WHERE LOCATION != 'Donceel'",
    "pred_query": "\nSELECT m.name as mill_name\nFROM mill m\nWHERE NOT EXISTS\n    (SELECT *\n     FROM architect a\n     WHERE a.id = m.architect_id\n       AND a.nationality = 'Donceel')",
    "error_type": "Mismatch",
    "gold_result": "             name\n   Le Vieux Molen\n  Moulin de Fexhe\nMoulin de Momalle\nMoulin du Château\nMoulin de Pousset",
    "pred_result": "        mill_name\n   Le Vieux Molen\n  Moulin Bertrand\n  Moulin de Fexhe\nMoulin de Momalle\nMoulin du Château\nMoulin de Pousset"
  },
  {
    "db_id": "architecture",
    "question": "What are the ids, names and genders of the architects who built two bridges or one mill?",
    "gold_query": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1",
    "pred_query": "\nSELECT a.id,\n       a.name,\n       a.gender\nFROM architect a\nJOIN bridge b ON a.id = b.architect_id\nJOIN mill m ON a.id = m.architect_id\nWHERE (b.id IS NOT NULL)\n  AND (m.id IS NOT NULL)\n  AND (b.id IS NOT NULL\n       OR m.id IS NOT NULL)\n  AND (COUNT(b.id) + COUNT(m.id)) >= 2\n  OR (COUNT(b.id) + COUNT(m.id)) == 1",
    "error_type": "ExecutionError",
    "gold_result": "  id               name  gender\n0  2        Frank Gehry    male\n1  3         Zaha Hadid  female\n2  4  Mies Van Der Rohe    male",
    "pred_result": "None"
  },
  {
    "db_id": "architecture",
    "question": "Which of the mill names contains the french word 'Moulin'?",
    "gold_query": "SELECT name FROM mill WHERE name LIKE '%Moulin%'",
    "pred_query": "\nSELECT m.name as MillName\nFROM mill m\nJOIN architect a ON m.architect_id = a.id\nWHERE m.name LIKE '%Moulin%';",
    "error_type": "Mismatch",
    "gold_result": "             name\n  Moulin Bertrand\n  Moulin de Fexhe\nMoulin de Momalle\nMoulin du Château\nMoulin de Pousset",
    "pred_result": "         MillName\n  Moulin Bertrand\n  Moulin de Fexhe\nMoulin de Momalle\nMoulin de Pousset\nMoulin du Château"
  },
  {
    "db_id": "architecture",
    "question": "What is the most common mill type, and how many are there?",
    "gold_query": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
    "pred_query": "\nSELECT type,\n       COUNT(type) as count\nFROM mill\nGROUP BY type\nORDER BY count DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": "       type  count(*)\nGrondzeiler         5",
    "pred_result": "       type  count\nGrondzeiler      5"
  },
  {
    "db_id": "architecture",
    "question": "How many architects haven't built a mill before year 1850?",
    "gold_query": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );",
    "pred_query": "\nSELECT COUNT(*)\nFROM architect\nWHERE NOT EXISTS\n    (SELECT *\n     FROM mill\n     WHERE mill.architect_id = architect.id\n       AND mill.built_year < 1850);",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        2",
    "pred_result": " COUNT(*)\n        2"
  },
  {
    "db_id": "architecture",
    "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
    "gold_query": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet",
    "pred_query": "\nSELECT DISTINCT b.name AS bridge_name\nFROM bridge b\nJOIN architect a ON b.architect_id = a.id\nWHERE a.name = 'American';\n\n[Wait, no, that's not correct. The question is about the length in feet, so I need to include the length_feet field and sort by that. Also, the question specifies to show the name of the bridges designed by American architects, so I should filter where the architect's nationality is American, not just the name. Additionally, the length_feet should be in ascending order for sorting.]",
    "error_type": "ExecutionError",
    "gold_result": "                           name\n0   Hazarchishma Natural Bridge\n1                Jiangzhou Arch\n2                Shipton's Arch\n3  Xian Ren Qiao (Fairy Bridge)",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Show all the locations where no cinema has capacity over 800.",
    "gold_query": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800",
    "pred_query": "\nSELECT distinct c.Location\nFROM cinema c\nWHERE NOT EXISTS\n    (SELECT *\n     FROM schedule s\n     WHERE s.Cinema_ID = c.Cinema_ID\n       AND s.Capacity > 800);",
    "error_type": "ExecutionError",
    "gold_result": "           Location\n0       County Cork\n1     County Dublin\n2      County Laois\n3      County Louth\n4  County Tipperary",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
    "gold_query": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011",
    "pred_query": "\nSELECT DISTINCT c.Location\nFROM cinema c\nJOIN schedule s ON c.Cinema_ID = s.Cinema_ID\nGROUP BY c.Location\nHAVING COUNT(DISTINCT s.Openning_year) >= 2\nAND YEAR(DATE) IN (2010,\n                   2011);",
    "error_type": "ExecutionError",
    "gold_result": "           Location\n0  County Tipperary",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "How many cinema do we have?",
    "gold_query": "SELECT count(*) FROM cinema",
    "pred_query": "\nSELECT COUNT(DISTINCT Cinema_ID) AS NumberOfCinemas\nFROM cinema;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n       10",
    "pred_result": " NumberOfCinemas\n              10"
  },
  {
    "db_id": "cinema",
    "question": "Count the number of cinemas.",
    "gold_query": "SELECT count(*) FROM cinema",
    "pred_query": "\nSELECT COUNT(DISTINCT Cinema_ID) AS NumberOfCinemas\nFROM cinema;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n       10",
    "pred_result": " NumberOfCinemas\n              10"
  },
  {
    "db_id": "cinema",
    "question": "Find the distinct locations that has a cinema.",
    "gold_query": "SELECT DISTINCT LOCATION FROM cinema",
    "pred_query": "\nSELECT DISTINCT cinema.Location\nFROM cinema,\n     schedule,\n     film\nWHERE cinema.Cinema_ID = schedule.Cinema_ID\n  AND schedule.Film_ID = film.Film_ID;",
    "error_type": "Mismatch",
    "gold_result": "        Location\n  County Wicklow\n     County Cork\n   County Dublin\n    County Clare\nCounty Tipperary\n    County Laois\n    County Louth",
    "pred_result": "      Location\nCounty Wicklow\n   County Cork\n  County Laois\n  County Clare\n  County Louth"
  },
  {
    "db_id": "cinema",
    "question": "Show all the cinema names and opening years in descending order of opening year.",
    "gold_query": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC",
    "pred_query": "\nSELECT c.Name,\n       f.Openning_year\nFROM cinema c\nJOIN schedule s ON c.Cinema_ID = s.Cinema_ID\nJOIN film f ON s.Film_ID = f.Film_ID\nORDER BY f.Openning_year DESC;",
    "error_type": "ExecutionError",
    "gold_result": "           Name  Openning_year\n0  Dublin Array           2015\n1         Oriel           2013\n2   Carrowleagh           2012\n3  Grouse Lodge           2011\n4    Moneypoint           2011\n5  Mount Callan           2011\n6       Codling           2010\n7      Glenough           2010\n8     Gortahile           2010\n9      Glenmore           2009",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "What are the name and location of the cinema with the largest capacity?",
    "gold_query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
    "pred_query": "\nSELECT c.Name,\n       c.Location\nFROM cinema c\nJOIN schedule s ON c.Cinema_ID = s.Cinema_ID\nJOIN film f ON s.Film_ID = f.Film_ID\nWHERE s.Capacity =\n    (SELECT MAX(sCapacity)\n     FROM schedule)\nGROUP BY c.Cinema_ID",
    "error_type": "ExecutionError",
    "gold_result": "      Name        Location\n0  Codling  County Wicklow",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.",
    "gold_query": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011",
    "pred_query": "\nSELECT MIN(ccinema.Capacity) as Min_Capacity,\n       MAX(ccinema.Capacity) as Max_Capacity,\n       AVG(ccinema.Capacity) as Avg_Capacity\nFROM cinema\nWHERE cinema.Openning_year >= 2011",
    "error_type": "ExecutionError",
    "gold_result": "   avg(capacity)  min(capacity)  max(capacity)\n0     399.666667            203            908",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Show each location and the number of cinemas there.",
    "gold_query": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION",
    "pred_query": "\nSELECT distinct location\nFROM cinema,\n     schedule\nWHERE cinema.Cinema_ID = schedule.Cinema_ID\nGROUP BY location;",
    "error_type": "Mismatch",
    "gold_result": "        Location  count(*)\n    County Clare         3\n     County Cork         1\n   County Dublin         1\n    County Laois         1\n    County Louth         1\nCounty Tipperary         2\n  County Wicklow         1",
    "pred_result": "      Location\n  County Clare\n   County Cork\n  County Laois\n  County Louth\nCounty Wicklow"
  },
  {
    "db_id": "cinema",
    "question": "What is the location with the most cinemas opened in year 2010 or later?",
    "gold_query": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
    "pred_query": "\nSELECT distinct c.Location\nFROM cinema c\nJOIN schedule s ON c.Cinema_ID = s.Cinema_ID\nWHERE s.Openning_year >= 2010\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "error_type": "ExecutionError",
    "gold_result": "           Location\n0  County Tipperary",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Show all the locations with at least two cinemas with capacity above 300.",
    "gold_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
    "pred_query": "\nSELECT distinct c.Location\nFROM cinema c\nJOIN schedule s ON c.Cinema_ID = s.Cinema_ID\nGROUP BY c.Location\nHAVING COUNT(DISTINCT s.Film_ID) >= 2\nAND c.Capacity > 300;",
    "error_type": "Mismatch",
    "gold_result": "    Location\nCounty Clare",
    "pred_result": "      Location\nCounty Wicklow"
  },
  {
    "db_id": "cinema",
    "question": "Which locations have 2 or more cinemas with capacity over 300?",
    "gold_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
    "pred_query": "\nSELECT distinct c.Location\nFROM cinema c\nJOIN schedule s ON c.Cinema_ID = s.Cinema_ID\nJOIN film f ON s.Film_ID = f.Film_ID\nWHERE s.Capacity > 300\nGROUP BY c.Location\nHAVING COUNT(s.Film_ID) >= 2",
    "error_type": "ExecutionError",
    "gold_result": "       Location\n0  County Clare",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Show the title and director for all films.",
    "gold_query": "SELECT title ,  directed_by FROM film",
    "pred_query": "\nSELECT Title,\n       Director\nFROM film;",
    "error_type": "ExecutionError",
    "gold_result": "                              Title             Directed_by\n0   The Case of the Mystery Weekend          Bill Schreiner\n1       The Case of the Smart Dummy          Bill Schreiner\n2          The Case: Off the Record          Bill Schreiner\n3  The Case of the Bermuda Triangle  Jesus Salvador Treviño\n4      The Case of the Piggy Banker          Bill Schreiner",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "What are the title and director of each film?",
    "gold_query": "SELECT title ,  directed_by FROM film",
    "pred_query": "\nSELECT s.Title,\n       f.Directed_by\nFROM film f\nJOIN schedule s ON f.Film_ID = s.Film_ID;\n\nWait,\nno,\nthat's not correct. The schedule table has the Film_ID, but the director is in the film table. So the correct query should be:\n\nSELECT s.Title, f.Directed_by FROM film f JOIN schedule s ON f.Film_ID = s.Film_ID;\nWait, no, that's not correct. The schedule table has the Film_ID,\n                                                         but the director is in the film table. So the correct query should be:\nSELECT s.Title,\n       f.Directed_by\nFROM film f\nJOIN schedule s ON f.Film_ID = s.Film_ID;\n\nWait,\nno,\nthat's not correct. The schedule table has the Film_ID,\n                                               but the director is in the film table. So",
    "error_type": "ExecutionError",
    "gold_result": "                              Title             Directed_by\n0   The Case of the Mystery Weekend          Bill Schreiner\n1       The Case of the Smart Dummy          Bill Schreiner\n2          The Case: Off the Record          Bill Schreiner\n3  The Case of the Bermuda Triangle  Jesus Salvador Treviño\n4      The Case of the Piggy Banker          Bill Schreiner",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Show all directors.",
    "gold_query": "SELECT DISTINCT directed_by FROM film",
    "pred_query": "\nSELECT DISTINCT Director\nFROM film;",
    "error_type": "ExecutionError",
    "gold_result": "              Directed_by\n0          Bill Schreiner\n1  Jesus Salvador Treviño",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Who are all the directors?",
    "gold_query": "SELECT DISTINCT directed_by FROM film",
    "pred_query": "\nSELECT DISTINCT s.Directed_by\nFROM film,\n     schedule\nWHERE s.Film_ID = f.Film_ID\n  AND s.Cinema_ID = c.Cinema_ID;\n\nWait,\nno,\nthat's not correct. Let me think again. I need to get all directors,\n                                                          so I should\nselect\nfrom the film table\nwhere the director is not null. But how to\n  join the tables? The schedule table connects film\n  and cinema,\n      so to get directors,\n                I need to\n  join film with schedule,\n  and then perhaps with cinema. But the question is only about directors,\n                                                         so maybe I can just\n  select\n  from the film table where the director is not null. But the problem is that the schedule table is needed to connect to the cinema,\n                                                                                                                         but the director is in the film table. So perhaps the correct query is to\n  select the directed_by\n  from the film table,\n                but",
    "error_type": "ExecutionError",
    "gold_result": "              Directed_by\n0          Bill Schreiner\n1  Jesus Salvador Treviño",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "List all directors along with the number of films directed by each director.",
    "gold_query": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by",
    "pred_query": "\nSELECT Director\nFROM film\nGROUP BY Director;",
    "error_type": "ExecutionError",
    "gold_result": "              Directed_by  count(*)\n0          Bill Schreiner         4\n1  Jesus Salvador Treviño         1",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "What is total number of show times per dat for each cinema?",
    "gold_query": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id",
    "pred_query": "\nSELECT c.Cinema_ID,\n       f.Title,\n       s.Date,\n       s.Show_times_per_day\nFROM film f\nJOIN schedule s ON f.Film_ID = s.Film_ID\nJOIN cinema c ON s.Cinema_ID = c.Cinema_ID\nGROUP BY c.Cinema_ID,\n         f.Title,\n         s.Date",
    "error_type": "Mismatch",
    "gold_result": "        Name  sum(T1.show_times_per_day)\n     Codling                          10\n Carrowleagh                           5\n   Gortahile                           4\nMount Callan                           5\n       Oriel                           5",
    "pred_result": " Cinema_ID                            Title    Date  Show_times_per_day\n         1  The Case of the Mystery Weekend  21 May                   5\n         1      The Case of the Smart Dummy  21 May                   3\n         1         The Case: Off the Record  21 Jun                   2\n         2  The Case of the Mystery Weekend 11 July                   5\n         6     The Case of the Piggy Banker   2 Aug                   4\n         9 The Case of the Bermuda Triangle  20 May                   5\n        10  The Case of the Mystery Weekend  19 May                   5"
  },
  {
    "db_id": "cinema",
    "question": "What are the title and maximum price of each film?",
    "gold_query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
    "pred_query": "\nSELECT f.Title,\n       MAX(s.Price) AS MaxPrice\nFROM film f\nJOIN schedule s ON f.Film_ID = s.Film_ID\nGROUP BY f.Title;\n\n[Wait, no, that's not correct. The group by should be on the film ID, not the title. Because each film can have multiple entries in the schedule, each with a different price. So to get the maximum price per film, we need to group by the film ID and then find the maximum price for each film. Then, we can select the title and the maximum price. So the correct query should group by f.Film_ID, not f.Title.]",
    "error_type": "ExecutionError",
    "gold_result": "                              Title  max(T1.price)\n0   The Case of the Mystery Weekend          15.99\n1       The Case of the Smart Dummy          12.99\n2          The Case: Off the Record           8.99\n3  The Case of the Bermuda Triangle           9.99\n4      The Case of the Piggy Banker          12.99",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Give me the title and highest price for each film.",
    "gold_query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
    "pred_query": "\nSELECT f.Title,\n       MAX(s.Price) AS HighestPrice\nFROM film f\nJOIN schedule s ON f.Film_ID = s.Film_ID\nGROUP BY f.Film_ID;",
    "error_type": "Mismatch",
    "gold_result": "                           Title  max(T1.price)\n The Case of the Mystery Weekend          15.99\n     The Case of the Smart Dummy          12.99\n        The Case: Off the Record           8.99\nThe Case of the Bermuda Triangle           9.99\n    The Case of the Piggy Banker          12.99",
    "pred_result": "                           Title  HighestPrice\n The Case of the Mystery Weekend         15.99\n     The Case of the Smart Dummy         12.99\n        The Case: Off the Record          8.99\nThe Case of the Bermuda Triangle          9.99\n    The Case of the Piggy Banker         12.99"
  },
  {
    "db_id": "cinema",
    "question": "What are the title and director of the films without any schedule?",
    "gold_query": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
    "pred_query": "\nSELECT s.Film_ID,\n       f.Title,\n       f.Directed_by\nFROM film f\nLEFT JOIN schedule s ON f.Film_ID = s.Film_ID\nWHERE s.Cinema_ID IS NULL;",
    "error_type": "Mismatch",
    "gold_result": "Empty DataFrame\nColumns: [Title, Directed_by]\nIndex: []",
    "pred_result": "Empty DataFrame\nColumns: [Film_ID, Title, Directed_by]\nIndex: []"
  },
  {
    "db_id": "cinema",
    "question": "Show director with the largest number of show times in total.",
    "gold_query": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
    "pred_query": "\nSELECT d.Director\nFROM film f,\n     schedule s,\n     cinema c\nWHERE f.Film_ID = s.Film_ID\n  AND s.Cinema_ID = c.Cinema_ID\nGROUP BY d.Director\nORDER BY COUNT(s.Show_times_per_day) DESC\nLIMIT 1;\n\nWait,\nno,\nthat's not correct. Let me think again. I need to get the director,\nand count the total show times across all cinemas\nfor their films. So,\n    I should first get the director,\n                       then\nfor each film they have,\n                   sum the show times across all their screenings. So,\n                                                 the correct approach is to\njoin film with schedule on Film_ID,\n                           then\ngroup by Director\nand sum the Show_times_per_day. Then\norder by that sum in descending\norder\nand pick the top one. So the correct SQL should be:\nSELECT d.Director",
    "error_type": "ExecutionError",
    "gold_result": "      Directed_by\n0  Bill Schreiner",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Find the locations that have more than one movie theater with capacity above 300.",
    "gold_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
    "pred_query": "\nSELECT distinct c.Location\nFROM cinema c\nJOIN schedule s ON c.Cinema_ID = s.Cinema_ID\nWHERE s.Capacity > 300\nGROUP BY c.Location\nHAVING COUNT(s.Film_ID) > 1",
    "error_type": "ExecutionError",
    "gold_result": "       Location\n0  County Clare",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "In which locations are there more than one movie theater with capacity above 300?",
    "gold_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
    "pred_query": "\nSELECT distinct c.Location\nFROM cinema c\nJOIN schedule s ON c.Cinema_ID = s.Cinema_ID\nJOIN film f ON s.Film_ID = f.Film_ID\nWHERE s.Capacity > 300\nGROUP BY c.Location\nHAVING COUNT(s.Film_ID) > 1",
    "error_type": "ExecutionError",
    "gold_result": "       Location\n0  County Clare",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "How many films have the word 'Dummy' in their titles?",
    "gold_query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
    "pred_query": "\nSELECT COUNT(D distinct\n             FROM film\n             WHERE Title LIKE '%Dummy%')",
    "error_type": "ExecutionError",
    "gold_result": "   count(*)\n0         1",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Count the number of films whose title contains the word 'Dummy'.",
    "gold_query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
    "pred_query": "\nSELECT COUNT(film.Title)\nFROM film\nWHERE film.Title LIKE '%Dummy%';",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        1",
    "pred_result": " COUNT(film.Title)\n                 1"
  }
]