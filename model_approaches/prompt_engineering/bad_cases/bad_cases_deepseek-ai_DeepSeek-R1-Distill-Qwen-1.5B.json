[
  {
    "db_id": "department_management",
    "question": "How many heads of the departments are older than 56 ?",
    "gold_query": "SELECT count(*) FROM head WHERE age  >  56",
    "pred_query": "\nSELECT COUNT(*)\nFROM head\nWHERE head.age > 56;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        5",
    "pred_result": " COUNT(*)\n        5"
  },
  {
    "db_id": "department_management",
    "question": "List the name, born state and age of the heads of departments ordered by age.",
    "gold_query": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
    "pred_query": "\nSELECT name,\n       born_state,\n       age\nFROM head;",
    "error_type": "Mismatch",
    "gold_result": "              name  born_state  age\nPádraig Harrington Connecticut 43.0\n      Stewart Cink     Florida 50.0\n       Dudley Hart  California 52.0\n      Jeff Maggert    Delaware 53.0\n        Nick Faldo  California 56.0\n       Tiger Woods     Alabama 67.0\n  Franklin Langham Connecticut 67.0\n     Sergio García  California 68.0\n        K. J. Choi     Alabama 69.0\n     Billy Mayfair  California 69.0",
    "pred_result": "              name  born_state  age\n       Tiger Woods     Alabama 67.0\n     Sergio García  California 68.0\n        K. J. Choi     Alabama 69.0\n       Dudley Hart  California 52.0\n      Jeff Maggert    Delaware 53.0\n     Billy Mayfair  California 69.0\n      Stewart Cink     Florida 50.0\n        Nick Faldo  California 56.0\nPádraig Harrington Connecticut 43.0\n  Franklin Langham Connecticut 67.0"
  },
  {
    "db_id": "department_management",
    "question": "List the creation year, name and budget of each department.",
    "gold_query": "SELECT creation ,  name ,  budget_in_billions FROM department",
    "pred_query": "\nSELECT dDepartment_ID,\n       dName,\n       dBudget_in_Billions,\n       dCreation,\n       dNum_Employees\nFROM department",
    "error_type": "ExecutionError",
    "gold_result": "   Creation                           Name  Budget_in_Billions\n0      1789                          State                9.96\n1      1789                       Treasury               11.10\n2      1947                        Defense              439.30\n3      1870                        Justice               23.40\n4      1849                       Interior               10.70\n5      1889                    Agriculture               77.60\n6      1903                       Commerce                6.20\n7      1913                          Labor               59.70\n8      1953      Health and Human Services              543.20\n9      1965  Housing and Urban Development               46.20\n10     1966                 Transportation               58.00\n11     1977                         Energy               21.50\n12     1979                      Education               62.80\n13     1989               Veterans Affairs               73.20\n14     2002              Homeland Security               44.60",
    "pred_result": "None"
  },
  {
    "db_id": "department_management",
    "question": "What are the maximum and minimum budget of the departments?",
    "gold_query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
    "pred_query": "\nSELECT MAX(Budget_in_Billions) AS Max_Budget,\n       MIN(Budget_in_Billions) AS Min_Budget\nFROM department",
    "error_type": "Mismatch",
    "gold_result": " max(budget_in_billions)  min(budget_in_billions)\n                   543.2                      6.2",
    "pred_result": " Max_Budget  Min_Budget\n      543.2         6.2"
  },
  {
    "db_id": "department_management",
    "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
    "gold_query": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
    "pred_query": "\nSELECT Avg(Num_Employees) AS Average_Employees\nFROM management\nWHERE Department_ID IN\n    (SELECT Department_ID\n     FROM department\n     WHERE Ranking >= 10\n       AND Ranking <= 15);",
    "error_type": "ExecutionError",
    "gold_result": "   avg(num_employees)\n0       105468.166667",
    "pred_result": "None"
  },
  {
    "db_id": "department_management",
    "question": "What are the names of the heads who are born outside the California state?",
    "gold_query": "SELECT name FROM head WHERE born_state != 'California'",
    "pred_query": "\nSELECT h.name\nFROM head\nWHERE h.born_state != 'California';",
    "error_type": "ExecutionError",
    "gold_result": "                 name\n0         Tiger Woods\n1          K. J. Choi\n2        Jeff Maggert\n3        Stewart Cink\n4  Pádraig Harrington\n5    Franklin Langham",
    "pred_result": "None"
  },
  {
    "db_id": "department_management",
    "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
    "gold_query": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
    "pred_query": "\nSELECT DISTINCT c.Creation,\n                m.Budget_in_Billions\nFROM \"department\" AS d,\n     \"C management\" AS m\nWHERE m(head_ID) = dDepartment_ID\n  AND d.Name = 'Alabama';",
    "error_type": "ExecutionError",
    "gold_result": "  Creation\n0     1903",
    "pred_result": "None"
  },
  {
    "db_id": "department_management",
    "question": "What are the names of the states where at least 3 heads were born?",
    "gold_query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3",
    "pred_query": "\nSELECT DISTINCT s.name\nFROM\n  (SELECT h.name\n   FROM head h\n   WHERE h.age >= 3) AS h1\nFROM department d\nWHERE d.department_ID IN\n    (SELECT d.department_ID\n     FROM management m\n     WHERE m.head_ID = h1.head_ID)",
    "error_type": "ExecutionError",
    "gold_result": "   born_state\n0  California",
    "pred_result": "None"
  },
  {
    "db_id": "department_management",
    "question": "In which year were most departments established?",
    "gold_query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
    "pred_query": "\nSELECT MAX(Department_ID)\nFROM \"department\"\nWHERE \"Creation\" LIKE '%%Y%%';",
    "error_type": "Mismatch",
    "gold_result": "Creation\n    1789",
    "pred_result": "MAX(Department_ID)\n              None"
  },
  {
    "db_id": "department_management",
    "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
    "gold_query": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'",
    "pred_query": "\nSELECT \"Name\",\n       \"Num_Employees\"\nFROM \"management\"\nWHERE \"temporary_acting\" = 'Yes';",
    "error_type": "Mismatch",
    "gold_result": "             Name  Num_Employees\n         Treasury       115897.0\nHomeland Security       208000.0\n         Treasury       115897.0",
    "pred_result": "\"Name\" \"Num_Employees\"\n  Name   Num_Employees\n  Name   Num_Employees\n  Name   Num_Employees"
  },
  {
    "db_id": "department_management",
    "question": "How many acting statuses are there?",
    "gold_query": "SELECT count(DISTINCT temporary_acting) FROM management",
    "pred_query": "\nSELECT COUNT(*)\nFROM \"head\"\nWHERE \"head_ID\" IS NOT NULL;",
    "error_type": "Mismatch",
    "gold_result": " count(DISTINCT temporary_acting)\n                                2",
    "pred_result": " COUNT(*)\n       10"
  },
  {
    "db_id": "department_management",
    "question": "How many departments are led by heads who are not mentioned?",
    "gold_query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
    "pred_query": "\nSELECT COUNT(*)\nFROM management\nWHERE NOT EXISTS (\"head\"\n                  WHERE \"head_ID\" IN (\"management\"[\"head_ID\"]));",
    "error_type": "ExecutionError",
    "gold_result": "   count(*)\n0        11",
    "pred_result": "None"
  },
  {
    "db_id": "department_management",
    "question": "What are the distinct ages of the heads who are acting?",
    "gold_query": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
    "pred_query": "\nSELECT DISTINCT age\nFROM head\nWHERE management\n  AND head have a relationship where management's department ID is not null and head's ID is not null.",
    "error_type": "ExecutionError",
    "gold_result": "    age\n0  53.0\n1  52.0\n2  69.0",
    "pred_result": "None"
  },
  {
    "db_id": "department_management",
    "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
    "gold_query": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'",
    "pred_query": "\nSELECT s.born_state\nFROM head h\nJOIN department d ON h.department_ID = d.department_ID\nJOIN management m ON m.department_ID = d.department_ID\nWHERE h.name = 'Treasury'\n  AND h.name = 'Homeland Security'",
    "error_type": "ExecutionError",
    "gold_result": "   born_state\n0  California",
    "pred_result": "None"
  },
  {
    "db_id": "department_management",
    "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
    "gold_query": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",
    "pred_query": "\nSELECT d.Department_ID,\n       d.Name,\n       hNum\nFROM department d\nLEFT JOIN head h ON d.Department_ID = h.department_ID\nWHERE h.head_ID > 0",
    "error_type": "ExecutionError",
    "gold_result": "   Department_ID      Name  count(*)\n0              2  Treasury         2",
    "pred_result": "None"
  },
  {
    "db_id": "department_management",
    "question": "Which head's name has the substring 'Ha'? List the id and name.",
    "gold_query": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'",
    "pred_query": "\nSELECT h\nFROM head\nWHERE h.name LIKE '%Ha%'\n  OR h.name LIKE 'Ha%';",
    "error_type": "ExecutionError",
    "gold_result": "   head_ID                name\n0        4         Dudley Hart\n1        9  Pádraig Harrington\n2       10    Franklin Langham",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "How many farms are there?",
    "gold_query": "SELECT count(*) FROM farm",
    "pred_query": "\nSELECT COUNT(*)\nFROM farm;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        8",
    "pred_result": " COUNT(*)\n        8"
  },
  {
    "db_id": "farm",
    "question": "Count the number of farms.",
    "gold_query": "SELECT count(*) FROM farm",
    "pred_query": "\nSELECT COUNT(Farm_ID)\nFROM farm;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        8",
    "pred_result": " COUNT(Farm_ID)\n              8"
  },
  {
    "db_id": "farm",
    "question": "List the total number of horses on farms in ascending order.",
    "gold_query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
    "pred_query": "\nSELECT SUM(Horses) AS Total_Horses\nFROM farm;",
    "error_type": "ExecutionError",
    "gold_result": "   Total_Horses\n0        2546.9\n1        2604.8\n2        3658.9\n3        4781.3\n4        5056.5\n5        5308.2\n6        5486.9\n7        5607.5",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "What is the total horses record for each farm, sorted ascending?",
    "gold_query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
    "pred_query": "\nSELECT FARM_ID,\n       Total_Horses FROMFarm;",
    "error_type": "ExecutionError",
    "gold_result": "   Total_Horses\n0        2546.9\n1        2604.8\n2        3658.9\n3        4781.3\n4        5056.5\n5        5308.2\n6        5486.9\n7        5607.5",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "What are the hosts of competitions whose theme is not \"Aliens\"?",
    "gold_query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
    "pred_query": "\nSELECT c.Farm_ID,\n       c.Year,\n       c.Rank,\n       c.Farm_ID,\n       c.Year,\n       c.Rank,\n       c.Farm_ID,\n       c.Year,\n       c.Rank,\n       c.Farm_ID,\n       c.Year,\n       c.Rank,\n       c.Farm_ID,\n       c.Year,\n       c.Rank,\n       c.Farm_ID,\n       c.Year,\n       c.Rank,\n       c.Farm_ID,\n       c.Year,\n       c.Rank,\n       c.Farm_ID,\n       c.Year,\n       c.Rank,\n       c.Farm_ID,\n       c.Year,\n       c.Rank,\n       c.Farm_ID,\n       c.Year,\n       c.Rank,\n       c.Farm_ID,\n       c.Year,\n       c.Rank,",
    "error_type": "ExecutionError",
    "gold_result": "                                  Hosts\n0  Miley Cyrus Jared Leto and Karen Mok\n1         Leehom Wang and Kelly Rowland\n2                           Alicia Keys\n3        Vanness Wu and Michelle Branch\n4                   Shaggy and Coco Lee",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Return the hosts of competitions for which the theme is not Aliens?",
    "gold_query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
    "pred_query": "\nSELECT Hosts\nFROM competition_record\nWHERE Rank = 0\n  OR Theme != 'Aliens';",
    "error_type": "ExecutionError",
    "gold_result": "                                  Hosts\n0  Miley Cyrus Jared Leto and Karen Mok\n1         Leehom Wang and Kelly Rowland\n2                           Alicia Keys\n3        Vanness Wu and Michelle Branch\n4                   Shaggy and Coco Lee",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Return the themes of farm competitions, sorted by year ascending.",
    "gold_query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
    "pred_query": "\nSELECT t.Theme,\n       t.Host_city_ID,\n       t Host_city_ID,\n       t Host,\n         t Host,\n           t Host,\n             t Host,\n               t Host,\n                 t Host,\n                   t Host,\n                     t Host,\n                       t Host,\n                         t Host,\n                           t Host,\n                             t Host,\n                               t Host,\n                                 t Host,\n                                   t Host,\n                                     t Host,\n                                       t Host,\n                                         t Host,\n                                           t Host,\n                                             t Host,\n                                               t Host,\n                                                 t Host,\n                                                   t Host,\n                                                     t Host,\n                                                       t Host,\n                                                         t Host,\n                                                           t Host,\n                                                             t Host,\n                                                               t Host,\n                                                                 t Host,\n                                                                   t Host,\n                                                                     t Host,\n                                                                       t Host,\n                                                                         t Host,\n                                                                           t Host,\n                                                                             t Host,\n                                                                               t Host,",
    "error_type": "ExecutionError",
    "gold_result": "                 Theme\n0               Aliens\n1             MTV Cube\n2      Valentine's Day\n3         MTV Asia Aid\n4          Codehunters\n5  Carnival M is back!",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
    "gold_query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
    "pred_query": "SELECT ...\nFROM ... WHERE ...;",
    "error_type": "ExecutionError",
    "gold_result": "   avg(Working_Horses)\n0              3977.75",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Give the average number of working horses on farms with more than 5000 total horses.",
    "gold_query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
    "pred_query": "\nSELECT AVG(Working_Horses)\nFROM farm\nWHERE Total_Horses > 5000;",
    "error_type": "Mismatch",
    "gold_result": " avg(Working_Horses)\n             3977.75",
    "pred_result": " AVG(Working_Horses)\n             3977.75"
  },
  {
    "db_id": "farm",
    "question": "What are the maximum and minimum number of cows across all farms.",
    "gold_query": "SELECT max(Cows) ,  min(Cows) FROM farm",
    "pred_query": "\nSELECT MAX(Cows),\n       MIN(Cows)\nFROM farm;",
    "error_type": "Mismatch",
    "gold_result": " max(Cows)  min(Cows)\n    3987.0     2407.2",
    "pred_result": " MAX(Cows)  MIN(Cows)\n    3987.0     2407.2"
  },
  {
    "db_id": "farm",
    "question": "Return the maximum and minimum number of cows across all farms.",
    "gold_query": "SELECT max(Cows) ,  min(Cows) FROM farm",
    "pred_query": "\nSELECT MAX(Cows),\n       MIN(Cows)\nFROM farm;",
    "error_type": "Mismatch",
    "gold_result": " max(Cows)  min(Cows)\n    3987.0     2407.2",
    "pred_result": " MAX(Cows)  MIN(Cows)\n    3987.0     2407.2"
  },
  {
    "db_id": "farm",
    "question": "How many different statuses do cities have?",
    "gold_query": "SELECT count(DISTINCT Status) FROM city",
    "pred_query": "\nSELECT COUNT(DISTINCT \"Status\")\nFROM city;",
    "error_type": "Mismatch",
    "gold_result": " count(DISTINCT Status)\n                      2",
    "pred_result": " COUNT(DISTINCT \"Status\")\n                        2"
  },
  {
    "db_id": "farm",
    "question": "Count the number of different statuses.",
    "gold_query": "SELECT count(DISTINCT Status) FROM city",
    "pred_query": "\nSELECT COUNT(DISTINCT Status)\nFROM city",
    "error_type": "Mismatch",
    "gold_result": " count(DISTINCT Status)\n                      2",
    "pred_result": " COUNT(DISTINCT Status)\n                      2"
  },
  {
    "db_id": "farm",
    "question": "List official names of cities in descending order of population.",
    "gold_query": "SELECT Official_Name FROM city ORDER BY Population DESC",
    "pred_query": "\nSELECT City Official_Name,\n       Population DESC,\n       State,\n       Area_km_2,\n       Census_Ranking,\n       Rank,\n       State,\n       Area_km_2,\n       Census_Ranking,\n       Rank\nFROM city\nORDER BY Population DESC",
    "error_type": "ExecutionError",
    "gold_result": "             Official_Name\n0  Grand Falls/Grand-Sault\n1            Perth-Andover\n2             Plaster Rock\n3                 Drummond\n4                Aroostook",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "What are the official names of cities, ordered descending by population?",
    "gold_query": "SELECT Official_Name FROM city ORDER BY Population DESC",
    "pred_query": "\nSELECT CityOfficialName,\n       Population,\n       OrderBy(Population) AS OrderBy_Population,\n       CityID,\n       CityOfficialName\nFROM city\nORDER BY Population DESC",
    "error_type": "ExecutionError",
    "gold_result": "             Official_Name\n0  Grand Falls/Grand-Sault\n1            Perth-Andover\n2             Plaster Rock\n3                 Drummond\n4                Aroostook",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "What is the official name and status of the city with the most residents?",
    "gold_query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
    "pred_query": "\nSELECT CityOfficialName,\n       Status,\n       Population,\n       Rank,\n       Area_km_2,\n       Census_Ranking, ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...",
    "error_type": "ExecutionError",
    "gold_result": "             Official_Name Status\n0  Grand Falls/Grand-Sault   Town",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Show the years and the official names of the host cities of competitions.",
    "gold_query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
    "pred_query": "\nSELECT C.Farm_ID,\n       C.Year,\n       C.Farm_ID,\n       C.Year,\n       C.Farm_ID,\n       C.Year,\n       C.Farm_ID,\n       C.Year\nFROM city,\n     farm_competition,\n     competition_record,\n     farm",
    "error_type": "ExecutionError",
    "gold_result": "   Year            Official_Name\n0  2013  Grand Falls/Grand-Sault\n1  2006            Perth-Andover\n2  2005             Plaster Rock\n3  2004                 Drummond\n4  2003                Aroostook\n5  2002                Aroostook",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Give the years and official names of the cities of each competition.",
    "gold_query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
    "pred_query": "\nSELECT c.Farm_ID,\n       c.Farm_ID as Host_city_ID,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       cHosts,\n       c",
    "error_type": "ExecutionError",
    "gold_result": "   Year            Official_Name\n0  2013  Grand Falls/Grand-Sault\n1  2006            Perth-Andover\n2  2005             Plaster Rock\n3  2004                 Drummond\n4  2003                Aroostook\n5  2002                Aroostook",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Show the official names of the cities that have hosted more than one competition.",
    "gold_query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
    "pred_query": "\nSELECT \"City_ID\"\nFROM \"city\"\nWHERE \"City_ID\" IN\n    (SELECT \"City_ID\"\n     FROM \"city\"\n     GROUP BY \"City_ID\"\n     HAVING COUNT(*) > 1);",
    "error_type": "Mismatch",
    "gold_result": "Official_Name\n    Aroostook",
    "pred_result": "Empty DataFrame\nColumns: [City_ID]\nIndex: []"
  },
  {
    "db_id": "farm",
    "question": "What are the official names of cities that have hosted more than one competition?",
    "gold_query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
    "pred_query": "\nSELECT \"City_ID\"\nFROM \"city\"\nWHERE \"Hosts\" LIKE '%%';",
    "error_type": "Mismatch",
    "gold_result": "Official_Name\n    Aroostook",
    "pred_result": " City_ID\n       1\n       2\n       3\n       4\n       5"
  },
  {
    "db_id": "farm",
    "question": "Show the status of the city that has hosted the greatest number of competitions.",
    "gold_query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT c.City_ID,\n       c.Status\nFROM competition_record c\nJOIN ON farm_competition fc\nJOIN ON city city\nWHERE c.Rank =\n    (SELECT MAX(Rank)\n     From competition_record c)",
    "error_type": "ExecutionError",
    "gold_result": "    Status\n0  Village",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "What is the status of the city that has hosted the most competitions?",
    "gold_query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT c.Farm_ID,\n       cHost_city_ID,\n       cHosts,\n       cHosts_status\nFROM competition_record c\nJOIN city c_city ON cHosts = c_cityofficial_name SELECT ...\nFROM ... WHERE ...\nORDER BY ... LIMIT ...;",
    "error_type": "ExecutionError",
    "gold_result": "    Status\n0  Village",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Please show the themes of competitions with host cities having populations larger than 1000.",
    "gold_query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
    "pred_query": "\nSELECT distinct f1.Football\nfrom farm_competition c,\n     farm f\nwhere c.Football = f.Football\n  and cHost_city_ID = fHost_city_ID\n  and fPopulation > 1000;",
    "error_type": "ExecutionError",
    "gold_result": "                 Theme\n0  Carnival M is back!\n1          Codehunters\n2         MTV Asia Aid",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?",
    "gold_query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
    "pred_query": "\nSELECT distinct \"Theme\"\nfrom \"competition\"\nwhere \"Host_city\" has a population greater than 1000.",
    "error_type": "ExecutionError",
    "gold_result": "                 Theme\n0  Carnival M is back!\n1          Codehunters\n2         MTV Asia Aid",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Please show the different statuses of cities and the average population of cities with each status.",
    "gold_query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
    "pred_query": "\nSELECT c.City_ID,\n       cofficial_name,\n       c.status,\n       avg(c POPULATION) as average_pop\nFROM city c\nGROUP BY c.City_ID,\n         c.status",
    "error_type": "ExecutionError",
    "gold_result": "    Status  avg(Population)\n0     Town          5706.00\n1  Village          1009.75",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "What are the statuses and average populations of each city?",
    "gold_query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
    "pred_query": "\nSELECT c.City_ID,\n       cOfficial_Name,\n       c.Status,\n       c.Population,\n       c.Census_Ranking\nFROM city c\nLEFT JOIN competition_record cr ON c.City_ID = cr.Host_city_ID\nLEFT JOIN farm_f on cr.Farm_ID\nLEFT JOIN competition_record cr ON cr.Host_city_ID = c.City_ID",
    "error_type": "ExecutionError",
    "gold_result": "    Status  avg(Population)\n0     Town          5706.00\n1  Village          1009.75",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "Please show the different statuses, ordered by the number of cities that have each.",
    "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
    "pred_query": "\nSELECT COUNT(City_ID) AS StatusCount,\n       Status\nFROM city\nGROUP BY Status;",
    "error_type": "Mismatch",
    "gold_result": " Status\n   Town\nVillage",
    "pred_result": " StatusCount  Status\n           1    Town\n           4 Village"
  },
  {
    "db_id": "farm",
    "question": "Return the different statuses of cities, ascending by frequency.",
    "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
    "pred_query": "\nSELECT COUNT(*) AS Status_Frequency\nFROM city\nGROUP BY Status\nORDER BY Status_Frequency ASC",
    "error_type": "Mismatch",
    "gold_result": " Status\n   Town\nVillage",
    "pred_result": " Status_Frequency\n                1\n                4"
  },
  {
    "db_id": "farm",
    "question": "List the most common type of Status across cities.",
    "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT COUNT(*) AS Status_count\nFROM city\nGROUP BY Official_Name [HSQL]",
    "error_type": "ExecutionError",
    "gold_result": "    Status\n0  Village",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "What is the most common status across all cities?",
    "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT COUNT(*) AS StatusCount\nFROM city",
    "error_type": "Mismatch",
    "gold_result": " Status\nVillage",
    "pred_result": " StatusCount\n           5"
  },
  {
    "db_id": "farm",
    "question": "List the official names of cities that have not held any competition.",
    "gold_query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
    "pred_query": "\nSELECT \"City_ID\"\nFROM \"city\"\nWHERE \"Official_Name\" IS NULL;",
    "error_type": "Mismatch",
    "gold_result": "Empty DataFrame\nColumns: [Official_Name]\nIndex: []",
    "pred_result": "Empty DataFrame\nColumns: [City_ID]\nIndex: []"
  },
  {
    "db_id": "farm",
    "question": "What are the official names of cities that have not hosted a farm competition?",
    "gold_query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
    "pred_query": "\nSELECT \"City_ID\"\nFROM \"city\"\nWHERE \"Official_Name\" IS NULL;",
    "error_type": "Mismatch",
    "gold_result": "Empty DataFrame\nColumns: [Official_Name]\nIndex: []",
    "pred_result": "Empty DataFrame\nColumns: [City_ID]\nIndex: []"
  },
  {
    "db_id": "farm",
    "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
    "gold_query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
    "pred_query": "\nSELECT \"City_ID\",\n       \"Official_Name\",\n       \"Status\"\nFROM \"city\"\nWHERE \"Population\" > 1500\n  AND \"Population\" < 5000;",
    "error_type": "Mismatch",
    "gold_result": " Status\nVillage",
    "pred_result": " City_ID Official_Name  Status\n       2 Perth-Andover Village"
  },
  {
    "db_id": "farm",
    "question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?",
    "gold_query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
    "pred_query": "\nSELECT 'Status1',\n       'Status2'\nFROM city\nWHERE (Population > 1500)\n  AND (Population < 500)",
    "error_type": "Mismatch",
    "gold_result": " Status\nVillage",
    "pred_result": "Empty DataFrame\nColumns: ['Status1', 'Status2']\nIndex: []"
  },
  {
    "db_id": "farm",
    "question": "What are the official names of cities that have population over 1500 or less than 500?",
    "gold_query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500",
    "pred_query": "\nSELECT \"City_ID\",\n       \"Official_Name\"\nFROM \"city\"\nWHERE \"Population\" > 1500\n  OR \"Population\" < 500;",
    "error_type": "Mismatch",
    "gold_result": "          Official_Name\nGrand Falls/Grand-Sault\n          Perth-Andover\n              Aroostook",
    "pred_result": " City_ID           Official_Name\n       1 Grand Falls/Grand-Sault\n       2           Perth-Andover\n       5               Aroostook"
  },
  {
    "db_id": "farm",
    "question": "Show the census ranking of cities whose status are not \"Village\".",
    "gold_query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
    "pred_query": "\nSELECT C.City_ID,\n       C Official_Name,\n       C.Status,\n       C.Census_Ranking\nFROM city C\nWHERE C.Status != 'Village';",
    "error_type": "ExecutionError",
    "gold_result": "  Census_Ranking\n0    636 of 5008",
    "pred_result": "None"
  },
  {
    "db_id": "farm",
    "question": "What are the census rankings of cities that do not have the status \"Village\"?",
    "gold_query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
    "pred_query": "\nSELECT C.City_ID,\n       C Official_Name,\n       C.Census_Ranking\nFROM city C\nWHERE C.Status != 'Village';",
    "error_type": "ExecutionError",
    "gold_result": "  Census_Ranking\n0    636 of 5008",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "How many aircrafts are there?",
    "gold_query": "SELECT count(*) FROM aircraft",
    "pred_query": "\nSELECT COUNT(`Aircraft_ID`)\nFROM `aircraft`;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        5",
    "pred_result": " COUNT(`Aircraft_ID`)\n                    5"
  },
  {
    "db_id": "aircraft",
    "question": "What is the number of aircraft?",
    "gold_query": "SELECT count(*) FROM aircraft",
    "pred_query": "\nSELECT COUNT(*)\nFROM aircraft;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        5",
    "pred_result": " COUNT(*)\n        5"
  },
  {
    "db_id": "aircraft",
    "question": "List the description of all aircrafts.",
    "gold_query": "SELECT Description FROM aircraft",
    "pred_query": "\nSELECT \"Aircraft\"\nFROM `aircraft`;",
    "error_type": "Mismatch",
    "gold_result": "                  Description\n     Light utility helicopter\nTurboshaft utility helicopter\n      Tandem rotor helicopter\n        Heavy-lift helicopter\n        Heavy-lift helicopter",
    "pred_result": "             Aircraft\n        Robinson R-22\n Bell 206B3 JetRanger\n       CH-47D Chinook\n            Mil Mi-26\nCH-53E Super Stallion"
  },
  {
    "db_id": "aircraft",
    "question": "What are the descriptions for the aircrafts?",
    "gold_query": "SELECT Description FROM aircraft",
    "pred_query": "\nSELECT `Aircraft` as Aircraft,\n       `Description` as Description\nFROM `aircraft`;",
    "error_type": "Mismatch",
    "gold_result": "                  Description\n     Light utility helicopter\nTurboshaft utility helicopter\n      Tandem rotor helicopter\n        Heavy-lift helicopter\n        Heavy-lift helicopter",
    "pred_result": "             Aircraft                   Description\n        Robinson R-22      Light utility helicopter\n Bell 206B3 JetRanger Turboshaft utility helicopter\n       CH-47D Chinook       Tandem rotor helicopter\n            Mil Mi-26         Heavy-lift helicopter\nCH-53E Super Stallion         Heavy-lift helicopter"
  },
  {
    "db_id": "aircraft",
    "question": "What is the average number of international passengers of all airports?",
    "gold_query": "SELECT avg(International_Passengers) FROM airport",
    "pred_query": "\nSELECT AVG(`International_Passengers`) AS AverageInternationalPassengers\nFROM `airport`",
    "error_type": "Mismatch",
    "gold_result": " avg(International_Passengers)\n                    16443156.6",
    "pred_result": " AverageInternationalPassengers\n                     16443156.6"
  },
  {
    "db_id": "aircraft",
    "question": "What is the average number of international passengers for an airport?",
    "gold_query": "SELECT avg(International_Passengers) FROM airport",
    "pred_query": "\nSELECT `Airport_ID`,\n       `International_Passengers`\nFROM `airport`;",
    "error_type": "Mismatch",
    "gold_result": " avg(International_Passengers)\n                    16443156.6",
    "pred_result": " Airport_ID  International_Passengers\n          1                61344438.0\n          2                30431051.0\n          3                19996947.0\n          4                18119230.0\n          5                 8853224.0\n          6                 8105162.0\n          7                 3711140.0\n          8                 3943139.0\n          9                 5057051.0\n         10                 4870184.0"
  },
  {
    "db_id": "aircraft",
    "question": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?",
    "gold_query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
    "pred_query": "\nSELECT IInternational_Passengers,\n       IDomestic_Passengers\nFROM airport",
    "error_type": "ExecutionError",
    "gold_result": "   International_Passengers  Domestic_Passengers\n0                61344438.0            5562516.0",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "How many international and domestic passengers are there in the airport London Heathrow?",
    "gold_query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
    "pred_query": "\nSELECT airportInternationalPassengers,\n       airportDomesticPassengers,\nfrom airport\nwhere airportName = 'Heathrow' -- add the following columns\n airportInternationalPassengers,\n airportDomesticPassengers",
    "error_type": "ExecutionError",
    "gold_result": "   International_Passengers  Domestic_Passengers\n0                61344438.0            5562516.0",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
    "gold_query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
    "pred_query": "\nSELECT SUM(Domestic_Passengers)\nFROM airport_aircraft\nWHERE airport_aircraft.Airport_Name LIKE '%London%'",
    "error_type": "ExecutionError",
    "gold_result": "   sum(Domestic_Passengers)\n0                12957585.0",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What are the total number of domestic passengers at all London airports?",
    "gold_query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
    "pred_query": "\nSELECT SUM(Domestic_Passengers)\nFROM airport_aircraft\nWHERE Airport_ID = 'London';",
    "error_type": "ExecutionError",
    "gold_result": "   sum(Domestic_Passengers)\n0                12957585.0",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What are the maximum and minimum number of transit passengers of all aiports.",
    "gold_query": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
    "pred_query": "\nSELECT MAX(`Transit_Passengers`),\n       MIN(`Transit_Passengers`)\nFROM `airport`;",
    "error_type": "Mismatch",
    "gold_result": " max(Transit_Passengers)  min(Transit_Passengers)\n                156246.0                   4395.0",
    "pred_result": " MAX(`Transit_Passengers`)  MIN(`Transit_Passengers`)\n                  156246.0                     4395.0"
  },
  {
    "db_id": "aircraft",
    "question": "What is the maximum and mininum number of transit passengers for all airports?",
    "gold_query": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
    "pred_query": "\nSELECT MAX(`Transit_Passengers`),\n       MIN(`Transit_Passengers`)\nFROM airport_aircraft;",
    "error_type": "ExecutionError",
    "gold_result": "   max(Transit_Passengers)  min(Transit_Passengers)\n0                 156246.0                   4395.0",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "what is the name of every pilot who is at least 25 years old?",
    "gold_query": "SELECT Name FROM pilot WHERE Age  >=  25",
    "pred_query": "\nSELECT `Pilot_Id`,\n       `Name`\nFROM `pilot`\nWHERE `Age` >= 25;",
    "error_type": "Mismatch",
    "gold_result": "              Name\n     Ayana Spencer\n  Ellen Ledner III\n   Elisha Hickle V\nDr. Jade Bradtke V\n   Winnifred Boyle\n    Della Lindgren\n    Maxwell Graham\n     Blaise Muller\n    Baylee Steuber",
    "pred_result": " Pilot_Id               Name\n        4      Ayana Spencer\n        5   Ellen Ledner III\n        6    Elisha Hickle V\n        7 Dr. Jade Bradtke V\n        8    Winnifred Boyle\n        9     Della Lindgren\n       10     Maxwell Graham\n       11      Blaise Muller\n       12     Baylee Steuber"
  },
  {
    "db_id": "aircraft",
    "question": "List all pilot names in ascending alphabetical order.",
    "gold_query": "SELECT Name FROM pilot ORDER BY Name ASC",
    "pred_query": "\nSELECT `Pilot_Id`\nFROM pilot\nORDER BY `Pilot_Id`;",
    "error_type": "Mismatch",
    "gold_result": "                     Name\n            Ayana Spencer\n           Baylee Steuber\n            Blaise Muller\n           Della Lindgren\n       Dr. Jade Bradtke V\n          Elisha Hickle V\n         Ellen Ledner III\n     Katheryn Gorczany IV\n           Maxwell Graham\nMr. Cristian Halvorson II\n    Prof. Zackery Collins\n          Winnifred Boyle",
    "pred_result": " Pilot_Id\n        1\n        2\n        3\n        4\n        5\n        6\n        7\n        8\n        9\n       10\n       11\n       12"
  },
  {
    "db_id": "aircraft",
    "question": "List names of all pilot aged 30 or younger in descending alphabetical order.",
    "gold_query": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC",
    "pred_query": "\nSELECT TOP 1000\nFROM pilot\nWHERE Age <= 30\nORDER BY Name DESC",
    "error_type": "ExecutionError",
    "gold_result": "                        Name\n0            Winnifred Boyle\n1      Prof. Zackery Collins\n2  Mr. Cristian Halvorson II\n3             Maxwell Graham\n4       Katheryn Gorczany IV\n5         Dr. Jade Bradtke V\n6             Della Lindgren\n7             Baylee Steuber\n8              Ayana Spencer",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names of all pilots 30 years old or young in descending alphabetical order?",
    "gold_query": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC",
    "pred_query": "\nSELECT Name,\nOrder By\nFROM pilot\nWHERE (Pilot_Id LIKE '%3D%20%23%23')",
    "error_type": "ExecutionError",
    "gold_result": "                        Name\n0            Winnifred Boyle\n1      Prof. Zackery Collins\n2  Mr. Cristian Halvorson II\n3             Maxwell Graham\n4       Katheryn Gorczany IV\n5         Dr. Jade Bradtke V\n6             Della Lindgren\n7             Baylee Steuber\n8              Ayana Spencer",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
    "pred_query": "\nSELECT A.Aircraft\nFROM `aircraft` A\nWHERE A.Aircraft_ID = `airport_aircraft`.Airport_ID\n  AND A.Aircraft_ID = `pilot`(`Pilot_Id`)",
    "error_type": "ExecutionError",
    "gold_result": "        Aircraft\n0  Robinson R-22",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names of all the aircrafts associated with London Gatwick airport?",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
    "pred_query": "\nSELECT `Aircraft`\nFROM `aircraft`\nWHERE `Airport_ID` =\n    (SELECT `Airport_ID`\n     FROM `airport`\n     WHERE `Airport_ID` =\n         (SELECT `Airport_ID`\n          FROM `airport_aircraft`\n          WHERE `Airport_ID` =\n              (SELECT `Airport_ID`\n               FROM `airport`)));",
    "error_type": "ExecutionError",
    "gold_result": "        Aircraft\n0  Robinson R-22",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.",
    "gold_query": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
    "pred_query": "\nSELECT `Aircraft`\nFROM `aircraft`\nWHERE `Max_Gross_Weight` > 10000000;",
    "error_type": "Mismatch",
    "gold_result": "            Aircraft                   Description\nBell 206B3 JetRanger Turboshaft utility helicopter\n       Robinson R-22      Light utility helicopter",
    "pred_result": "             Aircraft\n Bell 206B3 JetRanger\n       CH-47D Chinook\n            Mil Mi-26\nCH-53E Super Stallion"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?",
    "gold_query": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
    "pred_query": "\nSELECT `Aircraft` as AircraftName,\n       `Description` as Description\nFROM `aircraft`\nWHERE `Total_disk_area` > 10000000;",
    "error_type": "Mismatch",
    "gold_result": "            Aircraft                   Description\nBell 206B3 JetRanger Turboshaft utility helicopter\n       Robinson R-22      Light utility helicopter",
    "pred_result": "         AircraftName                   Description\n        Robinson R-22      Light utility helicopter\n Bell 206B3 JetRanger Turboshaft utility helicopter\n       CH-47D Chinook       Tandem rotor helicopter\n            Mil Mi-26         Heavy-lift helicopter\nCH-53E Super Stallion         Heavy-lift helicopter"
  },
  {
    "db_id": "aircraft",
    "question": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?",
    "gold_query": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"",
    "pred_query": "\nSELECT AVG(`Total_Passengers`) AS AvgTotalPassengers\nFROM `airport_aircraft`\nWHERE `Aircraft_ID` = 'Robinson R-22';",
    "error_type": "ExecutionError",
    "gold_result": "   avg(T3.Total_Passengers)\n0                34205887.0",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?",
    "gold_query": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"",
    "pred_query": "\nSELECT Avg(Total_Passengers)\nFROM airport_aircraft\nWHERE \"Aircraft_ID\" = 'Robinson R-22';",
    "error_type": "ExecutionError",
    "gold_result": "   avg(T3.Total_Passengers)\n0                34205887.0",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "Please list the location and the winning aircraft name.",
    "gold_query": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
    "pred_query": "\nSELECT `Location`\nFROM `airport`\nWHERE `Airport_ID` IN\n    (SELECT `Aircraft_ID`\n     FROM `aircraft`\n     WHERE `Aircraft_ID` = `Pilot_Id`);",
    "error_type": "ExecutionError",
    "gold_result": "                          Location               Aircraft\n0          Mina' Zayid , Abu Dhabi          Robinson R-22\n1               Swan River , Perth          Robinson R-22\n2  Flamengo Beach , Rio de Janeiro   Bell 206B3 JetRanger\n3                Windsor , Ontario              Mil Mi-26\n4                    New York City         CH-47D Chinook\n5             EuroSpeedway Lausitz              Mil Mi-26\n6          River Danube , Budapest  CH-53E Super Stallion",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What is the location and name of the winning aircraft?",
    "gold_query": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
    "pred_query": "\nSELECT `Winning_Aircraft`\nFROM `aircraft`;",
    "error_type": "ExecutionError",
    "gold_result": "                          Location               Aircraft\n0          Mina' Zayid , Abu Dhabi          Robinson R-22\n1               Swan River , Perth          Robinson R-22\n2  Flamengo Beach , Rio de Janeiro   Bell 206B3 JetRanger\n3                Windsor , Ontario              Mil Mi-26\n4                    New York City         CH-47D Chinook\n5             EuroSpeedway Lausitz              Mil Mi-26\n6          River Danube , Budapest  CH-53E Super Stallion",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "List the name of the aircraft that has been named winning aircraft the most number of times.",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "",
    "error_type": "ExecutionError",
    "gold_result": "    Aircraft\n0  Mil Mi-26",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What is the name of the aircraft that has won an award the most?",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT `Aircraft`\nFROM `aircraft`\nGROUP BY `Aircraft`\nHAVING COUNT(`Aircraft`) > 1;",
    "error_type": "Mismatch",
    "gold_result": " Aircraft\nMil Mi-26",
    "pred_result": "Empty DataFrame\nColumns: [Aircraft]\nIndex: []"
  },
  {
    "db_id": "aircraft",
    "question": "List the names of aircrafts and the number of times it won matches.",
    "gold_query": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",
    "pred_query": "",
    "error_type": "ExecutionError",
    "gold_result": "                Aircraft  COUNT(*)\n0          Robinson R-22         2\n1   Bell 206B3 JetRanger         1\n2         CH-47D Chinook         1\n3              Mil Mi-26         2\n4  CH-53E Super Stallion         1",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "For each aircraft that has won an award, what is its name and how many time has it won?",
    "gold_query": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",
    "pred_query": "\nSELECT `Aircraft`\nfrom `aircraft`\nwhere `Winning_Pilot` is not null\n  and `Winning_Aircraft` is not null",
    "error_type": "ExecutionError",
    "gold_result": "                Aircraft  COUNT(*)\n0          Robinson R-22         2\n1   Bell 206B3 JetRanger         1\n2         CH-47D Chinook         1\n3              Mil Mi-26         2\n4  CH-53E Super Stallion         1",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "List names of all pilot in descending order of age.",
    "gold_query": "SELECT Name FROM pilot ORDER BY Age DESC",
    "pred_query": "\nSELECT Pilot.Name,\n       Pilot.Age\nFROM pilot\nORDER BY Pilot.Age DESC",
    "error_type": "Mismatch",
    "gold_result": "                     Name\n          Elisha Hickle V\n            Blaise Muller\n         Ellen Ledner III\n          Winnifred Boyle\n           Baylee Steuber\n           Della Lindgren\n       Dr. Jade Bradtke V\n           Maxwell Graham\n            Ayana Spencer\n    Prof. Zackery Collins\nMr. Cristian Halvorson II\n     Katheryn Gorczany IV",
    "pred_result": "                     Name  Age\n          Elisha Hickle V   37\n            Blaise Muller   33\n         Ellen Ledner III   31\n          Winnifred Boyle   30\n           Baylee Steuber   30\n           Della Lindgren   29\n       Dr. Jade Bradtke V   26\n           Maxwell Graham   26\n            Ayana Spencer   25\n    Prof. Zackery Collins   23\nMr. Cristian Halvorson II   23\n     Katheryn Gorczany IV   20"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names of all pilots listed by descending age?",
    "gold_query": "SELECT Name FROM pilot ORDER BY Age DESC",
    "pred_query": "\nSELECT Pilot.Name\nFROM pilot\nWHERE Pilot.Age >\n    (SELECT MAX(Age)\n     FROM aircraft)",
    "error_type": "ExecutionError",
    "gold_result": "                         Name\n0             Elisha Hickle V\n1               Blaise Muller\n2            Ellen Ledner III\n3             Winnifred Boyle\n4              Baylee Steuber\n5              Della Lindgren\n6          Dr. Jade Bradtke V\n7              Maxwell Graham\n8               Ayana Spencer\n9       Prof. Zackery Collins\n10  Mr. Cristian Halvorson II\n11       Katheryn Gorczany IV",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "List the names of aircrafts and that won matches at least twice.",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
    "pred_query": "\nSELECT a.Aircraft,\n       m.Winning_Pilot,\n       m.Winning_Aircraft\nFROM `aircraft` a\nCross Join `match` m\nWHERE m.Winning_Pilot IS NOT NULL\n  AND m.Winning_Aircraft IS NOT NULL\n  AND m.Winning_Pilot = a.Aircraft_ID\n  AND m.Winning_Aircraft = a.Aircraft_ID\n  AND m.Winning_Pilot = m.Winning_Pilot\n  AND m.Winning_Pilot = m.Winning_Pilot\n  AND m.Winning_Pilot = m.Winning_Pilot\n  AND m.Winning_Pilot = m.Winning_Pilot\n  AND m.Winning_Pilot = m.Winning_Pilot\n  AND m.Winning_Pilot = m.Winning_Pilot\n  AND m.Winning_Pilot = m.Winning_Pilot\n  AND m",
    "error_type": "ExecutionError",
    "gold_result": "        Aircraft\n0  Robinson R-22\n1      Mil Mi-26",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names of all aircrafts that have won a match at least twice?",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
    "pred_query": "\nSELECT A.Aircraft\nFROM A\nJOIN M ON A.Aircraft_ID = M.Winning_Pilot\nJOIN M ON A.Aircraft_ID = M.Winning_Pilot",
    "error_type": "ExecutionError",
    "gold_result": "        Aircraft\n0  Robinson R-22\n1      Mil Mi-26",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "List the names of aircrafts and that did not win any match.",
    "gold_query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
    "pred_query": "\nSELECT `Aircraft_ID`\nFROM `aircraft`\nWHERE `Winning_Pilot` IS NULL;",
    "error_type": "ExecutionError",
    "gold_result": "Empty DataFrame\nColumns: [Aircraft]\nIndex: []",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names of all aicrafts that have never won any match?",
    "gold_query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
    "pred_query": "\nSELECT `Aircraft`\nFROM `aircraft`\nWHERE `Aircraft` NOT IN\n    (SELECT `Aircraft`\n     FROM `pilot`\n     WHERE `Pilot_Id` IS NULL);",
    "error_type": "Mismatch",
    "gold_result": "Empty DataFrame\nColumns: [Aircraft]\nIndex: []",
    "pred_result": "             Aircraft\n        Robinson R-22\n Bell 206B3 JetRanger\n       CH-47D Chinook\n            Mil Mi-26\nCH-53E Super Stallion"
  },
  {
    "db_id": "aircraft",
    "question": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
    "pred_query": "\nSELECT A.Aircraft\nFROM `aircraft` A\nJOIN `match` M ON A.Aircraft_ID = M.Winning_Pilot\nJOIN `airport` I ON I.Airport_ID = A.Airport_ID\nJOIN `airport_aircraft` IA ON IA.ID = I.Airport_ID",
    "error_type": "ExecutionError",
    "gold_result": "Empty DataFrame\nColumns: [Aircraft]\nIndex: []",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
    "pred_query": "\nSELECT A.Aircraft\nFROM `aircraft`\nWHERE A.Aircraft_ID IN\n    (SELECT A.Aircraft_ID\n     FROM `airport_aircraft`\n     WHERE airport_aircraft.AIRPORT_ID =\n         (SELECT A.Aircraft_ID\n          FROM `airport`\n          WHERE airport_ID = 6)\n       AND airport_aircraft.AIRPORT_ID =\n         (SELECT A.Aircraft_ID\n          FROM `airport`\n          WHERE airport_ID = 7))",
    "error_type": "ExecutionError",
    "gold_result": "Empty DataFrame\nColumns: [Aircraft]\nIndex: []",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "Show all information on the airport that has the largest number of international passengers.",
    "gold_query": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1",
    "pred_query": "\nSELECT `Airport_Name`,\n       `Total_Passengers`,\n       `International_Passengers`\nFROM `airport`\nWHERE `International_Passengers` =\n    (SELECT MAX(`International_Passengers`)\n     FROM `airport`);",
    "error_type": "Mismatch",
    "gold_result": " Airport_ID    Airport_Name  Total_Passengers %_Change_2007  International_Passengers  Domestic_Passengers  Transit_Passengers  Aircraft_Movements  Freight_Metric_Tonnes\n          1 London Heathrow        67054745.0          1.5%                61344438.0            5562516.0            147791.0            478693.0              1397054.0",
    "pred_result": "   Airport_Name  Total_Passengers  International_Passengers\nLondon Heathrow        67054745.0                61344438.0"
  },
  {
    "db_id": "aircraft",
    "question": "What is all the information on the airport with the largest number of international passengers?",
    "gold_query": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1",
    "pred_query": "\nSELECT airportInternationalName,\n       Total_Passengers, %_Change_2007,\n                          International_Passengers,\n                          Domestic_Passengers,\n                          Transit_Passengers,\n                          AircraftMovements,\n                          Freight_Metric_Tonnes\nFROM airport\nWHERE airportInternationalName LIKE '%_Large_Passengers%'",
    "error_type": "ExecutionError",
    "gold_result": "   Airport_ID     Airport_Name  Total_Passengers %_Change_2007  \\\n0           1  London Heathrow        67054745.0          1.5%   \n\n   International_Passengers  Domestic_Passengers  Transit_Passengers  \\\n0                61344438.0            5562516.0            147791.0   \n\n   Aircraft_Movements  Freight_Metric_Tonnes  \n0            478693.0              1397054.0  ",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.",
    "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
    "pred_query": "\nSELECT P.Name,\n       P.Age\nFROM pilot P\nWHERE P.Age < 30\n  AND\n    (SELECT COUNT(*)\n     FROM match M\n     WHERE M.Winning_Pilot = P.Name\n       AND MDate < 30) >\n    (SELECT COUNT(*)\n     FROM match M\n     WHERE M.Winning_Pilot = P.Name\n       AND MDate < 30)",
    "error_type": "ExecutionError",
    "gold_result": "            Name  Age\n0  Ayana Spencer   25",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What is the name and age of the pilot younger than 30 who has won the most number of times?",
    "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
    "pred_query": "SELECT ...\nFROM ... WHERE ...;",
    "error_type": "ExecutionError",
    "gold_result": "            Name  Age\n0  Ayana Spencer   25",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "what is the name and age of the youngest winning pilot?",
    "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
    "pred_query": "\nSELECT winner.pilot_name,\n       winner.age\nFROM match\nWHERE match.winning_pilot = winner.pilot_id\nGROUP BY winner.pilot_id\nORDER BY winner.age ASC\nLIMIT 1;",
    "error_type": "ExecutionError",
    "gold_result": "                   Name  Age\n0  Katheryn Gorczany IV   20",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "How old is the youngest winning pilot and what is their name?",
    "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
    "pred_query": "\nSELECT\n  (SELECT MIN(`Age`)\n   FROM `pilot` AS pilot) AS youngest_age,\n\n  (SELECT MIN(`Name`)\n   FROM `pilot` AS pilot) AS youngest_name\nFROM `pilot`",
    "error_type": "Mismatch",
    "gold_result": "                Name  Age\nKatheryn Gorczany IV   20",
    "pred_result": " youngest_age youngest_name\n           20 Ayana Spencer\n           20 Ayana Spencer\n           20 Ayana Spencer\n           20 Ayana Spencer\n           20 Ayana Spencer\n           20 Ayana Spencer\n           20 Ayana Spencer\n           20 Ayana Spencer\n           20 Ayana Spencer\n           20 Ayana Spencer\n           20 Ayana Spencer\n           20 Ayana Spencer"
  },
  {
    "db_id": "aircraft",
    "question": "find the name of pilots who did not win the matches held in the country of Australia.",
    "gold_query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
    "pred_query": "\nSELECT `Name`\nFROM pilot\nWHERE `Pilot_Id` NOT NULL\n  AND NOT EXISTS(`Winning_Pilot`) IN\n    (SELECT `Winning_Pilot`\n     FROM match\n     WHERE `Country` LIKE '% Australia%')",
    "error_type": "ExecutionError",
    "gold_result": "                         Name\n0       Prof. Zackery Collins\n1        Katheryn Gorczany IV\n2   Mr. Cristian Halvorson II\n3            Ellen Ledner III\n4             Elisha Hickle V\n5          Dr. Jade Bradtke V\n6             Winnifred Boyle\n7              Della Lindgren\n8              Maxwell Graham\n9               Blaise Muller\n10             Baylee Steuber",
    "pred_result": "None"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names of the pilots that have not won any matches in Australia?",
    "gold_query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
    "pred_query": "\nSELECT P.Name\nFROM pilot\nWHERE P.Pilot_Id NOT IN (\n  SELECT Pilot_Id\n  FROM pilot WHERE Name LIKE '%Australia%'\n  OR P.Pilot_Id IN (\n  SELECT Pilot_Id\n  FROM pilot WHERE Name LIKE '%Australia%'\n  AND P.Pilot_Id IN (\n  SELECT Pilot_Id\n  FROM pilot WHERE Name LIKE '%Australia%'\n  AND P.Pilot_Id IN (\n  SELECT Pilot_Id\n  FROM pilot WHERE Name LIKE '%Australia%'\n  AND P.Pilot_Id IN (\n  SELECT Pilot_Id\n  FROM pilot WHERE Name LIKE '%Australia%'\n  AND P.Pilot_Id IN (\n  SELECT Pilot_Id\n  FROM pilot WHERE Name LIKE '%Australia%'\n  AND P.Pilot_Id IN (\n  SELECT Pilot_Id\n  FROM pilot WHERE Name LIKE '%Australia%'\n  AND P.Pilot_Id IN (\n  SELECT Pilot_Id\n  FROM pilot WHERE Name LIKE '%Australia%'\n  AND P.Pilot_Id IN (\n  SELECT Pilot_Id\n  FROM pilot WHERE Name LIKE '%Australia",
    "error_type": "ExecutionError",
    "gold_result": "                         Name\n0       Prof. Zackery Collins\n1        Katheryn Gorczany IV\n2   Mr. Cristian Halvorson II\n3            Ellen Ledner III\n4             Elisha Hickle V\n5          Dr. Jade Bradtke V\n6             Winnifred Boyle\n7              Della Lindgren\n8              Maxwell Graham\n9               Blaise Muller\n10             Baylee Steuber",
    "pred_result": "None"
  },
  {
    "db_id": "architecture",
    "question": "How many architects are female?",
    "gold_query": "SELECT count(*) FROM architect WHERE gender  =  'female'",
    "pred_query": "\nSELECT COUNT(*)\nFROM \"architect\"\nWHERE \"gender\" = 'female';",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        1",
    "pred_result": " COUNT(*)\n        1"
  },
  {
    "db_id": "architecture",
    "question": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
    "gold_query": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name",
    "pred_query": "\nSELECT m.name,\n       m.nationality,\n       m.id\nFROM mill m\nWHERE m.architect_id IN\n    (SELECT a.id\n     FROM a\n     WHERE a.gender = 'male')\nORDER BY m.name ASC;",
    "error_type": "ExecutionError",
    "gold_result": "                 name       nationality id\n0         Frank Gehry          Canadian  2\n1  Frank Lloyd Wright          American  1\n2        Le Corbusier     Swiss, French  5\n3   Mies Van Der Rohe  German, American  4",
    "pred_result": "None"
  },
  {
    "db_id": "architecture",
    "question": "What is the maximum length in meters for the bridges and what are the architects' names?",
    "gold_query": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id",
    "pred_query": "\nSELECT MAX(\"length_meters\"),\n       \"name\"\nFROM \"bridge\"",
    "error_type": "Mismatch",
    "gold_result": " max(T1.length_meters)               name\n                 121.0 Frank Lloyd Wright",
    "pred_result": " MAX(\"length_meters\")                         name\n                121.0 Xian Ren Qiao (Fairy Bridge)"
  },
  {
    "db_id": "architecture",
    "question": "What is the average length in feet of the bridges?",
    "gold_query": "SELECT avg(length_feet) FROM bridge",
    "pred_query": "\nSELECT AVG(length_feet)\nFROM bridge;",
    "error_type": "Mismatch",
    "gold_result": " avg(length_feet)\n           244.64",
    "pred_result": " AVG(length_feet)\n           244.64"
  },
  {
    "db_id": "architecture",
    "question": "What are the names and year of construction for the mills of 'Grondzeiler' type?",
    "gold_query": "SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler'",
    "pred_query": "\nSELECT m.id,\n       m.name,\n       m.type,\n       mbuilt_year,\n       m.notes\nFROM mill\nWHERE m.type = 'Grondzeiler';",
    "error_type": "ExecutionError",
    "gold_result": "                name  built_year\n0     Le Vieux Molen        1840\n1    Moulin Bertrand        1890\n2    Moulin de Fexhe        1843\n3  Moulin du Château        1856\n4  Moulin de Pousset        1819",
    "pred_result": "None"
  },
  {
    "db_id": "architecture",
    "question": "What are the distinct names and nationalities of the architects who have ever built a mill?",
    "gold_query": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id",
    "pred_query": "\nSELECT a.name,\n       a.nationality\nFROM architect a\nWHERE a.built_year >= 0;",
    "error_type": "ExecutionError",
    "gold_result": "                 name       nationality\n0  Frank Lloyd Wright          American\n1         Frank Gehry          Canadian\n2          Zaha Hadid    Iraqi, British\n3   Mies Van Der Rohe  German, American",
    "pred_result": "None"
  },
  {
    "db_id": "architecture",
    "question": "What are the distinct types of mills that are built by American or Canadian architects?",
    "gold_query": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'",
    "pred_query": "\nSELECT DISTINCT \"mill\" type\nFROM \"mill\"\nWHERE \"architect_id\" IN (\"bridge\"\n                         WHERE \"architect_id\" IN (\"architect\"\n                                                  WHERE \"architect_id\" = 'American'\n                                                    OR \"architect_id\" = 'Canadian'));",
    "error_type": "ExecutionError",
    "gold_result": "          type\n0  Grondzeiler",
    "pred_result": "None"
  },
  {
    "db_id": "architecture",
    "question": "What are the ids and names of the architects who built at least 3 bridges ?",
    "gold_query": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3",
    "pred_query": "\nSELECT a.id,\n       a.name\nFROM architect a\nJOIN bridge b ON a.id = b.architect_id\nJOIN bridge b ON a.id = b.architect_id ... (\n                                            more queries)",
    "error_type": "ExecutionError",
    "gold_result": "  id                name\n0  1  Frank Lloyd Wright\n1  2         Frank Gehry\n2  5        Le Corbusier",
    "pred_result": "None"
  },
  {
    "db_id": "architecture",
    "question": "What is the id, name and nationality of the architect who built most mills?",
    "gold_query": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "pred_query": "\nSELECT a.id,\n       a.name,\n       a.nationality,\n       b.mill_id,\n       b.mill_name,\n       b.mill_nationality\nFROM architect a,\n     bridge b\nWHERE a.id = b.mill_id\n  AND a.id =\n    (SELECT MIN(b.mill_id)\n     FROM bridge b);",
    "error_type": "ExecutionError",
    "gold_result": "  id                name nationality\n0  1  Frank Lloyd Wright    American",
    "pred_result": "None"
  },
  {
    "db_id": "architecture",
    "question": "What are the ids, names and genders of the architects who built two bridges or one mill?",
    "gold_query": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1",
    "pred_query": "\nSELECT a.id,\n       a.name,\n       a.gender,\n       b.id,\n       b.name,\n       b.gender,\n       m.id,\n       m.name\nFROM arch\nJOIN bridge ON arch.id = bridge.architect_id\nJOIN mill ON arch.id = mill.architect_id\nGROUP BY a.id,\n         a.name,\n         a.gender,\n         b.id,\n         b.name,\n         b.gender,\n         m.id,\n         m.name\nHAVING COUNT(bid) = 2\nOR COUNT(m.id) = 1",
    "error_type": "ExecutionError",
    "gold_result": "  id               name  gender\n0  2        Frank Gehry    male\n1  3         Zaha Hadid  female\n2  4  Mies Van Der Rohe    male",
    "pred_result": "None"
  },
  {
    "db_id": "architecture",
    "question": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
    "gold_query": "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'",
    "pred_query": "\nSELECT \"bridge\"\nFROM \"bridge\"\nWHERE \"name\" = 'Kolob Arch'\n  OR 'Rainbow Arch';",
    "error_type": "Mismatch",
    "gold_result": "                                         location\n                  Zion National Park , Utah , USA\nGlen Canyon National Recreation Area , Utah , USA",
    "pred_result": "\"bridge\"\n  bridge"
  },
  {
    "db_id": "architecture",
    "question": "Which of the mill names contains the french word 'Moulin'?",
    "gold_query": "SELECT name FROM mill WHERE name LIKE '%Moulin%'",
    "pred_query": "\nSELECT m.id,\n       m.name\nFROM mill m\nWHERE m.name LIKE '%Moulin%'\n  AND m.français == 'Oui'",
    "error_type": "ExecutionError",
    "gold_result": "                name\n0    Moulin Bertrand\n1    Moulin de Fexhe\n2  Moulin de Momalle\n3  Moulin du Château\n4  Moulin de Pousset",
    "pred_result": "None"
  },
  {
    "db_id": "architecture",
    "question": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?",
    "gold_query": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80",
    "pred_query": "\nSELECT DISTINCT m.name\nFROM mill m\nWHERE m.architect_id IN\n    (SELECT a.id\n     FROM architect a\n     WHERE a.name LIKE '%Bridge%';)",
    "error_type": "ExecutionError",
    "gold_result": "                name\n0     Le Vieux Molen\n1    Moulin Bertrand\n2    Moulin de Fexhe\n3  Moulin de Momalle",
    "pred_result": "None"
  },
  {
    "db_id": "architecture",
    "question": "What is the most common mill type, and how many are there?",
    "gold_query": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
    "pred_query": "\nSELECT 'mill_type' as mill_type,\n       count(*) as number_of_mills\nFROM mill\nGROUP BY mill_type",
    "error_type": "Mismatch",
    "gold_result": "       type  count(*)\nGrondzeiler         5",
    "pred_result": "mill_type  number_of_mills\nmill_type                6"
  },
  {
    "db_id": "architecture",
    "question": "How many architects haven't built a mill before year 1850?",
    "gold_query": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );",
    "pred_query": "\nSELECT a.id,\n       a.name,\n       a.nationality,\n       a.gender,\n       b.id,\n       b.name,\n       b.length_meters,\n       b.length_feet,\n       bbuilt_year,\n       b.notes,\n       m.name,\n       m.type,\n       m.location,\n       mbuilt_year,\n       m.notes,\n       abuilt_year > 1850\nFROM architect a\nLEFT JOIN bridge b ON a.id = b.architect_id\nLEFT JOIN mill m ON a.id = b.architect_id\nWHERE a.id NOT IN\n    (SELECT id\n     FROM arch 'a'\n     WHERE abuilt_year > 1850)",
    "error_type": "ExecutionError",
    "gold_result": "   count(*)\n0         2",
    "pred_result": "None"
  },
  {
    "db_id": "architecture",
    "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
    "gold_query": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet",
    "pred_query": "\nSELECT b.name\nFROM bridge b\nWHERE b.architect_id IN\n    (SELECT a.id\n     FROM architect a\n     WHERE a.nationality = 'American'\n       AND a.name = 'architect');\n\n\nSELECT b.name\nFROM bridge b\nWHERE b.architect_id IN\n    (SELECT a.id\n     FROM architect a\n     WHERE a.nationality = 'American'\n       AND a.name = 'architect');",
    "error_type": "ExecutionError",
    "gold_result": "                           name\n0   Hazarchishma Natural Bridge\n1                Jiangzhou Arch\n2                Shipton's Arch\n3  Xian Ren Qiao (Fairy Bridge)",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Show all the locations where no cinema has capacity over 800.",
    "gold_query": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800",
    "pred_query": "\nSELECT DISTINCT\nFROM cinema\nWHERE Capacity > 800",
    "error_type": "ExecutionError",
    "gold_result": "           Location\n0       County Cork\n1     County Dublin\n2      County Laois\n3      County Louth\n4  County Tipperary",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
    "gold_query": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011",
    "pred_query": "\nSELECT DISTINCT t.Location\nFROM cinema t\nWHERE t.Cinema_ID IN\n    (SELECT Cinema_ID\n     FROM cinema\n     WHERE Opening_year = 2010\n       OR Opening_year = 2011);",
    "error_type": "ExecutionError",
    "gold_result": "           Location\n0  County Tipperary",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "How many cinema do we have?",
    "gold_query": "SELECT count(*) FROM cinema",
    "pred_query": "\nSELECT COUNT(Cinema_ID)\nFROM cinema;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n       10",
    "pred_result": " COUNT(Cinema_ID)\n               10"
  },
  {
    "db_id": "cinema",
    "question": "Count the number of cinemas.",
    "gold_query": "SELECT count(*) FROM cinema",
    "pred_query": "\nSELECT COUNT(Cinema_ID)\nFROM cinema;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n       10",
    "pred_result": " COUNT(Cinema_ID)\n               10"
  },
  {
    "db_id": "cinema",
    "question": "Show name, opening year, and capacity for each cinema.",
    "gold_query": "SELECT name ,  openning_year ,  capacity FROM cinema",
    "pred_query": "-- Get all films\n\nSELECT Film_ID,\n       Number_in_season,\n       Title\nFROM film LEFT JOINSchedule ON film.Film_ID = Schedule.Film_ID;\n\n-- Get all cinemas\n\nSELECT CINema.Name,\n       Opening_year,\n       Capacity\nFROM cinema LEFT JOINSchedule ON cinema.Cinema_ID = Schedule.Cinema_ID;\n\n-- Get all films per cinema\n\nSELECT Film_ID,\n       Number_in_season,\n       Title\nFROM film LEFT JOINSchedule ON film.Film_ID = Schedule.Film_ID;",
    "error_type": "ExecutionError",
    "gold_result": "           Name  Openning_year  Capacity\n0       Codling           2010      1100\n1   Carrowleagh           2012       368\n2  Dublin Array           2015       364\n3      Glenmore           2009       305\n4      Glenough           2010       325\n5     Gortahile           2010       208\n6  Grouse Lodge           2011       203\n7    Moneypoint           2011       225\n8  Mount Callan           2011       908\n9         Oriel           2013       330",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Show the cinema name and location for cinemas with capacity above average.",
    "gold_query": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)",
    "pred_query": "\nSELECT C.Name,\n       C.Location,\n       F.Title,\n       F.Directed_by\nFROM cinema C\nJOIN film F ON C.Film_ID = F.Film_ID\nFROM film F\nWHERE F.Capacity >\n    (SELECT MAX(Capacity)\n     FROM cinema C)",
    "error_type": "ExecutionError",
    "gold_result": "           Name        Location\n0       Codling  County Wicklow\n1  Mount Callan    County Clare",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "What are all the locations with a cinema?",
    "gold_query": "SELECT DISTINCT LOCATION FROM cinema",
    "pred_query": "\nSELECT DISTINCT\nFrom (Location) AS [Location]\nFROM cinema;",
    "error_type": "ExecutionError",
    "gold_result": "           Location\n0    County Wicklow\n1       County Cork\n2     County Dublin\n3      County Clare\n4  County Tipperary\n5      County Laois\n6      County Louth",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Show all the cinema names and opening years in descending order of opening year.",
    "gold_query": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC",
    "pred_query": "-- Join cinema with film to get all films\n\nSELECT c.Name,\n       c.Opening_year\nFROM cinema c\nJOIN film f ON c.Film_ID = f.Film_ID -- Order the films by opening year descending\nORDER BY f.Opening_year DESC -- Get all films\n\nSELECT c.Name,\n       c.Opening_year\nFROM cinema c\nJOIN film f ON c.Film_ID = f.Film_ID",
    "error_type": "ExecutionError",
    "gold_result": "           Name  Openning_year\n0  Dublin Array           2015\n1         Oriel           2013\n2   Carrowleagh           2012\n3  Grouse Lodge           2011\n4    Moneypoint           2011\n5  Mount Callan           2011\n6       Codling           2010\n7      Glenough           2010\n8     Gortahile           2010\n9      Glenmore           2009",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "What are the name and location of the cinema with the largest capacity?",
    "gold_query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
    "pred_query": "\nSELECT Cinema.Name,\n       C Cinema.Location,\n       C Cinema.Capacity\nFROM Cinema\nWHERE Capacity =\n    (SELECT MAX(Cinema.Capacity)\n     FROM Cinema);",
    "error_type": "ExecutionError",
    "gold_result": "      Name        Location\n0  Codling  County Wicklow",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.",
    "gold_query": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011",
    "pred_query": "\nSELECT C.Film_ID,\n       C.Name,\n       C open_year,\n       C Capacities,\n       C Location,\n         C open_year,\n         C Capacities,\n         C open_year,\n         C Capacities,\n         C open_year,\n         C Capacities,\nFROM cinema\nLEFT JOIN schedule ON cinema.Cinema_ID = schedule.Cinema_ID\nGROUP BY cinema.Cinema_ID\nORDER BY cinema open_year ASC",
    "error_type": "ExecutionError",
    "gold_result": "   avg(capacity)  min(capacity)  max(capacity)\n0     399.666667            203            908",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Show each location and the number of cinemas there.",
    "gold_query": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION",
    "pred_query": "\nSELECT DISTINCT \"Location\"\nFROM \"cinema\"\nWHERE \"Location\" = \"Location\" IN\n    (SELECT \"Location\"\n     FROM \"cinema\"\n     GROUP BY \"Location\")\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": "        Location  count(*)\n    County Clare         3\n     County Cork         1\n   County Dublin         1\n    County Laois         1\n    County Louth         1\nCounty Tipperary         2\n  County Wicklow         1",
    "pred_result": "Empty DataFrame\nColumns: [Location]\nIndex: []"
  },
  {
    "db_id": "cinema",
    "question": "What is the location with the most cinemas opened in year 2010 or later?",
    "gold_query": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
    "pred_query": "\nSELECT Location,\n       COUNT(Cinema_ID) AS Rank\nFROM cinema\nLEFT JOIN schedule ON cinema.Cinema_ID = schedule.Cinema_ID\nGROUP BY Location\nORDER BY Rank DESC\nLIMIT 1",
    "error_type": "ExecutionError",
    "gold_result": "           Location\n0  County Tipperary",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Show all the locations with at least two cinemas with capacity above 300.",
    "gold_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
    "pred_query": "\nSELECT DISTINCT c.Location\nFROM cinema c\nJOIN schedule s ON s.Cinema_ID = c.Cinema_ID\nJOIN schedule s ON s.Cinema_ID = c2.Cinema_ID ... (repeat\n                                                   for all cinemas with capacity >300)",
    "error_type": "ExecutionError",
    "gold_result": "       Location\n0  County Clare",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Which locations have 2 or more cinemas with capacity over 300?",
    "gold_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
    "pred_query": "\nSELECT DISTINCT FromLocation\nFROM film\nWHERE film.Title LIKE '%Cinema%'\n  AND film.Title LIKE '%Film%'\n  AND film.Title LIKE '%Schedule%'\n  AND film.Title LIKE '%Cinema%'\n  AND film.Title LIKE '%Film%'\n  AND film.Title LIKE '%Schedule%'\n  AND film.Title LIKE '%Cinema%'\n  AND film.Title LIKE '%Film%'\n  AND film.Title LIKE '%Schedule%' Wait,\n      that's not right. I think I'm confusing the table names. Let me try again.",
    "error_type": "ExecutionError",
    "gold_result": "       Location\n0  County Clare",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Show the title and director for all films.",
    "gold_query": "SELECT title ,  directed_by FROM film",
    "pred_query": "\nSELECT \"Film_ID\",\n       \"Title\",\n       \"Directed_by\"\nFROM \"film\";",
    "error_type": "Mismatch",
    "gold_result": "                           Title            Directed_by\n The Case of the Mystery Weekend         Bill Schreiner\n     The Case of the Smart Dummy         Bill Schreiner\n        The Case: Off the Record         Bill Schreiner\nThe Case of the Bermuda Triangle Jesus Salvador Treviño\n    The Case of the Piggy Banker         Bill Schreiner",
    "pred_result": " Film_ID                            Title            Directed_by\n       1  The Case of the Mystery Weekend         Bill Schreiner\n       2      The Case of the Smart Dummy         Bill Schreiner\n       3         The Case: Off the Record         Bill Schreiner\n       4 The Case of the Bermuda Triangle Jesus Salvador Treviño\n       5     The Case of the Piggy Banker         Bill Schreiner"
  },
  {
    "db_id": "cinema",
    "question": "What are the title and director of each film?",
    "gold_query": "SELECT title ,  directed_by FROM film",
    "pred_query": "\nSELECT f.*\nFROM film f",
    "error_type": "Mismatch",
    "gold_result": "                           Title            Directed_by\n The Case of the Mystery Weekend         Bill Schreiner\n     The Case of the Smart Dummy         Bill Schreiner\n        The Case: Off the Record         Bill Schreiner\nThe Case of the Bermuda Triangle Jesus Salvador Treviño\n    The Case of the Piggy Banker         Bill Schreiner",
    "pred_result": " Film_ID  Rank_in_series  Number_in_season                            Title            Directed_by            Original_air_date Production_code\n       1              26                 1  The Case of the Mystery Weekend         Bill Schreiner        September 21–25, 1992     50021–50025\n       2              27                 2      The Case of the Smart Dummy         Bill Schreiner September 28–October 2, 1992     50231–50235\n       3              28                 3         The Case: Off the Record         Bill Schreiner            October 5–9, 1992     50011–50015\n       4              29                 4 The Case of the Bermuda Triangle Jesus Salvador Treviño          October 12–16, 1992     50251–50255\n       5              30                 5     The Case of the Piggy Banker         Bill Schreiner          October 19–23, 1992     50241–50245"
  },
  {
    "db_id": "cinema",
    "question": "Show all directors.",
    "gold_query": "SELECT DISTINCT directed_by FROM film",
    "pred_query": "-- The query selects the \"Directed_by\" column from the \"film\" table.\n-- It uses a SELECT statement with a FROM clause that selects the required columns from the \"film\" table.\n-- The FROM clause uses the \"Film_ID\" column from the \"film\" table.\n-- The query uses a LIMIT statement to return all rows.\n-- It also uses a HAVING clause to filter the results where the \"Directed_by\" column is not null.\n",
    "error_type": "ExecutionError",
    "gold_result": "              Directed_by\n0          Bill Schreiner\n1  Jesus Salvador Treviño",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Who are all the directors?",
    "gold_query": "SELECT DISTINCT directed_by FROM film",
    "pred_query": "\nSELECT DISTINCT\nFROM film \"Directed_by\" WHERE ... [Need to fill the WHERE clause]",
    "error_type": "ExecutionError",
    "gold_result": "              Directed_by\n0          Bill Schreiner\n1  Jesus Salvador Treviño",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "List all directors along with the number of films directed by each director.",
    "gold_query": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by",
    "pred_query": "\nSELECT D directed_by,\n       COUNT(f Films directed by each director.",
    "error_type": "ExecutionError",
    "gold_result": "              Directed_by  count(*)\n0          Bill Schreiner         4\n1  Jesus Salvador Treviño         1",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "What is total number of show times per dat for each cinema?",
    "gold_query": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id",
    "pred_query": "\nSELECT Cinema_ID,\n       COUNT(Date) AS Total_Shows\nFROM schedule\nGROUP BY Cinema_ID",
    "error_type": "Mismatch",
    "gold_result": "        Name  sum(T1.show_times_per_day)\n     Codling                          10\n Carrowleagh                           5\n   Gortahile                           4\nMount Callan                           5\n       Oriel                           5",
    "pred_result": " Cinema_ID  Total_Shows\n         1            3\n         2            1\n         6            1\n         9            1\n        10            1"
  },
  {
    "db_id": "cinema",
    "question": "What are the title and maximum price of each film?",
    "gold_query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
    "pred_query": "\nSELECT f.Title,\n       f.Price,\n       MAX(s.Price) as Max_Price\nFROM film f\nCROSS JOIN schedule s\nWHERE f Films are in the schedule",
    "error_type": "ExecutionError",
    "gold_result": "                              Title  max(T1.price)\n0   The Case of the Mystery Weekend          15.99\n1       The Case of the Smart Dummy          12.99\n2          The Case: Off the Record           8.99\n3  The Case of the Bermuda Triangle           9.99\n4      The Case of the Piggy Banker          12.99",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Give me the title and highest price for each film.",
    "gold_query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
    "pred_query": "\nSELECT f Title,\n       s Price\nFROM film f\nCross Join Schedule s\nWHERE f Film_ID = s Cinema_ID\nORDER by f Rank_in_series",
    "error_type": "ExecutionError",
    "gold_result": "                              Title  max(T1.price)\n0   The Case of the Mystery Weekend          15.99\n1       The Case of the Smart Dummy          12.99\n2          The Case: Off the Record           8.99\n3  The Case of the Bermuda Triangle           9.99\n4      The Case of the Piggy Banker          12.99",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Show cinema name, film title, date, and price for each record in schedule.",
    "gold_query": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id",
    "pred_query": "-- The query selects the necessary columns from the schedule table.\n-- It joins the schedule with the film and cinema tables to get the required information.\n-- It ensures that each film is associated with the correct cinema and shows the corresponding details.\n",
    "error_type": "ExecutionError",
    "gold_result": "           Name                             Title     Date  Price\n0       Codling   The Case of the Mystery Weekend   21 May  12.99\n1       Codling       The Case of the Smart Dummy   21 May  12.99\n2       Codling          The Case: Off the Record   21 Jun   8.99\n3   Carrowleagh   The Case of the Mystery Weekend  11 July   9.99\n4     Gortahile      The Case of the Piggy Banker    2 Aug  12.99\n5  Mount Callan  The Case of the Bermuda Triangle   20 May   9.99\n6         Oriel   The Case of the Mystery Weekend   19 May  15.99",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "What are the title and director of the films without any schedule?",
    "gold_query": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
    "pred_query": "\nSELECT \"Title\",\n       \"Directed_by\"\nFROM \"film\"\nWHERE \"Film_ID\" NOT IN\n    (SELECT \"Film_ID\"\n     FROM \"schedule\"\n     WHERE \"Film_ID\" IS NULL);",
    "error_type": "Mismatch",
    "gold_result": "Empty DataFrame\nColumns: [Title, Directed_by]\nIndex: []",
    "pred_result": "                           Title            Directed_by\n The Case of the Mystery Weekend         Bill Schreiner\n     The Case of the Smart Dummy         Bill Schreiner\n        The Case: Off the Record         Bill Schreiner\nThe Case of the Bermuda Triangle Jesus Salvador Treviño\n    The Case of the Piggy Banker         Bill Schreiner"
  },
  {
    "db_id": "cinema",
    "question": "Show director with the largest number of show times in total.",
    "gold_query": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
    "pred_query": "\nSELECT \"Director\"\nFROM \"film\"\nWHERE \"Rank_in_series\" = (\n  SELECT MAX(\"Number_in_season\")\n  FROM \"schedule\" WHERE \"Film_ID\" = \"Film_ID\"\n  FROM \"film\" WHERE \"Rank_in_series\" = \"Rank_in_series\"\n  AND \"Film_ID\" = \"Film_ID\"\n  AND \"Director\" = \"Director\"\n  AND \"Film_ID\" = \"Film_ID\"\n  AND \"Schedule_ID\" = \"Schedule_ID\"\n  AND \"Film_ID\" = \"Film_ID\"\n  AND \"Director\" = \"Director\"\n  AND \"Film_ID\" = \"Film_ID\"\n  AND \"Schedule_ID\" = \"Schedule_ID\"\n  AND \"Film_ID\" = \"Film_ID\"\n  AND \"Schedule_ID\" = \"Schedule_ID\"\n  AND \"Film_ID\" = \"Film_ID\"\n  AND \"Schedule_ID\" = \"Schedule_ID",
    "error_type": "ExecutionError",
    "gold_result": "      Directed_by\n0  Bill Schreiner",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "Find the locations that have more than one movie theater with capacity above 300.",
    "gold_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
    "pred_query": "\nSELECT DISTINCT \"Location\"\nFROM cinema\nWHERE\n    (SELECT COUNT(*)\n     FROM schedule\n     WHERE cinema_ID IN\n         (SELECT Cinema_ID\n          FROM cinema)) > 1\n  AND\n    (SELECT COUNT(*)\n     FROM schedule\n     WHERE cinema_ID IN\n         (SELECT Cinema_ID\n          FROM cinema)) > 300",
    "error_type": "Mismatch",
    "gold_result": "    Location\nCounty Clare",
    "pred_result": "Empty DataFrame\nColumns: [Location]\nIndex: []"
  },
  {
    "db_id": "cinema",
    "question": "In which locations are there more than one movie theater with capacity above 300?",
    "gold_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
    "pred_query": "\nSELECT DISTINCT c.Location\nFROM cinema c\nJOIN schedule s ON s.Cinema_ID = c.Cinema_ID\nWHERE s.Film_ID IN (SELECTFilm_ID\n                    From film\n                    Where Number_in_season > 300)",
    "error_type": "ExecutionError",
    "gold_result": "       Location\n0  County Clare",
    "pred_result": "None"
  },
  {
    "db_id": "cinema",
    "question": "How many films have the word 'Dummy' in their titles?",
    "gold_query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
    "pred_query": "\nSELECT COUNT(*)\nFROM film\nWHERE LOWER(Title) LIKE '%Dummy%';",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        1",
    "pred_result": " COUNT(*)\n        1"
  },
  {
    "db_id": "cinema",
    "question": "Count the number of films whose title contains the word 'Dummy'.",
    "gold_query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
    "pred_query": "\nSELECT COUNT(*)\nFROM film\nWHERE Title LIKE '%Dummy%';",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        1",
    "pred_result": " COUNT(*)\n        1"
  }
]