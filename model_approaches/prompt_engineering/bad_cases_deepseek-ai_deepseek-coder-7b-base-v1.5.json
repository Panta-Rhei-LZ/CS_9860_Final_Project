[
  {
    "db_id": "department_management",
    "question": "How many heads of the departments are older than 56 ?",
    "gold_query": "SELECT count(*) FROM head WHERE age  >  56",
    "pred_query": "\nSELECT COUNT(*)\nFROM head\nJOIN management ON head.head_ID = management.head_ID\nJOIN department ON management.department_ID = department.Department_ID\nWHERE head.age > 56;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        5",
    "pred_result": " COUNT(*)\n        3"
  },
  {
    "db_id": "department_management",
    "question": "List the name, born state and age of the heads of departments ordered by age.",
    "gold_query": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
    "pred_query": "\nSELECT h.name,\n       h.born_state,\n       h.age\nFROM head h\nJOIN management m ON h.head_ID = m.head_ID\nJOIN department d ON m.department_ID = d.Department_ID\nORDER BY h.age;",
    "error_type": "Mismatch",
    "gold_result": "              name  born_state  age\nPádraig Harrington Connecticut 43.0\n      Stewart Cink     Florida 50.0\n       Dudley Hart  California 52.0\n      Jeff Maggert    Delaware 53.0\n        Nick Faldo  California 56.0\n       Tiger Woods     Alabama 67.0\n  Franklin Langham Connecticut 67.0\n     Sergio García  California 68.0\n        K. J. Choi     Alabama 69.0\n     Billy Mayfair  California 69.0",
    "pred_result": "            name  born_state  age\n     Dudley Hart  California 52.0\n    Jeff Maggert    Delaware 53.0\nFranklin Langham Connecticut 67.0\n   Billy Mayfair  California 69.0\n      K. J. Choi     Alabama 69.0"
  },
  {
    "db_id": "department_management",
    "question": "What are the maximum and minimum budget of the departments?",
    "gold_query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
    "pred_query": "\nSELECT MAX(Budget_in_Billions) AS max_budget,\n       MIN(Budget_in_Billions) AS min_budget\nFROM department;",
    "error_type": "Mismatch",
    "gold_result": " max(budget_in_billions)  min(budget_in_billions)\n                   543.2                      6.2",
    "pred_result": " max_budget  min_budget\n      543.2         6.2"
  },
  {
    "db_id": "department_management",
    "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
    "gold_query": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
    "pred_query": "\nSELECT AVG(Num_Employees)\nFROM department\nWHERE Ranking BETWEEN 10 AND 15;",
    "error_type": "Mismatch",
    "gold_result": " avg(num_employees)\n      105468.166667",
    "pred_result": " AVG(Num_Employees)\n      105468.166667"
  },
  {
    "db_id": "department_management",
    "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
    "gold_query": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
    "pred_query": "\nSELECT DISTINCT strftime('%Y', \"Creation\") AS \"Creation Year\"\nFROM \"department\"\nJOIN \"management\" ON \"department\".\"Department_ID\" = \"management\".\"department_ID\"\nJOIN \"head\" ON \"management\".\"head_ID\" = \"head\".\"head_ID\"\nWHERE \"head\".\"born_state\" = 'Alabama';",
    "error_type": "Mismatch",
    "gold_result": "Creation\n    1903",
    "pred_result": "Creation Year\n        -4707"
  },
  {
    "db_id": "department_management",
    "question": "In which year were most departments established?",
    "gold_query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
    "pred_query": "\nSELECT strftime('%Y', Creation) AS Year,\n       COUNT(*) AS NumDepartments\nFROM department\nGROUP BY Year\nORDER BY NumDepartments DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": "Creation\n    1789",
    "pred_result": " Year  NumDepartments\n-4707              12"
  },
  {
    "db_id": "department_management",
    "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
    "gold_query": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'",
    "pred_query": "\nSELECT department.Name,\n       department.Num_Employees\nFROM department\nJOIN management ON department.Department_ID = management.department_ID\nJOIN head ON management.head_ID = head.head_ID\nWHERE head.temporary_acting = 'Yes';",
    "error_type": "ExecutionError",
    "gold_result": "                Name  Num_Employees\n0           Treasury       115897.0\n1  Homeland Security       208000.0\n2           Treasury       115897.0",
    "pred_result": "None"
  },
  {
    "db_id": "department_management",
    "question": "How many acting statuses are there?",
    "gold_query": "SELECT count(DISTINCT temporary_acting) FROM management",
    "pred_query": "\nSELECT COUNT(DISTINCT temporary_acting) AS num_acting_statuses\nFROM management;",
    "error_type": "Mismatch",
    "gold_result": " count(DISTINCT temporary_acting)\n                                2",
    "pred_result": " num_acting_statuses\n                   2"
  },
  {
    "db_id": "department_management",
    "question": "How many departments are led by heads who are not mentioned?",
    "gold_query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
    "pred_query": "\nSELECT COUNT(*) AS num_departments\nFROM department d\nLEFT JOIN management m ON d.Department_ID = m.department_ID\nLEFT JOIN head h ON m.head_ID = h.head_ID\nWHERE h.head_ID IS NULL;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n       11",
    "pred_result": " num_departments\n              11"
  },
  {
    "db_id": "department_management",
    "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
    "gold_query": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'",
    "pred_query": "\nSELECT DISTINCT h.born_state\nFROM head h\nJOIN management m ON h.head_ID = m.head_ID\nJOIN department d ON m.department_ID = d.Department_ID\nWHERE d.Name IN ('Treasury',\n                 'Homeland Security')",
    "error_type": "Mismatch",
    "gold_result": "born_state\nCalifornia",
    "pred_result": "born_state\n  Delaware\nCalifornia"
  },
  {
    "db_id": "department_management",
    "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
    "gold_query": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",
    "pred_query": "\nSELECT department.Department_ID,\n       department.Name,\n       COUNT(management.head_ID) AS Num_Heads\nFROM department\nJOIN management ON department.Department_ID = management.department_ID\nGROUP BY department.Department_ID,\n         department.Name\nHAVING COUNT(management.head_ID) > 1;",
    "error_type": "Mismatch",
    "gold_result": " Department_ID     Name  count(*)\n             2 Treasury         2",
    "pred_result": " Department_ID     Name  Num_Heads\n             2 Treasury          2"
  },
  {
    "db_id": "farm",
    "question": "How many farms are there?",
    "gold_query": "SELECT count(*) FROM farm",
    "pred_query": "\nSELECT COUNT(*) AS total_farms\nFROM farm;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        8",
    "pred_result": " total_farms\n           8"
  },
  {
    "db_id": "farm",
    "question": "Count the number of farms.",
    "gold_query": "SELECT count(*) FROM farm",
    "pred_query": "\nSELECT COUNT(*) AS num_farms\nFROM farm;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        8",
    "pred_result": " num_farms\n         8"
  },
  {
    "db_id": "farm",
    "question": "List the total number of horses on farms in ascending order.",
    "gold_query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
    "pred_query": "\nSELECT farm.Total_Horses,\n       farm.Farm_ID\nFROM farm\nORDER BY farm.Total_Horses ASC;",
    "error_type": "Mismatch",
    "gold_result": " Total_Horses\n       2546.9\n       2604.8\n       3658.9\n       4781.3\n       5056.5\n       5308.2\n       5486.9\n       5607.5",
    "pred_result": " Total_Horses  Farm_ID\n       2546.9        8\n       2604.8        7\n       3658.9        6\n       4781.3        5\n       5056.5        1\n       5308.2        4\n       5486.9        2\n       5607.5        3"
  },
  {
    "db_id": "farm",
    "question": "What is the total horses record for each farm, sorted ascending?",
    "gold_query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
    "pred_query": "\nSELECT farm.Farm_ID,\n       farm.Total_Horses\nFROM farm\nORDER BY farm.Total_Horses ASC;",
    "error_type": "Mismatch",
    "gold_result": " Total_Horses\n       2546.9\n       2604.8\n       3658.9\n       4781.3\n       5056.5\n       5308.2\n       5486.9\n       5607.5",
    "pred_result": " Farm_ID  Total_Horses\n       8        2546.9\n       7        2604.8\n       6        3658.9\n       5        4781.3\n       1        5056.5\n       4        5308.2\n       2        5486.9\n       3        5607.5"
  },
  {
    "db_id": "farm",
    "question": "What are the themes of farm competitions sorted by year in ascending order?",
    "gold_query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
    "pred_query": "\nSELECT fc.Theme,\n       fc.Year\nFROM farm_competition fc\nORDER BY fc.Year ASC;",
    "error_type": "Mismatch",
    "gold_result": "              Theme\n             Aliens\n           MTV Cube\n    Valentine's Day\n       MTV Asia Aid\n        Codehunters\nCarnival M is back!",
    "pred_result": "              Theme  Year\n             Aliens  2002\n           MTV Cube  2003\n    Valentine's Day  2004\n       MTV Asia Aid  2005\n        Codehunters  2006\nCarnival M is back!  2013"
  },
  {
    "db_id": "farm",
    "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
    "gold_query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
    "pred_query": "\nSELECT AVG(Working_Horses) AS Average_Working_Horses\nFROM farm\nWHERE Total_Horses > 5000;",
    "error_type": "Mismatch",
    "gold_result": " avg(Working_Horses)\n             3977.75",
    "pred_result": " Average_Working_Horses\n                3977.75"
  },
  {
    "db_id": "farm",
    "question": "Give the average number of working horses on farms with more than 5000 total horses.",
    "gold_query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
    "pred_query": "\nSELECT AVG(Working_Horses) AS Average_Working_Horses\nFROM farm\nWHERE Total_Horses > 5000;",
    "error_type": "Mismatch",
    "gold_result": " avg(Working_Horses)\n             3977.75",
    "pred_result": " Average_Working_Horses\n                3977.75"
  },
  {
    "db_id": "farm",
    "question": "What are the maximum and minimum number of cows across all farms.",
    "gold_query": "SELECT max(Cows) ,  min(Cows) FROM farm",
    "pred_query": "\nSELECT MAX(Cows) AS max_cows,\n       MIN(Cows) AS min_cows\nFROM farm;",
    "error_type": "Mismatch",
    "gold_result": " max(Cows)  min(Cows)\n    3987.0     2407.2",
    "pred_result": " max_cows  min_cows\n   3987.0    2407.2"
  },
  {
    "db_id": "farm",
    "question": "Return the maximum and minimum number of cows across all farms.",
    "gold_query": "SELECT max(Cows) ,  min(Cows) FROM farm",
    "pred_query": "\nSELECT MAX(Cows) AS max_cows,\n       MIN(Cows) AS min_cows\nFROM farm;",
    "error_type": "Mismatch",
    "gold_result": " max(Cows)  min(Cows)\n    3987.0     2407.2",
    "pred_result": " max_cows  min_cows\n   3987.0    2407.2"
  },
  {
    "db_id": "farm",
    "question": "How many different statuses do cities have?",
    "gold_query": "SELECT count(DISTINCT Status) FROM city",
    "pred_query": "\nSELECT COUNT(DISTINCT Status) AS num_statuses\nFROM city;",
    "error_type": "Mismatch",
    "gold_result": " count(DISTINCT Status)\n                      2",
    "pred_result": " num_statuses\n            2"
  },
  {
    "db_id": "farm",
    "question": "Count the number of different statuses.",
    "gold_query": "SELECT count(DISTINCT Status) FROM city",
    "pred_query": "\nSELECT COUNT(DISTINCT Status) AS Number_of_different_statuses\nFROM city;",
    "error_type": "Mismatch",
    "gold_result": " count(DISTINCT Status)\n                      2",
    "pred_result": " Number_of_different_statuses\n                            2"
  },
  {
    "db_id": "farm",
    "question": "List official names of cities in descending order of population.",
    "gold_query": "SELECT Official_Name FROM city ORDER BY Population DESC",
    "pred_query": "\nSELECT Official_Name,\n       Population\nFROM city\nORDER BY Population DESC;",
    "error_type": "Mismatch",
    "gold_result": "          Official_Name\nGrand Falls/Grand-Sault\n          Perth-Andover\n           Plaster Rock\n               Drummond\n              Aroostook",
    "pred_result": "          Official_Name  Population\nGrand Falls/Grand-Sault      5706.0\n          Perth-Andover      1778.0\n           Plaster Rock      1135.0\n               Drummond       775.0\n              Aroostook       351.0"
  },
  {
    "db_id": "farm",
    "question": "What are the official names of cities, ordered descending by population?",
    "gold_query": "SELECT Official_Name FROM city ORDER BY Population DESC",
    "pred_query": "\nSELECT Official_Name,\n       Population\nFROM city\nORDER BY Population DESC;",
    "error_type": "Mismatch",
    "gold_result": "          Official_Name\nGrand Falls/Grand-Sault\n          Perth-Andover\n           Plaster Rock\n               Drummond\n              Aroostook",
    "pred_result": "          Official_Name  Population\nGrand Falls/Grand-Sault      5706.0\n          Perth-Andover      1778.0\n           Plaster Rock      1135.0\n               Drummond       775.0\n              Aroostook       351.0"
  },
  {
    "db_id": "farm",
    "question": "What is the status of the city that has hosted the most competitions?",
    "gold_query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT city.Status,\n       COUNT(farm_competition.Competition_ID) AS num_competitions\nFROM city\nJOIN farm_competition ON city.City_ID = farm_competition.Host_city_ID\nGROUP BY city.Status\nORDER BY num_competitions DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": " Status\nVillage",
    "pred_result": " Status  num_competitions\nVillage                 5"
  },
  {
    "db_id": "farm",
    "question": "Please show the different statuses of cities and the average population of cities with each status.",
    "gold_query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
    "pred_query": "\nSELECT Status,\n       AVG(Population) AS Average_Population\nFROM city\nGROUP BY Status;",
    "error_type": "Mismatch",
    "gold_result": " Status  avg(Population)\n   Town          5706.00\nVillage          1009.75",
    "pred_result": " Status  Average_Population\n   Town             5706.00\nVillage             1009.75"
  },
  {
    "db_id": "farm",
    "question": "What are the statuses and average populations of each city?",
    "gold_query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
    "pred_query": "\nSELECT city.Status,\n       AVG(city.Population) AS Average_Population\nFROM city\nGROUP BY city.Status;",
    "error_type": "Mismatch",
    "gold_result": " Status  avg(Population)\n   Town          5706.00\nVillage          1009.75",
    "pred_result": " Status  Average_Population\n   Town             5706.00\nVillage             1009.75"
  },
  {
    "db_id": "farm",
    "question": "Please show the different statuses, ordered by the number of cities that have each.",
    "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
    "pred_query": "\nSELECT Status,\n       COUNT(*) AS City_Count\nFROM city\nGROUP BY Status\nORDER BY City_Count DESC;",
    "error_type": "Mismatch",
    "gold_result": " Status\n   Town\nVillage",
    "pred_result": " Status  City_Count\nVillage           4\n   Town           1"
  },
  {
    "db_id": "farm",
    "question": "Return the different statuses of cities, ascending by frequency.",
    "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
    "pred_query": "\nSELECT Status,\n       COUNT(*) AS Frequency\nFROM city\nGROUP BY Status\nORDER BY Frequency ASC;",
    "error_type": "Mismatch",
    "gold_result": " Status\n   Town\nVillage",
    "pred_result": " Status  Frequency\n   Town          1\nVillage          4"
  },
  {
    "db_id": "farm",
    "question": "List the most common type of Status across cities.",
    "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT Status,\n       COUNT(*) AS count\nFROM city\nGROUP BY Status\nORDER BY count DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": " Status\nVillage",
    "pred_result": " Status  count\nVillage      4"
  },
  {
    "db_id": "farm",
    "question": "What is the most common status across all cities?",
    "gold_query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT Status,\n       COUNT(*) AS count\nFROM city\nGROUP BY Status\nORDER BY count DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": " Status\nVillage",
    "pred_result": " Status  count\nVillage      4"
  },
  {
    "db_id": "farm",
    "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
    "gold_query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
    "pred_query": "\nSELECT DISTINCT Status\nFROM city\nWHERE Population > 1500\n  AND Population < 500;",
    "error_type": "Mismatch",
    "gold_result": " Status\nVillage",
    "pred_result": "Empty DataFrame\nColumns: [Status]\nIndex: []"
  },
  {
    "db_id": "aircraft",
    "question": "How many aircrafts are there?",
    "gold_query": "SELECT count(*) FROM aircraft",
    "pred_query": "\nSELECT COUNT(*) AS num_aircrafts\nFROM aircraft;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        5",
    "pred_result": " num_aircrafts\n             5"
  },
  {
    "db_id": "aircraft",
    "question": "What is the number of aircraft?",
    "gold_query": "SELECT count(*) FROM aircraft",
    "pred_query": "\nSELECT COUNT(*) AS Number_of_Aircraft\nFROM aircraft;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        5",
    "pred_result": " Number_of_Aircraft\n                  5"
  },
  {
    "db_id": "aircraft",
    "question": "What is the average number of international passengers of all airports?",
    "gold_query": "SELECT avg(International_Passengers) FROM airport",
    "pred_query": "\nSELECT AVG(International_Passengers) AS Average_International_Passengers\nFROM airport;",
    "error_type": "Mismatch",
    "gold_result": " avg(International_Passengers)\n                    16443156.6",
    "pred_result": " Average_International_Passengers\n                       16443156.6"
  },
  {
    "db_id": "aircraft",
    "question": "What is the average number of international passengers for an airport?",
    "gold_query": "SELECT avg(International_Passengers) FROM airport",
    "pred_query": "\nSELECT AVG(International_Passengers) AS Average_International_Passengers\nFROM airport;",
    "error_type": "Mismatch",
    "gold_result": " avg(International_Passengers)\n                    16443156.6",
    "pred_result": " Average_International_Passengers\n                       16443156.6"
  },
  {
    "db_id": "aircraft",
    "question": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?",
    "gold_query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
    "pred_query": "\nSELECT airport.Airport_Name,\n       airport.International_Passengers,\n       airport.Domestic_Passengers\nFROM airport\nWHERE airport.Airport_Name = 'London Heathrow';",
    "error_type": "Mismatch",
    "gold_result": " International_Passengers  Domestic_Passengers\n               61344438.0            5562516.0",
    "pred_result": "   Airport_Name  International_Passengers  Domestic_Passengers\nLondon Heathrow                61344438.0            5562516.0"
  },
  {
    "db_id": "aircraft",
    "question": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
    "gold_query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
    "pred_query": "\nSELECT SUM(Domestic_Passengers) AS Total_Domestic_Passengers\nFROM airport\nWHERE Airport_Name LIKE '%London%';",
    "error_type": "Mismatch",
    "gold_result": " sum(Domestic_Passengers)\n               12957585.0",
    "pred_result": " Total_Domestic_Passengers\n                12957585.0"
  },
  {
    "db_id": "aircraft",
    "question": "What are the total number of domestic passengers at all London airports?",
    "gold_query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
    "pred_query": "\nSELECT SUM(Domestic_Passengers) AS Total_Domestic_Passengers\nFROM airport\nWHERE Airport_Name LIKE '%London%'",
    "error_type": "Mismatch",
    "gold_result": " sum(Domestic_Passengers)\n               12957585.0",
    "pred_result": " Total_Domestic_Passengers\n                12957585.0"
  },
  {
    "db_id": "aircraft",
    "question": "What are the maximum and minimum number of transit passengers of all aiports.",
    "gold_query": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
    "pred_query": "\nSELECT MAX(Transit_Passengers) AS max_transit_passengers,\n       MIN(Transit_Passengers) AS min_transit_passengers\nFROM airport;",
    "error_type": "Mismatch",
    "gold_result": " max(Transit_Passengers)  min(Transit_Passengers)\n                156246.0                   4395.0",
    "pred_result": " max_transit_passengers  min_transit_passengers\n               156246.0                  4395.0"
  },
  {
    "db_id": "aircraft",
    "question": "What is the maximum and mininum number of transit passengers for all airports?",
    "gold_query": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
    "pred_query": "\nSELECT MAX(Transit_Passengers) AS max_transit_passengers,\n       MIN(Transit_Passengers) AS min_transit_passengers\nFROM airport;",
    "error_type": "Mismatch",
    "gold_result": " max(Transit_Passengers)  min(Transit_Passengers)\n                156246.0                   4395.0",
    "pred_result": " max_transit_passengers  min_transit_passengers\n               156246.0                  4395.0"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names of all pilots 30 years old or young in descending alphabetical order?",
    "gold_query": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC",
    "pred_query": "\nSELECT Name\nFROM pilot\nWHERE Age = 30\nORDER BY Name DESC;",
    "error_type": "Mismatch",
    "gold_result": "                     Name\n          Winnifred Boyle\n    Prof. Zackery Collins\nMr. Cristian Halvorson II\n           Maxwell Graham\n     Katheryn Gorczany IV\n       Dr. Jade Bradtke V\n           Della Lindgren\n           Baylee Steuber\n            Ayana Spencer",
    "pred_result": "           Name\nWinnifred Boyle\n Baylee Steuber"
  },
  {
    "db_id": "aircraft",
    "question": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?",
    "gold_query": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"",
    "pred_query": "\nSELECT AVG(Total_Passengers)\nFROM airport\nJOIN airport_aircraft ON airport.Airport_ID = airport_aircraft.Airport_ID\nJOIN aircraft ON airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID\nWHERE aircraft.Aircraft = 'Robinson R-22';",
    "error_type": "Mismatch",
    "gold_result": " avg(T3.Total_Passengers)\n               34205887.0",
    "pred_result": " AVG(Total_Passengers)\n            34205887.0"
  },
  {
    "db_id": "aircraft",
    "question": "What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?",
    "gold_query": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"",
    "pred_query": "\nSELECT AVG(Total_Passengers)\nFROM airport\nJOIN airport_aircraft ON airport.Airport_ID = airport_aircraft.Airport_ID\nJOIN aircraft ON airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID\nWHERE aircraft.Aircraft = 'Robinson R-22';",
    "error_type": "Mismatch",
    "gold_result": " avg(T3.Total_Passengers)\n               34205887.0",
    "pred_result": " AVG(Total_Passengers)\n            34205887.0"
  },
  {
    "db_id": "aircraft",
    "question": "List the name of the aircraft that has been named winning aircraft the most number of times.",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT a.Aircraft,\n       COUNT(m.Winning_Aircraft) AS Winning_Aircraft_Count\nFROM aircraft a\nJOIN match m ON a.Aircraft_ID = m.Winning_Aircraft\nGROUP BY a.Aircraft\nORDER BY Winning_Aircraft_Count DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": " Aircraft\nMil Mi-26",
    "pred_result": "     Aircraft  Winning_Aircraft_Count\nRobinson R-22                       2"
  },
  {
    "db_id": "aircraft",
    "question": "What is the name of the aircraft that has won an award the most?",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
    "pred_query": "\nSELECT aircraft.Aircraft,\n       COUNT(*) AS award_count\nFROM aircraft\nJOIN match ON aircraft.Aircraft_ID = match.Winning_Aircraft\nGROUP BY aircraft.Aircraft\nORDER BY award_count DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": " Aircraft\nMil Mi-26",
    "pred_result": "     Aircraft  award_count\nRobinson R-22            2"
  },
  {
    "db_id": "aircraft",
    "question": "List the names of aircrafts and the number of times it won matches.",
    "gold_query": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",
    "pred_query": "\nSELECT aircraft.Aircraft,\n       COUNT(match.Winning_Aircraft) AS Number_of_Wins\nFROM aircraft\nJOIN match ON aircraft.Aircraft_ID = match.Winning_Aircraft\nGROUP BY aircraft.Aircraft;",
    "error_type": "Mismatch",
    "gold_result": "             Aircraft  COUNT(*)\n        Robinson R-22         2\n Bell 206B3 JetRanger         1\n       CH-47D Chinook         1\n            Mil Mi-26         2\nCH-53E Super Stallion         1",
    "pred_result": "             Aircraft  Number_of_Wins\n Bell 206B3 JetRanger               1\n       CH-47D Chinook               1\nCH-53E Super Stallion               1\n            Mil Mi-26               2\n        Robinson R-22               2"
  },
  {
    "db_id": "aircraft",
    "question": "For each aircraft that has won an award, what is its name and how many time has it won?",
    "gold_query": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",
    "pred_query": "\nSELECT aircraft.Aircraft,\n       COUNT(match.Winning_Aircraft) AS Number_of_Awards\nFROM aircraft\nJOIN match ON aircraft.Aircraft_ID = match.Winning_Aircraft\nGROUP BY aircraft.Aircraft",
    "error_type": "Mismatch",
    "gold_result": "             Aircraft  COUNT(*)\n        Robinson R-22         2\n Bell 206B3 JetRanger         1\n       CH-47D Chinook         1\n            Mil Mi-26         2\nCH-53E Super Stallion         1",
    "pred_result": "             Aircraft  Number_of_Awards\n Bell 206B3 JetRanger                 1\n       CH-47D Chinook                 1\nCH-53E Super Stallion                 1\n            Mil Mi-26                 2\n        Robinson R-22                 2"
  },
  {
    "db_id": "aircraft",
    "question": "List names of all pilot in descending order of age.",
    "gold_query": "SELECT Name FROM pilot ORDER BY Age DESC",
    "pred_query": "\nSELECT Name,\n       Age\nFROM pilot\nORDER BY Age DESC;",
    "error_type": "Mismatch",
    "gold_result": "                     Name\n          Elisha Hickle V\n            Blaise Muller\n         Ellen Ledner III\n          Winnifred Boyle\n           Baylee Steuber\n           Della Lindgren\n       Dr. Jade Bradtke V\n           Maxwell Graham\n            Ayana Spencer\n    Prof. Zackery Collins\nMr. Cristian Halvorson II\n     Katheryn Gorczany IV",
    "pred_result": "                     Name  Age\n          Elisha Hickle V   37\n            Blaise Muller   33\n         Ellen Ledner III   31\n          Winnifred Boyle   30\n           Baylee Steuber   30\n           Della Lindgren   29\n       Dr. Jade Bradtke V   26\n           Maxwell Graham   26\n            Ayana Spencer   25\n    Prof. Zackery Collins   23\nMr. Cristian Halvorson II   23\n     Katheryn Gorczany IV   20"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names of all pilots listed by descending age?",
    "gold_query": "SELECT Name FROM pilot ORDER BY Age DESC",
    "pred_query": "\nSELECT Name,\n       Age\nFROM pilot\nORDER BY Age DESC;",
    "error_type": "Mismatch",
    "gold_result": "                     Name\n          Elisha Hickle V\n            Blaise Muller\n         Ellen Ledner III\n          Winnifred Boyle\n           Baylee Steuber\n           Della Lindgren\n       Dr. Jade Bradtke V\n           Maxwell Graham\n            Ayana Spencer\n    Prof. Zackery Collins\nMr. Cristian Halvorson II\n     Katheryn Gorczany IV",
    "pred_result": "                     Name  Age\n          Elisha Hickle V   37\n            Blaise Muller   33\n         Ellen Ledner III   31\n          Winnifred Boyle   30\n           Baylee Steuber   30\n           Della Lindgren   29\n       Dr. Jade Bradtke V   26\n           Maxwell Graham   26\n            Ayana Spencer   25\n    Prof. Zackery Collins   23\nMr. Cristian Halvorson II   23\n     Katheryn Gorczany IV   20"
  },
  {
    "db_id": "aircraft",
    "question": "List the names of aircrafts and that won matches at least twice.",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
    "pred_query": "\nSELECT aircraft.Aircraft,\n       COUNT(match.Winning_Aircraft) AS num_wins\nFROM aircraft\nJOIN match ON aircraft.Aircraft_ID = match.Winning_Aircraft\nGROUP BY aircraft.Aircraft\nHAVING num_wins >= 2;",
    "error_type": "Mismatch",
    "gold_result": "     Aircraft\nRobinson R-22\n    Mil Mi-26",
    "pred_result": "     Aircraft  num_wins\n    Mil Mi-26         2\nRobinson R-22         2"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names of all aircrafts that have won a match at least twice?",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
    "pred_query": "\nSELECT DISTINCT Aircraft\nFROM aircraft\nJOIN match ON aircraft.Aircraft_ID = match.Winning_Aircraft\nGROUP BY Aircraft\nHAVING COUNT(*) >= 2;",
    "error_type": "Mismatch",
    "gold_result": "     Aircraft\nRobinson R-22\n    Mil Mi-26",
    "pred_result": "     Aircraft\n    Mil Mi-26\nRobinson R-22"
  },
  {
    "db_id": "aircraft",
    "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?",
    "gold_query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
    "pred_query": "\nSELECT DISTINCT a.Aircraft\nFROM aircraft a\nJOIN airport_aircraft aa ON a.Aircraft_ID = aa.Aircraft_ID\nJOIN airport ap ON aa.Airport_ID = ap.Airport_ID\nWHERE ap.Airport_Name IN ('London Heathrow',\n                          'Gatwick')",
    "error_type": "Mismatch",
    "gold_result": "Empty DataFrame\nColumns: [Aircraft]\nIndex: []",
    "pred_result": "            Aircraft\nBell 206B3 JetRanger"
  },
  {
    "db_id": "aircraft",
    "question": "what is the name and age of the youngest winning pilot?",
    "gold_query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
    "pred_query": "\nSELECT Name,\n       Age\nFROM pilot\nJOIN match ON pilot.Pilot_Id = match.Winning_Pilot\nWHERE match.Winning_Pilot =\n    (SELECT Winning_Pilot\n     FROM match\n     ORDER BY Age ASC\n     LIMIT 1);",
    "error_type": "ExecutionError",
    "gold_result": "                   Name  Age\n0  Katheryn Gorczany IV   20",
    "pred_result": "None"
  },
  {
    "db_id": "architecture",
    "question": "How many architects are female?",
    "gold_query": "SELECT count(*) FROM architect WHERE gender  =  'female'",
    "pred_query": "\nSELECT COUNT(*)\nFROM architect\nWHERE gender = 'female';",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        1",
    "pred_result": " COUNT(*)\n        1"
  },
  {
    "db_id": "architecture",
    "question": "What is the maximum length in meters for the bridges and what are the architects' names?",
    "gold_query": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id",
    "pred_query": "\nSELECT MAX(length_meters),\n       name\nFROM bridge\nJOIN architect ON bridge.architect_id = architect.id",
    "error_type": "ExecutionError",
    "gold_result": "   max(T1.length_meters)                name\n0                  121.0  Frank Lloyd Wright",
    "pred_result": "None"
  },
  {
    "db_id": "architecture",
    "question": "What is the average length in feet of the bridges?",
    "gold_query": "SELECT avg(length_feet) FROM bridge",
    "pred_query": "\nSELECT AVG(length_feet) AS average_length_feet\nFROM bridge;",
    "error_type": "Mismatch",
    "gold_result": " avg(length_feet)\n           244.64",
    "pred_result": " average_length_feet\n              244.64"
  },
  {
    "db_id": "architecture",
    "question": "What are the ids, names and genders of the architects who built two bridges or one mill?",
    "gold_query": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1",
    "pred_query": "\nSELECT architect.id,\n       architect.name,\n       architect.gender\nFROM architect\nJOIN bridge ON architect.id = bridge.architect_id\nJOIN mill ON architect.id = mill.architect_id\nWHERE bridge.id IN\n    (SELECT architect_id\n     FROM bridge\n     GROUP BY architect_id\n     HAVING COUNT(*) >= 2)\n  OR mill.id IN\n    (SELECT architect_id\n     FROM mill\n     GROUP BY architect_id\n     HAVING COUNT(*) = 1);",
    "error_type": "Mismatch",
    "gold_result": "id              name gender\n 2       Frank Gehry   male\n 3        Zaha Hadid female\n 4 Mies Van Der Rohe   male",
    "pred_result": "id               name gender\n 1 Frank Lloyd Wright   male\n 1 Frank Lloyd Wright   male\n 1 Frank Lloyd Wright   male\n 1 Frank Lloyd Wright   male\n 1 Frank Lloyd Wright   male\n 2        Frank Gehry   male\n 2        Frank Gehry   male\n 2        Frank Gehry   male\n 2        Frank Gehry   male\n 3         Zaha Hadid female\n 4  Mies Van Der Rohe   male\n 4  Mies Van Der Rohe   male"
  },
  {
    "db_id": "architecture",
    "question": "Which of the mill names contains the french word 'Moulin'?",
    "gold_query": "SELECT name FROM mill WHERE name LIKE '%Moulin%'",
    "pred_query": "\nSELECT *\nFROM mill\nWHERE name LIKE '%Moulin%';",
    "error_type": "Mismatch",
    "gold_result": "             name\n  Moulin Bertrand\n  Moulin de Fexhe\nMoulin de Momalle\nMoulin du Château\nMoulin de Pousset",
    "pred_result": " architect_id  id              location              name        type  built_year              notes\n            1   2               Donceel   Moulin Bertrand Grondzeiler        1890 Molenechos (Dutch)\n            2   3 Fexhe-le-haut-Clocher   Moulin de Fexhe Grondzeiler        1843 Molenechos (Dutch)\n            3   4               Momalle Moulin de Momalle   Bergmolen        1850 Molenechos (Dutch)\n            4   5                 Othée Moulin du Château Grondzeiler        1856 Molenechos (Dutch)\n            4   6               Pousset Moulin de Pousset Grondzeiler        1819 Molenechos (Dutch)"
  },
  {
    "db_id": "architecture",
    "question": "What is the most common mill type, and how many are there?",
    "gold_query": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
    "pred_query": "\nSELECT type,\n       COUNT(*) AS count\nFROM mill\nGROUP BY type\nORDER BY count DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": "       type  count(*)\nGrondzeiler         5",
    "pred_result": "       type  count\nGrondzeiler      5"
  },
  {
    "db_id": "architecture",
    "question": "How many architects haven't built a mill before year 1850?",
    "gold_query": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );",
    "pred_query": "\nSELECT COUNT(DISTINCT architect.id)\nFROM architect\nLEFT JOIN mill ON architect.id = mill.architect_id\nWHERE mill.built_year > 1850\n  OR mill.built_year IS NULL;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        2",
    "pred_result": " COUNT(DISTINCT architect.id)\n                            3"
  },
  {
    "db_id": "cinema",
    "question": "Show all the locations where no cinema has capacity over 800.",
    "gold_query": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800",
    "pred_query": "\nSELECT DISTINCT Location\nFROM cinema\nWHERE Capacity <= 800",
    "error_type": "Mismatch",
    "gold_result": "        Location\n     County Cork\n   County Dublin\n    County Laois\n    County Louth\nCounty Tipperary",
    "pred_result": "        Location\n     County Cork\n   County Dublin\n    County Clare\nCounty Tipperary\n    County Laois\n    County Louth"
  },
  {
    "db_id": "cinema",
    "question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
    "gold_query": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011",
    "pred_query": "\nSELECT DISTINCT Location\nFROM cinema\nWHERE Openning_year IN (2010,\n                        2011)",
    "error_type": "Mismatch",
    "gold_result": "        Location\nCounty Tipperary",
    "pred_result": "        Location\n  County Wicklow\nCounty Tipperary\n    County Laois\n    County Clare"
  },
  {
    "db_id": "cinema",
    "question": "How many cinema do we have?",
    "gold_query": "SELECT count(*) FROM cinema",
    "pred_query": "\nSELECT COUNT(*) AS cinema_count\nFROM cinema;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n       10",
    "pred_result": " cinema_count\n           10"
  },
  {
    "db_id": "cinema",
    "question": "Count the number of cinemas.",
    "gold_query": "SELECT count(*) FROM cinema",
    "pred_query": "\nSELECT COUNT(*) AS num_cinemas\nFROM cinema;",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n       10",
    "pred_result": " num_cinemas\n          10"
  },
  {
    "db_id": "cinema",
    "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.",
    "gold_query": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011",
    "pred_query": "\nSELECT AVG(Capacity) AS average_capacity,\n       MIN(Capacity) AS min_capacity,\n       MAX(Capacity) AS max_capacity\nFROM cinema\nWHERE Openning_year >= 2011;",
    "error_type": "Mismatch",
    "gold_result": " avg(capacity)  min(capacity)  max(capacity)\n    399.666667            203            908",
    "pred_result": " average_capacity  min_capacity  max_capacity\n       399.666667           203           908"
  },
  {
    "db_id": "cinema",
    "question": "Show each location and the number of cinemas there.",
    "gold_query": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION",
    "pred_query": "\nSELECT Location,\n       COUNT(*) AS Number_of_cinemas\nFROM cinema\nGROUP BY Location;",
    "error_type": "Mismatch",
    "gold_result": "        Location  count(*)\n    County Clare         3\n     County Cork         1\n   County Dublin         1\n    County Laois         1\n    County Louth         1\nCounty Tipperary         2\n  County Wicklow         1",
    "pred_result": "        Location  Number_of_cinemas\n    County Clare                  3\n     County Cork                  1\n   County Dublin                  1\n    County Laois                  1\n    County Louth                  1\nCounty Tipperary                  2\n  County Wicklow                  1"
  },
  {
    "db_id": "cinema",
    "question": "What is the location with the most cinemas opened in year 2010 or later?",
    "gold_query": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
    "pred_query": "\nSELECT Location,\n       COUNT(*) AS num_cinemas\nFROM cinema\nWHERE Openning_year >= 2010\nGROUP BY Location\nORDER BY num_cinemas DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": "        Location\nCounty Tipperary",
    "pred_result": "        Location  num_cinemas\nCounty Tipperary            2"
  },
  {
    "db_id": "cinema",
    "question": "List all directors along with the number of films directed by each director.",
    "gold_query": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by",
    "pred_query": "\nSELECT Directed_by,\n       COUNT(*) AS Number_of_films\nFROM film\nGROUP BY Directed_by",
    "error_type": "Mismatch",
    "gold_result": "           Directed_by  count(*)\n        Bill Schreiner         4\nJesus Salvador Treviño         1",
    "pred_result": "           Directed_by  Number_of_films\n        Bill Schreiner                4\nJesus Salvador Treviño                1"
  },
  {
    "db_id": "cinema",
    "question": "What is total number of show times per dat for each cinema?",
    "gold_query": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id",
    "pred_query": "\nSELECT cinema.Name,\n       schedule.Date,\n       SUM(schedule.Show_times_per_day) AS Total_Show_Times\nFROM cinema\nJOIN schedule ON cinema.Cinema_ID = schedule.Cinema_ID\nGROUP BY cinema.Name,\n         schedule.Date",
    "error_type": "Mismatch",
    "gold_result": "        Name  sum(T1.show_times_per_day)\n     Codling                          10\n Carrowleagh                           5\n   Gortahile                           4\nMount Callan                           5\n       Oriel                           5",
    "pred_result": "        Name    Date  Total_Show_Times\n Carrowleagh 11 July                 5\n     Codling  21 Jun                 2\n     Codling  21 May                 8\n   Gortahile   2 Aug                 4\nMount Callan  20 May                 5\n       Oriel  19 May                 5"
  },
  {
    "db_id": "cinema",
    "question": "What are the title and maximum price of each film?",
    "gold_query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
    "pred_query": "\nSELECT Title,\n       MAX(Price) AS Max_Price\nFROM film\nJOIN schedule ON film.Film_ID = schedule.Film_ID\nGROUP BY Title;",
    "error_type": "Mismatch",
    "gold_result": "                           Title  max(T1.price)\n The Case of the Mystery Weekend          15.99\n     The Case of the Smart Dummy          12.99\n        The Case: Off the Record           8.99\nThe Case of the Bermuda Triangle           9.99\n    The Case of the Piggy Banker          12.99",
    "pred_result": "                           Title  Max_Price\nThe Case of the Bermuda Triangle       9.99\n The Case of the Mystery Weekend      15.99\n    The Case of the Piggy Banker      12.99\n     The Case of the Smart Dummy      12.99\n        The Case: Off the Record       8.99"
  },
  {
    "db_id": "cinema",
    "question": "Give me the title and highest price for each film.",
    "gold_query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
    "pred_query": "\nSELECT film.Title,\n       MAX(schedule.Price) AS Highest_Price\nFROM film\nJOIN schedule ON film.Film_ID = schedule.Film_ID\nGROUP BY film.Title;",
    "error_type": "Mismatch",
    "gold_result": "                           Title  max(T1.price)\n The Case of the Mystery Weekend          15.99\n     The Case of the Smart Dummy          12.99\n        The Case: Off the Record           8.99\nThe Case of the Bermuda Triangle           9.99\n    The Case of the Piggy Banker          12.99",
    "pred_result": "                           Title  Highest_Price\nThe Case of the Bermuda Triangle           9.99\n The Case of the Mystery Weekend          15.99\n    The Case of the Piggy Banker          12.99\n     The Case of the Smart Dummy          12.99\n        The Case: Off the Record           8.99"
  },
  {
    "db_id": "cinema",
    "question": "Show director with the largest number of show times in total.",
    "gold_query": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
    "pred_query": "\nSELECT Directed_by,\n       COUNT(*) AS Total_Show_Times\nFROM film\nJOIN schedule ON film.Film_ID = schedule.Film_ID\nGROUP BY Directed_by\nORDER BY Total_Show_Times DESC\nLIMIT 1;",
    "error_type": "Mismatch",
    "gold_result": "   Directed_by\nBill Schreiner",
    "pred_result": "   Directed_by  Total_Show_Times\nBill Schreiner                 6"
  },
  {
    "db_id": "cinema",
    "question": "How many films have the word 'Dummy' in their titles?",
    "gold_query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
    "pred_query": "\nSELECT COUNT(*) AS num_films\nFROM film\nWHERE Title LIKE '%Dummy%';",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        1",
    "pred_result": " num_films\n         1"
  },
  {
    "db_id": "cinema",
    "question": "Count the number of films whose title contains the word 'Dummy'.",
    "gold_query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
    "pred_query": "\nSELECT COUNT(*)\nFROM film\nWHERE Title LIKE '%Dummy%';",
    "error_type": "Mismatch",
    "gold_result": " count(*)\n        1",
    "pred_result": " COUNT(*)\n        1"
  }
]